<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/10/2018 1:37:16 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CGSUDAY"
  DTS:CreatorName="NIUNT\A1809750"
  DTS:DTSID="{A548331E-AD3B-4940-8500-A24D351296D5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3008.28"
  DTS:LocaleID="1033"
  DTS:ObjectName="ReplaceOrCreateTablesFromExcelSheet"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="36"
  DTS:VersionGUID="{390B8201-5A8D-4371-8546-1F6EA1928708}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLEDBConnection]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{D0EFC7AE-20C9-49A1-AC62-7CFFF36B610E}"
      DTS:ObjectName="OLEDBConnection">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">"Data Source="+@[User::ServerName]+";User ID="+@[User::LoginName]+";Password="+@[User::LoginPassword]+";Initial Catalog="+@[User::DatabaseName]+";Application Name=SSIS-AppendToTablesFromExcelSheets-{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}"+@[User::ServerName]+"."+@[User::DatabaseName]+"."+@[User::LoginName]+";"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=131.156.33.147;User ID=sa;Initial Catalog=60by25Development;Application Name=SSIS-AppendToTablesFromExcelSheets-{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}131.156.33.147.60by25Development.sa;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F24C92AB-45FD-49BC-9D8C-A2FC63465394}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ArchiveFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0743432E-FDE4-4676-9DE4-914C5EFF2DC4}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::BackUpSchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BackUpSchemaName">
      <DTS:VariableValue
        DTS:DataType="8">archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BAD74B5A-3C63-43DE-BC78-F96EC12D87D8}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::DatabaseName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DatabaseName">
      <DTS:VariableValue
        DTS:DataType="8">60by25Development</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{534BB60F-38F7-4C4D-A492-0F73FDB4100D}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailFrom]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailFrom">
      <DTS:VariableValue
        DTS:DataType="8">cgs.niu@gmail.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{474F10AB-C026-43C8-9AF4-50125D2FD100}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailFromPassword]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailFromPassword">
      <DTS:VariableValue
        DTS:DataType="8">CgsNiu@1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6E14C81A-C88D-4943-A485-6058B319393C}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailTo]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailTo">
      <DTS:VariableValue
        DTS:DataType="8">asaraswathyperumal1@niu.edu</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{04EE4A19-D911-4684-9524-4A66C7A67686}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ErrorLogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorLogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\ErrorLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B8A45730-92B5-41BD-B997-44DB7560D972}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A9C62471-F24D-4E95-9F24-164175B2A498}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginName">
      <DTS:VariableValue
        DTS:DataType="8">sa</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EBDCE415-870A-48C8-85B8-845E3F0DBCEC}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginPassword]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginPassword">
      <DTS:VariableValue
        DTS:DataType="8">cgstestSQL2013</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{96FDB670-704E-442A-A08D-FEEB9124CADA}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ReplaceSourceFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ReplaceSourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\DummyFolderForSSIS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5E3BB2B3-5409-4C51-89DE-06F625357A19}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::SchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{99F6CF52-BC48-42C9-9C0E-261DA5D08105}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ServerName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ServerName">
      <DTS:VariableValue
        DTS:DataType="8">131.156.33.147</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{22367A18-73B2-4ACA-8E56-5F87009F327A}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_7b826b4e4bcc43aabef520aa583ce374"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ArchiveFolderPath,User::BackUpSchemaName,User::EmailFrom,User::EmailFromPassword,User::EmailTo,User::ErrorLogFolderPath,User::LogFolderPath,System::PackageName,User::ReplaceSourceFolderPath,User::SchemaName,System::UserName">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;
using System.Data.OleDb;
using System.Text;
using System.Net.Mail;
#endregion

namespace ST_7b826b4e4bcc43aabef520aa583ce374
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            bool notEmptyFlag = false;
            string logFileName = "";
            string errorLogFileName = "";
            try
            {
                String sourceFolderPath = Dts.Variables["User::ReplaceSourceFolderPath"].Value.ToString();
                String schemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                String backUpSchemaName = Dts.Variables["User::BackUpSchemaName"].Value.ToString();
                String userName = Dts.Variables["System::UserName"].Value.ToString();
                String archiveFolderPath = Dts.Variables["User::ArchiveFolderPath"].Value.ToString();
                String packageName = Dts.Variables["System::PackageName"].Value.ToString();
                String logFolderPath = Dts.Variables["User::LogFolderPath"].Value.ToString();

                var directory = new DirectoryInfo(sourceFolderPath);
                FileInfo[] files = directory.GetFiles();
                string fileFullPath = "", fileExtension = "", filename = "";
                string logTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                StreamWriter streamWriter = null;
                logFileName = logFolderPath + "\\" + packageName + "_$" + logTime + ".log";

                bool isFirstFile = true;

                foreach (FileInfo file in files)
                {
                    if (isFirstFile)
                    {
                        streamWriter = File.CreateText(logFileName);
                        isFirstFile = false;
                        notEmptyFlag = true;
                    }
                    if (file.Name.Contains(".xlsx")) { filename = file.Name.Replace(".xlsx", ""); fileExtension = ".xlsx"; }
                    else if (file.Name.Contains(".xls")) { filename = file.Name.Replace(".xls", ""); fileExtension = ".xls"; }
                    else continue;

                    fileFullPath = sourceFolderPath + "\\" + file.Name;

                    string connectionStringWithoutExcelDataType = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
                    OleDbConnection oleDbConnectionWithoutExcelDataType = new OleDbConnection(connectionStringWithoutExcelDataType);

                    oleDbConnectionWithoutExcelDataType.Open();
                    DataTable dataTableWithEachSheetInfo = oleDbConnectionWithoutExcelDataType.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    oleDbConnectionWithoutExcelDataType.Close();

                    streamWriter.WriteLine("The current file is: " + file.Name);

                    string sheetname = "";
                    foreach (DataRow dataRowWithCurrentSheetInfo in dataTableWithEachSheetInfo.Rows)
                    {
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("_FilterDatabase")) continue;
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("$"))
                        {
                            sheetname = dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Replace("$", "");

                            streamWriter.WriteLine("The current sheet is: " + sheetname);

                            SqlConnection sqlConnection = new SqlConnection();
                            sqlConnection = (SqlConnection)(Dts.Connections["OLEDBConnection"].AcquireConnection(Dts.Transaction) as SqlConnection);

                            SqlCommand sqlCommand = sqlConnection.CreateCommand();
                            string checkTableAvailabilityQuery = "SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[" + schemaName + "].[" + sheetname + "]')  AND type in (N'U')";
                            sqlCommand.CommandText = checkTableAvailabilityQuery;
                            string resultOfTableAvailabilityCheck = "";
                            resultOfTableAvailabilityCheck = (string)sqlCommand.ExecuteScalar();

                            if (resultOfTableAvailabilityCheck != null && resultOfTableAvailabilityCheck.Length != 0)
                            {
                                streamWriter.WriteLine("--> The table [" + schemaName + "].[" + sheetname + "] already exists!");
                                StringBuilder clearExistingTableQuery = new StringBuilder();
                                clearExistingTableQuery.Append("IF(NOT EXISTS(SELECT * FROM sys.schemas WHERE name = '" + backUpSchemaName + "')) ");
                                clearExistingTableQuery.Append("BEGIN EXEC('CREATE SCHEMA [" + backUpSchemaName + "] AUTHORIZATION [" + userName + "]') END ");
                                clearExistingTableQuery.Append("SELECT * INTO [" + backUpSchemaName + "].[" + sheetname + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + "] FROM [" + schemaName + "].[" + sheetname + "]; ");
                                clearExistingTableQuery.Append("DROP TABLE [" + schemaName + "].[" + sheetname + "]; ");

                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForColumnNames = new OleDbCommand("select top 1 * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForColumnNames = new OleDbDataAdapter(oleDbCommandForColumnNames);
                                DataTable dataTableForColumnNames = new DataTable();
                                oleDbDataAdapterForColumnNames.Fill(dataTableForColumnNames);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder excelHeaderColumn = new StringBuilder();
                                int i;
                                for (i = 0; i < dataTableForColumnNames.Columns.Count - 1; i++)
                                    excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'" + ",");
                                excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'");

                                streamWriter.WriteLine("b) Actual columns in current excel sheet: " + excelHeaderColumn.ToString());

                                string queryToGetMatchingColumns = "SELECT STUFF((SELECT  ',['+Column_Name+']' FROM Information_schema.Columns WHERE Table_Name='" +
                                    sheetname + "' AND Table_SChema='" + schemaName + "'" +
                                    "AND Column_Name IN (" + @excelHeaderColumn.ToString() + ") for xml path('')),1,1,'') AS ColumnList";
                                sqlCommand.CommandText = queryToGetMatchingColumns;
                                string matchedColumnsList = (string)sqlCommand.ExecuteScalar();
                                streamWriter.WriteLine("c) Matching columns with the existing table: " + matchedColumnsList);

                                SqlCommand clearExistingTableCommand = new SqlCommand(clearExistingTableQuery.ToString(), sqlConnection);
                                clearExistingTableCommand.ExecuteNonQuery();
                                streamWriter.WriteLine("--> Existing table is copied to the schema - " + backUpSchemaName);
                                streamWriter.WriteLine("--> Existing table " + sheetname + ",  is dropped from the schema - " + schemaName);
                            }
                            else
                            {
                                streamWriter.WriteLine("a) The table doesn't exist in the schema - " + schemaName);
                            }
                            oleDbConnectionWithoutExcelDataType.Open();
                            OleDbCommand oleDbCommandForAllDataFromExcel = new OleDbCommand("select * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                            OleDbDataAdapter oleDbDataAdapterForAllDataFromExcel = new OleDbDataAdapter(oleDbCommandForAllDataFromExcel);
                            DataTable dataTableForAllDataFromExcel = new DataTable();
                            oleDbDataAdapterForAllDataFromExcel.Fill(dataTableForAllDataFromExcel);
                            oleDbConnectionWithoutExcelDataType.Close();

                            StringBuilder createNewTableQuery = new StringBuilder();
                            createNewTableQuery.Append("Create table [" + schemaName + "].[" + sheetname + "]");
                            createNewTableQuery.Append("(");
                            int k = 0;
                            for (k = 0; k < dataTableForAllDataFromExcel.Columns.Count - 1; k++)
                                createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max),");
                            createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max)");
                            createNewTableQuery.Append(");");

                            SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                            createNewTableCommand.ExecuteNonQuery();

                            streamWriter.WriteLine("--> A new table is created with all it's columns as nvarchar(max) - [" + schemaName + "].[" + sheetname + "]");

                            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                            {
                                sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[" + sheetname + "]";
                                sqlBulkCopy.WriteToServer(dataTableForAllDataFromExcel);
                            }
                            streamWriter.WriteLine("--> All the rows from the sheet - " + sheetname + ", are copied to the newly created table - [" + schemaName + "].[" + sheetname + "]");
                        }
                        streamWriter.WriteLine(); streamWriter.WriteLine();
                    }
                    streamWriter.WriteLine(); streamWriter.WriteLine();
                    File.Move(fileFullPath, archiveFolderPath + "\\" + (file.Name.Replace(sourceFolderPath, "")).Replace(fileExtension, "") + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + fileExtension);
                }
                if (streamWriter != null) streamWriter.Close();
                Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success;
            }

            catch (Exception exception)
            {
                errorLogFileName = Dts.Variables["User::ErrorLogFolderPath"].Value.ToString()
                    + "\\" + "ErrorLog_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".log";
                using (StreamWriter sw = File.CreateText(errorLogFileName))
                {
                    sw.WriteLine("Help link for this exception: " + exception.HelpLink);
                    sw.WriteLine("Primary exception: " + exception.InnerException);
                    sw.WriteLine("Exception Message: " + exception.Message);
                    sw.WriteLine("Error Source: " + exception.Source);
                    sw.WriteLine("Current method which throws exception: " + exception.TargetSite);
                    sw.WriteLine("Code trace at the error point: ");
                    sw.WriteLine(exception.StackTrace);
                    Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure;
                }
            }

            String SendMailFrom = Dts.Variables["EmailFrom"].Value.ToString();
            String SendMailFromPassword = Dts.Variables["EmailFromPassword"].Value.ToString();
            String SendMailTo = Dts.Variables["EmailTo"].Value.ToString();
            String[] SendMailToArray = SendMailTo.Split(',');
            try
            {
                MailMessage email = new MailMessage();
                email.From = new MailAddress(SendMailFrom);
                email.To.Add(SendMailToArray[0]);
                for (int i = 1; i < SendMailToArray.Length; i++)
                {
                    email.CC.Add(SendMailToArray[i]);
                }
                SmtpClient SmtpServer = new SmtpClient("smtp.gmail.com");
                SmtpServer.Port = 587;
                SmtpServer.Credentials = new System.Net.NetworkCredential(SendMailFrom, SendMailFromPassword);
                SmtpServer.EnableSsl = true;

                if (Dts.TaskResult == 0 && notEmptyFlag)
                {
                    //send email of success log - logFileName
                    email.Subject = "Success: package - " + Dts.Variables["System::PackageName"].Value.ToString();
                    email.Body = "Team, \n  The package - " + Dts.Variables["System::PackageName"].Value.ToString() + ", was successful. Attached is the log file about all the steps it has taken.\n\nCenter for Governmental Studies";
                    email.Attachments.Add(new System.Net.Mail.Attachment(logFileName));
                }
                else if (Dts.TaskResult == 1)
                {
                    //send email of failure log - errorLogFileName
                    email.Subject = "Failed: package - " + Dts.Variables["System::PackageName"].Value.ToString();
                    email.Body = "Team, \n  The package - " + Dts.Variables["System::PackageName"].Value.ToString() + ", has been failed. Attached is the error log file with the details of the error. Also, check the log file to find the point at which the error has triggered. \n\nCenter for Governmental Studies";
                    email.Attachments.Add(new System.Net.Mail.Attachment(errorLogFileName));
                }

                SmtpServer.Send(email);
            }
            catch (Exception)
            {
                //
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_7b826b4e4bcc43aabef520aa583ce374.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{9ed306ae-3293-42bc-aa2b-b96125176e53}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_7b826b4e4bcc43aabef520aa583ce374</RootNamespace>
    <AssemblyName>ST_7b826b4e4bcc43aabef520aa583ce374</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_7b826b4e4bcc43aabef520aa583ce374</msb:CodeName>
		<msb:DisplayName>ST_7b826b4e4bcc43aabef520aa583ce374</msb:DisplayName>
		<msb:ProjectId>{5B5C6542-A8FD-410F-B696-EA7EC9590C8C}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7b826b4e4bcc43aabef520aa583ce374.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Settings.get_Default():ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Sett" +
    "ings")]

namespace ST_7b826b4e4bcc43aabef520aa583ce374.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_7b826b4e4bcc43aabef520aa583ce374")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_7b826b4e4bcc43aabef520aa583ce374")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_7b826b4e4bcc43aabef520aa583ce374.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_7b826b4e4bcc43aabef520aa583ce374.dll">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
AAAKERdzNQAACnM2AAAKczcAAAoTIxEjbzgAAAomERdvIwAACnMzAAAKEyQWEyUrMBEkckkFAHAR
I285AAAKESVvOgAACm87AAAKck0FAHAoHgAACm80AAAKJhElF1gTJRElESNvOQAACm88AAAKF1ky
vhEkckkFAHARI285AAAKESVvOgAACm87AAAKckkFAHAoHgAACm80AAAKJhERclMFAHARJG8UAAAK
KCQAAApvJQAACh2NKgAAASUWcqkFAHCiJRcRGKIlGHJmBgBwoiUZEQeiJRpykAYAcKIlGxEkbxQA
AAqiJRxyvAYAcKIoGQAAChMmERwRJm8wAAAKERxvMQAACnQqAAABEycREXIQBwBwEScoJAAACm8l
AAAKESJvFAAAChEbcz0AAApvPgAACiYREXJsBwBwEQgoJAAACm8lAAAKERFyyAcAcBEYcvAHAHAR
Byg/AAAKbyUAAAorExERcjIIAHARBygkAAAKbyUAAAoRF28gAAAKcooIAHARGHJDBQBwKB4AAAoR
F3M1AAAKczYAAApzNwAAChMfER9vOAAACiYRF28jAAAKczMAAAoTIBEgG40qAAABJRZyqggAcKIl
FxEHoiUYcmEDAHCiJRkRGKIlGnLICABwoigZAAAKbzQAAAomESByzAgAcG80AAAKJhYTIRYTISsw
ESBy0AgAcBEfbzkAAAoRIW86AAAKbzsAAApy1AgAcCgeAAAKbzQAAAomESEXWBMhESERH285AAAK
bzwAAAoXWTK+ESBy0AgAcBEfbzkAAAoRIW86AAAKbzsAAApy9ggAcCgeAAAKbzQAAAomESByFgkA
cG80AAAKJhEgbxQAAAoRG3M9AAAKbz4AAAomEREbjSoAAAElFnIcCQBwoiUXEQeiJRhyYQMAcKIl
GREYoiUacsgIAHCiKBkAAApvJQAAChEbc0AAAAoTKBEoG40qAAABJRZy0AgAcKIlFxEHoiUYcmED
AHCiJRkRGKIlGnLICABwoigZAAAKb0EAAAoRKBEfb0IAAAreDBEoLAcRKG9DAAAK3BERHY0qAAAB
JRZyqQkAcKIlFxEYoiUYcu8JAHCiJRkRB6IlGnJhAwBwoiUbERiiJRxyyAgAcKIoGQAACm8lAAAK
ERFvRAAAChERb0QAAAoRGW9FAAAKOi36///eFREZdRoAAAETKREpLAcRKW9DAAAK3BERb0QAAAoR
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
fQABAAMAAAEQAHoILQiRAAMABwADAQAA5wgAAHUABAAKABEAngW+AREADwLDAREA9wDIAQYGawDM
AVaAywjPAVaA7wHPAVAgAAAAAIYAtQUGAAEAxCwAAAAAhhiKBwYAAQDMLAAAAACDGIoHBgABANQs
AAAAAJMIEwfTAQEAAC0AAAAAkwj3AdkBAQAHLQAAAACTCAMC3wEBAA8tAAAAAJYIOQnmAQIAFi0A
AAAAhhiKBwYAAgAeLQAAAACRGJAH6wECAAAAAQBOBAkAigcBABEAigcGABkAigcKACkAigcQADEA
igcQADkAigcQAEEAigcQAEkAigcQAFEAigcQAFkAigcQAGEAigcQAGkAigcGAPEAigcGABkBigcV
ACkBigcGAHEA3whkADEBYwhqADkBgAVwAEEBRAR3APkAcwR7AEkBigcQAEkBcQh/AIkA8QmFAIkA
cwSKAFEBDgmPAFkB5gmVAGEBhgF7AFEBkwibAFEB4ACgAFEBDgmmAJEAigcQAGkBqgUGAHEBXAit
AJEAKgGyAGkBeQIGAFEBDgm8AIEB4AEQALkABQnCAJEBfAfIAJkAjwl3AKEAgAXNAKkAigcGADEB
uwjSAJkBgAXYADEB7wV3AKEBcwbfAKkAuwDkAKkB1gkQAKkB9wZ3AFEBfATpAMEAigcGAMEA2QDt
ALEBigfzALkBigf6ALkAigcGAMEBbQUBAbkAnAgHAckBgAUNAdEBqAF7AJEBmwnpALEAigcUAakB
IwrpAFEBDgkbAckAigcjAckAjwEQAMkAYgcpAdEAfwIGAIEB4AEGAJkAwQkvAVkBVAQzAYEBeQIG
ADEBVAkBANkAhwR7ANkAkwY5AVEBDgk+AdkAEgF7ANkABwF7ANkAnAJEAdkA6AB7AFEBMwlKAeEA
igcGAOkBigcQAOEAkAVRAeEAuQZYAfEBmgAQAOEAOwBYAfkBigcQAPkBpQkBAAECigdeAfkBgwhk
AfkBcgVrATEBRQnpAOEAHAkQAOEAAQoQAOEA9QhwARkCigcQAAwAmgB/AfkB1ACFAXEAigcGAPkA
igcGACkCbwGLASkCCgqUAQEBigeaASEBigcGAAgAFAC0AQgAGAC5ASkAcwAoAi4ACwAAAi4AEwAJ
Ai4AGwAoAi4AIwAxAi4AKwBaAi4AMwBaAi4AOwBaAi4AQwAxAi4ASwBgAi4AUwBaAi4AWwB3AkMA
YwC5AUkAcwAoAmEAewC5AWMAawC5ARwAAwABAAQAAwAAABcH7wEAABcC9QEAAD0J+wECAAQAAwAC
AAUABQABAAYABQACAAcABwB2AQSAAAABAAAAiRqMigAAAAAAAA4AAAAEAAAAAAAAAAAAAACiAZEA
AAAAAAwAAAAAAAAAAAAAAKsBlAQAAAAABAAAAAAAAAAAAAAAogFzAAAAAAAEAAAAAAAAAAAAAACi
AYkFAAAAAAwAAAAAAAAAAAAAAKsBTAAAAAAAAAAAAAEAAADbBwAABQACAAAAAENvbGxlY3Rpb25g
MQBTVF83YjgyNmI0ZTRiY2M0M2FhYmVmNTIwYWE1ODNjZTM3NAA8TW9kdWxlPgBnZXRfQ0MAU3lz
dGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFN5c3RlbS5EYXRh
AFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAEFkZABPbGVEYlNjaGVtYUd1aWQAT2xlRGJDb21t
YW5kAENyZWF0ZUNvbW1hbmQAU3FsQ29tbWFuZABTZW5kAEFwcGVuZABSZXBsYWNlAGdldF9TdGFj
a1RyYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfU291cmNlAGdldF9NZXNzYWdlAE1haWxNZXNzYWdl
AEdldE9sZURiU2NoZW1hVGFibGUARGF0YVRhYmxlAFZhcmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRp
bWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZpbGUAZ2V0X05hbWUAc2V0X0Rlc3RpbmF0
aW9uVGFibGVOYW1lAGdldF9Db2x1bW5OYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlJ1bnRpbWUAV3JpdGVMaW5lAFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVy
ZQByZXNvdXJjZUN1bHR1cmUATWV0aG9kQmFzZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UA
SW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UA
RGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBnZXRfVGFyZ2V0U2l0ZQBDb21waWxlckdlbmVy
YXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRy
aWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNz
ZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5
Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBp
bGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2Vt
Ymx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBB
c3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0
X1ZhbHVlAHZhbHVlAE1vdmUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBnZXRf
TGVuZ3RoAGdldF9IZWxwTGluawBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9z
b2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBOZXR3b3JrQ3JlZGVudGlhbABTeXN0
ZW0uQ29sbGVjdGlvbnMuT2JqZWN0TW9kZWwAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBv
bmVudE1vZGVsAFN5c3RlbS5OZXQuTWFpbABTVF83YjgyNmI0ZTRiY2M0M2FhYmVmNTIwYWE1ODNj
ZTM3NC5kbGwARmlsbABzZXRfRW5hYmxlU3NsAGdldF9JdGVtAFN5c3RlbQBzZXRfRnJvbQBFbnVt
AHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBEYXRhQ29sdW1uAFN5c3RlbS5Db25maWd1cmF0
aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAGdldF9UcmFuc2FjdGlvbgBTeXN0ZW0uUmVmbGVjdGlv
bgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBNYWlsQWRkcmVzc0NvbGxlY3Rpb24AQXR0YWNobWVudENv
bGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AT2xlRGJDb25uZWN0aW9uAEFjcXVpcmVDb25uZWN0
aW9uAFNxbENvbm5lY3Rpb24AZ2V0X0lubmVyRXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBn
ZXRfVG8ARmlsZUluZm8AQ3VsdHVyZUluZm8ARmlsZVN5c3RlbUluZm8ARGlyZWN0b3J5SW5mbwBD
aGFyAEV4ZWN1dGVTY2FsYXIAU3RyaW5nQnVpbGRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5l
Y3Rpb25NYW5hZ2VyAFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVyAE9sZURiRGF0YUFkYXB0ZXIAV3Jp
dGVUb1NlcnZlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0u
RGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3Vy
Y2VzAFNUXzdiODI2YjRlNGJjYzQzYWFiZWY1MjBhYTU4M2NlMzc0LlByb3BlcnRpZXMuUmVzb3Vy
Y2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF83YjgyNmI0ZTRiY2M0M2FhYmVmNTIwYWE1
ODNjZTM3NC5Qcm9wZXJ0aWVzAFRhYmxlcwBnZXRfVmFyaWFibGVzAEdldEZpbGVzAFNldHRpbmdz
AHNldF9DcmVkZW50aWFscwBDb250YWlucwBnZXRfQ29sdW1ucwBTeXN0ZW0uQ29sbGVjdGlvbnMA
Z2V0X0Nvbm5lY3Rpb25zAFN1Y2Nlc3MATWFpbEFkZHJlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRz
AGdldF9BdHRhY2htZW50cwBnZXRfUm93cwBDb25jYXQAT2JqZWN0AHNldF9TdWJqZWN0AFN5c3Rl
bS5OZXQAU3BsaXQAZ2V0X0RlZmF1bHQAZ2V0X1Rhc2tSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAU3lz
dGVtLkRhdGEuU3FsQ2xpZW50AFNtdHBDbGllbnQAQXR0YWNobWVudABnZXRfQ3VycmVudABnZXRf
Q291bnQAc2V0X1BvcnQASUNyZWRlbnRpYWxzQnlIb3N0AE1vdmVOZXh0AFN5c3RlbS5UZXh0AHNl
dF9Db21tYW5kVGV4dABDcmVhdGVUZXh0AGdldF9Ob3cARGF0YVJvdwBzZXRfQm9keQBnZXRfQXNz
ZW1ibHkAU3FsQnVsa0NvcHkARXhlY3V0ZU5vblF1ZXJ5AAAAAQA7VQBzAGUAcgA6ADoAUgBlAHAA
bABhAGMAZQBTAG8AdQByAGMAZQBGAG8AbABkAGUAcgBQAGEAdABoAAAhVQBzAGUAcgA6ADoAUwBj
AGgAZQBtAGEATgBhAG0AZQAALVUAcwBlAHIAOgA6AEIAYQBjAGsAVQBwAFMAYwBoAGUAbQBhAE4A
YQBtAGUAACFTAHkAcwB0AGUAbQA6ADoAVQBzAGUAcgBOAGEAbQBlAAAvVQBzAGUAcgA6ADoAQQBy
AGMAaABpAHYAZQBGAG8AbABkAGUAcgBQAGEAdABoAAAnUwB5AHMAdABlAG0AOgA6AFAAYQBjAGsA
YQBnAGUATgBhAG0AZQAAJ1UAcwBlAHIAOgA6AEwAbwBnAEYAbwBsAGQAZQByAFAAYQB0AGgAAB15
AHkAeQB5AE0ATQBkAGQASABIAG0AbQBzAHMAAANcAAAFXwAkAAAJLgBsAG8AZwAACy4AeABsAHMA
eAAACS4AeABsAHMAAF1QAHIAbwB2AGkAZABlAHIAPQBNAGkAYwByAG8AcwBvAGYAdAAuAEEAQwBF
AC4ATwBMAEUARABCAC4AMQAyAC4AMAA7AEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AABhOwBFAHgA
dABlAG4AZABlAGQAIABQAHIAbwBwAGUAcgB0AGkAZQBzAD0AIgBFAHgAYwBlAGwAIAAxADIALgAw
ADsASABEAFIAPQBZAEUAUwA7AEkATQBFAFgAPQAxACIAACtUAGgAZQAgAGMAdQByAHIAZQBuAHQA
IABmAGkAbABlACAAaQBzADoAIAAAFVQAQQBCAEwARQBfAE4AQQBNAEUAAB9fAEYAaQBsAHQAZQBy
AEQAYQB0AGEAYgBhAHMAZQAAAyQAAC1UAGgAZQAgAGMAdQByAHIAZQBuAHQAIABzAGgAZQBlAHQA
IABpAHMAOgAgAAAfTwBMAEUARABCAEMAbwBuAG4AZQBjAHQAaQBvAG4AAHNTAEUATABFAEMAVAAg
ACoAIABGAFIATwBNACAAcwB5AHMALgBvAGIAagBlAGMAdABzACAAVwBIAEUAUgBFACAAbwBiAGoA
ZQBjAHQAXwBpAGQAIAA9ACAATwBCAEoARQBDAFQAXwBJAEQAKABOACcAWwABB10ALgBbAAAvXQAn
ACkAIAAgAEEATgBEACAAdAB5AHAAZQAgAGkAbgAgACgATgAnAFUAJwApAAEfLQAtAD4AIABUAGgA
ZQAgAHQAYQBiAGwAZQAgAFsAASNdACAAYQBsAHIAZQBhAGQAeQAgAGUAeABpAHMAdABzACEAAG1J
AEYAKABOAE8AVAAgAEUAWABJAFMAVABTACgAUwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAHMA
eQBzAC4AcwBjAGgAZQBtAGEAcwAgAFcASABFAFIARQAgAG4AYQBtAGUAIAA9ACAAJwABCScAKQAp
ACAAATdCAEUARwBJAE4AIABFAFgARQBDACgAJwBDAFIARQBBAFQARQAgAFMAQwBIAEUATQBBACAA
WwABI10AIABBAFUAVABIAE8AUgBJAFoAQQBUAEkATwBOACAAWwAAEV0AJwApACAARQBOAEQAIAAB
H1MARQBMAEUAQwBUACAAKgAgAEkATgBUAE8AIABbAAARXQAgAEYAUgBPAE0AIABbAAAHXQA7ACAA
ABlEAFIATwBQACAAVABBAEIATABFACAAWwAAK3MAZQBsAGUAYwB0ACAAdABvAHAAIAAxACAAKgAg
AGYAcgBvAG0AIABbAAAFJABdAAADJwABBScALAABVWIAKQAgAEEAYwB0AHUAYQBsACAAYwBvAGwA
dQBtAG4AcwAgAGkAbgAgAGMAdQByAHIAZQBuAHQAIABlAHgAYwBlAGwAIABzAGgAZQBlAHQAOgAg
AACAu1MARQBMAEUAQwBUACAAUwBUAFUARgBGACgAKABTAEUATABFAEMAVAAgACAAJwAsAFsAJwAr
AEMAbwBsAHUAbQBuAF8ATgBhAG0AZQArACcAXQAnACAARgBSAE8ATQAgAEkAbgBmAG8AcgBtAGEA
dABpAG8AbgBfAHMAYwBoAGUAbQBhAC4AQwBvAGwAdQBtAG4AcwAgAFcASABFAFIARQAgAFQAYQBi
AGwAZQBfAE4AYQBtAGUAPQAnAAEpJwAgAEEATgBEACAAVABhAGIAbABlAF8AUwBDAGgAZQBtAGEA
PQAnAAErJwBBAE4ARAAgAEMAbwBsAHUAbQBuAF8ATgBhAG0AZQAgAEkATgAgACgAAVMpACAAZgBv
AHIAIAB4AG0AbAAgAHAAYQB0AGgAKAAnACcAKQApACwAMQAsADEALAAnACcAKQAgAEEAUwAgAEMA
bwBsAHUAbQBuAEwAaQBzAHQAAVtjACkAIABNAGEAdABjAGgAaQBuAGcAIABjAG8AbAB1AG0AbgBz
ACAAdwBpAHQAaAAgAHQAaABlACAAZQB4AGkAcwB0AGkAbgBnACAAdABhAGIAbABlADoAIAAAWy0A
LQA+ACAARQB4AGkAcwB0AGkAbgBnACAAdABhAGIAbABlACAAaQBzACAAYwBvAHAAaQBlAGQAIAB0
AG8AIAB0AGgAZQAgAHMAYwBoAGUAbQBhACAALQAgAAEnLQAtAD4AIABFAHgAaQBzAHQAaQBuAGcA
IAB0AGEAYgBsAGUAIAABQSwAIAAgAGkAcwAgAGQAcgBvAHAAcABlAGQAIABmAHIAbwBtACAAdABo
AGUAIABzAGMAaABlAG0AYQAgAC0AIAABV2EAKQAgAFQAaABlACAAdABhAGIAbABlACAAZABvAGUA
cwBuACcAdAAgAGUAeABpAHMAdAAgAGkAbgAgAHQAaABlACAAcwBjAGgAZQBtAGEAIAAtACAAAR9z
AGUAbABlAGMAdAAgACoAIABmAHIAbwBtACAAWwAAHUMAcgBlAGEAdABlACAAdABhAGIAbABlACAA
WwAAA10AAAMoAAADWwAAIV0AIABuAHYAYQByAGMAaABhAHIAKABtAGEAeAApACwAAB9dACAAbgB2
AGEAcgBjAGgAYQByACgAbQBhAHgAKQAABSkAOwAAgIstAC0APgAgAEEAIABuAGUAdwAgAHQAYQBi
AGwAZQAgAGkAcwAgAGMAcgBlAGEAdABlAGQAIAB3AGkAdABoACAAYQBsAGwAIABpAHQAJwBzACAA
YwBvAGwAdQBtAG4AcwAgAGEAcwAgAG4AdgBhAHIAYwBoAGEAcgAoAG0AYQB4ACkAIAAtACAAWwAB
RS0ALQA+ACAAQQBsAGwAIAB0AGgAZQAgAHIAbwB3AHMAIABmAHIAbwBtACAAdABoAGUAIABzAGgA
ZQBlAHQAIAAtACAAAVcsACAAYQByAGUAIABjAG8AcABpAGUAZAAgAHQAbwAgAHQAaABlACAAbgBl
AHcAbAB5ACAAYwByAGUAYQB0AGUAZAAgAHQAYQBiAGwAZQAgAC0AIABbAAExVQBzAGUAcgA6ADoA
RQByAHIAbwByAEwAbwBnAEYAbwBsAGQAZQByAFAAYQB0AGgAABVcAEUAcgByAG8AcgBMAG8AZwBf
AAA9SABlAGwAcAAgAGwAaQBuAGsAIABmAG8AcgAgAHQAaABpAHMAIABlAHgAYwBlAHAAdABpAG8A
bgA6ACAAACdQAHIAaQBtAGEAcgB5ACAAZQB4AGMAZQBwAHQAaQBvAG4AOgAgAAAnRQB4AGMAZQBw
AHQAaQBvAG4AIABNAGUAcwBzAGEAZwBlADoAIAAAHUUAcgByAG8AcgAgAFMAbwB1AHIAYwBlADoA
IAAAT0MAdQByAHIAZQBuAHQAIABtAGUAdABoAG8AZAAgAHcAaABpAGMAaAAgAHQAaAByAG8AdwBz
ACAAZQB4AGMAZQBwAHQAaQBvAG4AOgAgAAA/QwBvAGQAZQAgAHQAcgBhAGMAZQAgAGEAdAAgAHQA
aABlACAAZQByAHIAbwByACAAcABvAGkAbgB0ADoAIAAAE0UAbQBhAGkAbABGAHIAbwBtAAAjRQBt
AGEAaQBsAEYAcgBvAG0AUABhAHMAcwB3AG8AcgBkAAAPRQBtAGEAaQBsAFQAbwAAHXMAbQB0AHAA
LgBnAG0AYQBpAGwALgBjAG8AbQAAJ1MAdQBjAGMAZQBzAHMAOgAgAHAAYQBjAGsAYQBnAGUAIAAt
ACAAAS9UAGUAYQBtACwAIAAKACAAIABUAGgAZQAgAHAAYQBjAGsAYQBnAGUAIAAtACAAAYDbLAAg
AHcAYQBzACAAcwB1AGMAYwBlAHMAcwBmAHUAbAAuACAAQQB0AHQAYQBjAGgAZQBkACAAaQBzACAA
dABoAGUAIABsAG8AZwAgAGYAaQBsAGUAIABhAGIAbwB1AHQAIABhAGwAbAAgAHQAaABlACAAcwB0
AGUAcABzACAAaQB0ACAAaABhAHMAIAB0AGEAawBlAG4ALgAKAAoAQwBlAG4AdABlAHIAIABmAG8A
cgAgAEcAbwB2AGUAcgBuAG0AZQBuAHQAYQBsACAAUwB0AHUAZABpAGUAcwAAJUYAYQBpAGwAZQBk
ADoAIABwAGEAYwBrAGEAZwBlACAALQAgAAGBfywAIABoAGEAcwAgAGIAZQBlAG4AIABmAGEAaQBs
AGUAZAAuACAAQQB0AHQAYQBjAGgAZQBkACAAaQBzACAAdABoAGUAIABlAHIAcgBvAHIAIABsAG8A
ZwAgAGYAaQBsAGUAIAB3AGkAdABoACAAdABoAGUAIABkAGUAdABhAGkAbABzACAAbwBmACAAdABo
AGUAIABlAHIAcgBvAHIALgAgAEEAbABzAG8ALAAgAGMAaABlAGMAawAgAHQAaABlACAAbABvAGcA
IABmAGkAbABlACAAdABvACAAZgBpAG4AZAAgAHQAaABlACAAcABvAGkAbgB0ACAAYQB0ACAAdwBo
AGkAYwBoACAAdABoAGUAIABlAHIAcgBvAHIAIABoAGEAcwAgAHQAcgBpAGcAZwBlAHIAZQBkAC4A
IAAKAAoAQwBlAG4AdABlAHIAIABmAG8AcgAgAEcAbwB2AGUAcgBuAG0AZQBuAHQAYQBsACAAUwB0
AHUAZABpAGUAcwAAcVMAVABfADcAYgA4ADIANgBiADQAZQA0AGIAYwBjADQAMwBhAGEAYgBlAGYA
NQAyADAAYQBhADUAOAAzAGMAZQAzADcANAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBv
AHUAcgBjAGUAcwAAAB+C4j80WjVFrfZeJs6MyjAABCABAQgDIAABBSABARERBCABAQ4GIAEBEYCJ
RwcuAg4ODg4dDg4ODg4ODg4dEj0ODg4SQQIRRR0SPQgSPRJJDhJNElESVRJZDg4SXRJhCBJhEl0S
YQgODhJlEmkSbRJBEnEIBSAAEoCZBSAAEoCdBiABEoChHAMgABwDIAAOBSAAHRI9BAAAEUUEIAEO
DgUAAQ4dDgUAARJBDgQgAQIOBSACDg4OBgADDg4ODgQGEYC9CSACEl0RgL0dHAUAAg4ODgUgABKA
xQQgABJNBCABHA4FIAASgM0GIAESgNEcBCABHBwEIAASWQMgAAgFIAESYQ4GIAIBDhJJBiABARKA
2QUgAQgSXQUgABKA5QYgARKA6QgGIAIBDhJVBwAEDg4ODg4FIAEBElUFIAEBEl0DIAACBQACAQ4O
BCAAEm0FAAIOHBwFIAASgO0GIAEdDh0DBiABARKA9QUgABKA+QUgAgEODgYgAQESgQUEIAEBAgUg
ABKBCQgVEoERARKBDQUgAQETAAUgAQEScQgAARKBFRGBGQUgABKBHQcgAgEOEoEdCLd6XFYZNOCJ
CImEXc2AgMyRBAAAAAAEAQAAAAQGEoCBBAYSgIUDBhIQAgYIAwYRFAUAABKAgQUAABKAhQYAAQES
gIUEAAASEAMAAAEFCAASgIEFCAASgIUECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2Vw
dGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfN2I4MjZiNGU0YmNjNDNhYWJlZjUyMGFhNTgzY2Uz
NzQAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOAAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lv
bj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0ALQAAADOyu++
AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNp
b249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRl
MDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFE
ULQAAACcUQAAAAAAAAAAAAC2UQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqFEAAAAAAAAAAAAA
AABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAA
AAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAAAAAA
AAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA
jIqJGgAAAQCMiokaPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBs
AGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEA
UwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgAB
AAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAA
AAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA3AGIAOAAy
ADYAYgA0AGUANABiAGMAYwA0ADMAYQBhAGIAZQBmADUAMgAwAGEAYQA1ADgAMwBjAGUAMwA3ADQA
AAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANgA3ADkAMwAuADMANQA0
ADYAOAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA3AGIAOAAyADYA
YgA0AGUANABiAGMAYwA0ADMAYQBhAGIAZQBmADUAMgAwAGEAYQA1ADgAMwBjAGUAMwA3ADQALgBk
AGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcA
aAB0ACAAQAAgACAAMgAwADEAOAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBz
AAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADcA
YgA4ADIANgBiADQAZQA0AGIAYwBjADQAMwBhAGEAYgBlAGYANQAyADAAYQBhADUAOAAzAGMAZQAz
ADcANAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA3AGIA
OAAyADYAYgA0AGUANABiAGMAYwA0ADMAYQBhAGIAZQBmADUAMgAwAGEAYQA1ADgAMwBjAGUAMwA3
ADQAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANwA5ADMA
LgAzADUANAA2ADgAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAx
AC4AMAAuADYANwA5ADMALgAzADUANAA2ADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAyDEAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="358,145" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/10/2018 1:37:16 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CGSUDAY"
  DTS:CreatorName="NIUNT\A1809750"
  DTS:DTSID="{A548331E-AD3B-4940-8500-A24D351296D5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3008.28"
  DTS:LocaleID="1033"
  DTS:ObjectName="ReplaceOrCreateTablesFromExcelSheet"
  DTS:PackageType="5"
  DTS:VersionBuild="18"
  DTS:VersionGUID="{2B0FBD3F-D65E-452E-AA62-209450261F15}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[60By25Development]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{D0EFC7AE-20C9-49A1-AC62-7CFFF36B610E}"
      DTS:ObjectName="60By25Development">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=131.156.33.147;User ID=sa;Initial Catalog=60by25Development;Application Name=SSIS-Package1-{D0EFC7AE-20C9-49A1-AC62-7CFFF36B610E}131.156.33.147.60by25Development.sa;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAACxZl1qynOEaJVjcZggMcOAAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAABJ/PY1BgqnuBxEjBd88RD4AAAAAASAAACgAAAAEAAAAPgpTBd2nI3h8I+MPjJVNTEgAAAAylumNXCcGiJlp0SMnlWlL5yaafa8fuBdTfSAMgAqDFUUAAAArrUFCqFW4xwKqS6ZLq9/zLK3CU4</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F24C92AB-45FD-49BC-9D8C-A2FC63465394}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\a1809750\Desktop\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0743432E-FDE4-4676-9DE4-914C5EFF2DC4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BackUpSchemaName">
      <DTS:VariableValue
        DTS:DataType="8">archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{04EE4A19-D911-4684-9524-4A66C7A67686}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorLogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\a1809750\Desktop\ErrorLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B8A45730-92B5-41BD-B997-44DB7560D972}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\a1809750\Desktop\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5E3BB2B3-5409-4C51-89DE-06F625357A19}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{96FDB670-704E-442A-A08D-FEEB9124CADA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\a1809750\Desktop\ReplaceTables</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7F08E2F9-B4A5-4EE0-8421-3181290F7BF1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SqlConnectionString">
      <DTS:VariableValue
        DTS:DataType="8">60By25Development</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{22367A18-73B2-4ACA-8E56-5F87009F327A}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_7b826b4e4bcc43aabef520aa583ce374"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ArchiveFolderPath,User::BackUpSchemaName,User::ErrorLogFolderPath,User::LogFolderPath,System::PackageName,User::SchemaName,User::SourceFolderPath,User::SqlConnectionString,System::UserName">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_7b826b4e4bcc43aabef520aa583ce374")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_7b826b4e4bcc43aabef520aa583ce374")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;
using System.Data.OleDb;
using System.Text;
#endregion

namespace ST_7b826b4e4bcc43aabef520aa583ce374
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                String sourceFolderPath = Dts.Variables["User::SourceFolderPath"].Value.ToString();
                String schemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                String backUpSchemaName = Dts.Variables["User::BackUpSchemaName"].Value.ToString();
                String userName = Dts.Variables["System::UserName"].Value.ToString();
                String archiveFolderPath = Dts.Variables["User::ArchiveFolderPath"].Value.ToString();
                String sqlConnectionString = Dts.Variables["User::SqlConnectionString"].Value.ToString();
                String packageName = Dts.Variables["System::PackageName"].Value.ToString();
                String logFolderPath = Dts.Variables["User::LogFolderPath"].Value.ToString();

                var directory = new DirectoryInfo(sourceFolderPath);
                FileInfo[] files = directory.GetFiles();
                string fileFullPath = "", fileExtension = "", filename = "";
                string logTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                StreamWriter streamWriter = File.CreateText(logFolderPath + "\\" + packageName + "_$" + logTime + ".log");

                streamWriter.WriteLine("The package - " + packageName + ", is working on the folder - " + directory.Name);
                foreach (FileInfo file in files)
                {
                    if (file.Name.Contains(".xlsx")) { filename = file.Name.Replace(".xlsx", ""); fileExtension = ".xlsx"; }
                    else if (file.Name.Contains(".xls")) { filename = file.Name.Replace(".xls", ""); fileExtension = ".xls"; }
                    else continue;

                    fileFullPath = sourceFolderPath + "\\" + file.Name;

                    string connectionStringWithoutExcelDataType = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
                    OleDbConnection oleDbConnectionWithoutExcelDataType = new OleDbConnection(connectionStringWithoutExcelDataType);

                    oleDbConnectionWithoutExcelDataType.Open();
                    DataTable dataTableWithEachSheetInfo = oleDbConnectionWithoutExcelDataType.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    oleDbConnectionWithoutExcelDataType.Close();

                    streamWriter.WriteLine("The current file is: " + file.Name);

                    string sheetname = "";
                    foreach (DataRow dataRowWithCurrentSheetInfo in dataTableWithEachSheetInfo.Rows)
                    {
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("_filteredDatabase")) continue;
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("$"))
                        {
                            sheetname = dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Replace("$", "");

                            streamWriter.WriteLine("The current sheet is: " + sheetname);

                            SqlConnection sqlConnection = new SqlConnection();
                            sqlConnection = (SqlConnection)(Dts.Connections[sqlConnectionString].AcquireConnection(Dts.Transaction) as SqlConnection);

                            SqlCommand sqlCommand = sqlConnection.CreateCommand();
                            string checkTableAvailabilityQuery = "SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[" + schemaName + "].[" + sheetname + "]')  AND type in (N'U')";
                            sqlCommand.CommandText = checkTableAvailabilityQuery;
                            string resultOfTableAvailabilityCheck = "";
                            resultOfTableAvailabilityCheck = (string)sqlCommand.ExecuteScalar();

                            if (resultOfTableAvailabilityCheck != null && resultOfTableAvailabilityCheck.Length != 0)
                            {
                                streamWriter.WriteLine("--> The table [" + schemaName + "].[" + sheetname + "] already exists!");
                                StringBuilder clearExistingTableQuery = new StringBuilder();
                                clearExistingTableQuery.Append("IF(NOT EXISTS(SELECT * FROM sys.schemas WHERE name = '" + backUpSchemaName + "')) ");
                                clearExistingTableQuery.Append("BEGIN EXEC('CREATE SCHEMA [" + backUpSchemaName + "] AUTHORIZATION [" + userName + "]') END ");
                                clearExistingTableQuery.Append("SELECT * INTO [" + backUpSchemaName + "].[" + sheetname + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + "] FROM [" + schemaName + "].[" + sheetname + "]; ");
                                clearExistingTableQuery.Append("DROP TABLE [" + schemaName + "].[" + sheetname + "]; ");

                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForColumnNames = new OleDbCommand("select top 1 * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForColumnNames = new OleDbDataAdapter(oleDbCommandForColumnNames);
                                DataTable dataTableForColumnNames = new DataTable();
                                oleDbDataAdapterForColumnNames.Fill(dataTableForColumnNames);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder excelHeaderColumn = new StringBuilder();
                                int i;
                                for (i = 0; i < dataTableForColumnNames.Columns.Count - 1; i++)
                                    excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'" + ",");
                                excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'");

                                streamWriter.WriteLine("b) Actual columns in current excel sheet: " + excelHeaderColumn.ToString());

                                string queryToGetMatchingColumns = "SELECT STUFF((SELECT  ',['+Column_Name+']' FROM Information_schema.Columns WHERE Table_Name='" +
                                    sheetname + "' AND Table_SChema='" + schemaName + "'" +
                                    "AND Column_Name IN (" + @excelHeaderColumn.ToString() + ") for xml path('')),1,1,'') AS ColumnList";
                                sqlCommand.CommandText = queryToGetMatchingColumns;
                                string matchedColumnsList = (string)sqlCommand.ExecuteScalar();
                                streamWriter.WriteLine("c) Matching columns with the existing table: " + matchedColumnsList);

                                SqlCommand clearExistingTableCommand = new SqlCommand(clearExistingTableQuery.ToString(), sqlConnection);
                                clearExistingTableCommand.ExecuteNonQuery();
                                streamWriter.WriteLine("--> Existing table is copied to the schema - " + backUpSchemaName);
                                streamWriter.WriteLine("--> Existing table " + sheetname + ",  is dropped from the schema - " + schemaName);
                            }
                            else
                            {
                                streamWriter.WriteLine("a) The table doesn't exist in the schema - " + schemaName);
                            }
                            oleDbConnectionWithoutExcelDataType.Open();
                            OleDbCommand oleDbCommandForAllDataFromExcel = new OleDbCommand("select * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                            OleDbDataAdapter oleDbDataAdapterForAllDataFromExcel = new OleDbDataAdapter(oleDbCommandForAllDataFromExcel);
                            DataTable dataTableForAllDataFromExcel = new DataTable();
                            oleDbDataAdapterForAllDataFromExcel.Fill(dataTableForAllDataFromExcel);
                            oleDbConnectionWithoutExcelDataType.Close();

                            StringBuilder createNewTableQuery = new StringBuilder();
                            createNewTableQuery.Append("Create table [" + schemaName + "].[" + sheetname + "]");
                            createNewTableQuery.Append("(");
                            int k = 0;
                            for (k = 0; k < dataTableForAllDataFromExcel.Columns.Count - 1; k++)
                                createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max),");
                            createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max)");
                            createNewTableQuery.Append(");");

                            SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                            createNewTableCommand.ExecuteNonQuery();

                            streamWriter.WriteLine("--> A new table is created with all it's columns as nvarchar(max) - [" + schemaName + "].[" + sheetname + "]");

                            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                            {
                                sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[" + sheetname + "]";
                                sqlBulkCopy.WriteToServer(dataTableForAllDataFromExcel);
                            }
                            streamWriter.WriteLine("--> All the rows from the sheet - " + sheetname + ", are copied to the newly created table - [" + schemaName + "].[" + sheetname + "]");
                        }
                        streamWriter.WriteLine(); streamWriter.WriteLine();
                    }
                    streamWriter.WriteLine(); streamWriter.WriteLine();
                    File.Move(fileFullPath, archiveFolderPath + "\\" + (file.Name.Replace(sourceFolderPath, "")).Replace(fileExtension, "") + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + fileExtension);
                }
                streamWriter.Close();
                Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success;
            }

            catch (Exception exception)
            {
                using (StreamWriter sw = File.CreateText(Dts.Variables["User::ErrorLogFolderPath"].Value.ToString()
                    + "\\" + "ErrorLog_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".log"))
                {
                    sw.WriteLine("Help link for this exception: " + exception.HelpLink);
                    sw.WriteLine("Primary exception: " + exception.InnerException);
                    sw.WriteLine("Exception Message: " + exception.Message);
                    sw.WriteLine("Error Source: " + exception.Source);
                    sw.WriteLine("Current method which throws exception: " + exception.TargetSite);
                    sw.WriteLine("Code trace at the error point: ");
                    sw.WriteLine(exception.StackTrace);
                    Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure;
                }
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_7b826b4e4bcc43aabef520aa583ce374.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{9ed306ae-3293-42bc-aa2b-b96125176e53}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_7b826b4e4bcc43aabef520aa583ce374</RootNamespace>
    <AssemblyName>ST_7b826b4e4bcc43aabef520aa583ce374</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_7b826b4e4bcc43aabef520aa583ce374</msb:CodeName>
		<msb:DisplayName>ST_7b826b4e4bcc43aabef520aa583ce374</msb:DisplayName>
		<msb:ProjectId>{5B5C6542-A8FD-410F-B696-EA7EC9590C8C}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7b826b4e4bcc43aabef520aa583ce374.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Settings.get_Default():ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Sett" +
    "ings")]

namespace ST_7b826b4e4bcc43aabef520aa583ce374.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_7b826b4e4bcc43aabef520aa583ce374.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_7b826b4e4bcc43aabef520aa583ce374.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAJ8DRVsAAAAAAAAAAOAAIiALATAAACwAAAAIAAAAAAAAikoA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAADhKAABPAAAAAGAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAkCoAAAAgAAAALAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAYAAAAAYAAAAuAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAANAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABs
SgAAAAAAAEgAAAACAAUAFCsAAGweAAABAAAAAAAAAIBJAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBwDrCQAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKAigQAAAKbxEAAApyLwAAcG8SAAAKbxMAAApvFAAACgsCKBAAAApvEQAACnJRAABw
bxIAAApvEwAACm8UAAAKDAIoEAAACm8RAAAKcn8AAHBvEgAACm8TAAAKbxQAAAoNAigQAAAKbxEA
AApyoQAAcG8SAAAKbxMAAApvFAAAChMEAigQAAAKbxEAAApy0QAAcG8SAAAKbxMAAApvFAAAChMF
AigQAAAKbxEAAApyBQEAcG8SAAAKbxMAAApvFAAAChMGAigQAAAKbxEAAApyLQEAcG8SAAAKbxMA
AApvFAAAChMHBnMVAAAKEwgRCG8WAAAKEwlyVQEAcBMKclUBAHATCygXAAAKEw4SDnJXAQBwKBgA
AAoTDByNKQAAASUWEQeiJRdydQEAcKIlGBEGoiUZcnkBAHCiJRoRDKIlG3J/AQBwoigZAAAKKBoA
AAoTDRENcokBAHARBnKnAQBwEQhvGwAACigcAAAKbx0AAAoRCRMPFhMQODMHAAARDxEQmhMRERFv
GwAACnLjAQBwbx4AAAosIBERbxsAAApy4wEAcHJVAQBwbx8AAAomcuMBAHATCys0ERFvGwAACnLv
AQBwbx4AAAo53QYAABERbxsAAApy7wEAcHJVAQBwbx8AAAomcu8BAHATCwZydQEAcBERbxsAAAoo
IAAAChMKcvkBAHARCnJXAgBwKCAAAApzIQAAChMSERJvIgAAChESfiMAAAoUbyQAAAoREm8lAAAK
EQ1yuQIAcBERbxsAAAooJgAACm8dAAAKclUBAHATE28nAAAKbygAAAoTFDi0BQAAERRvKQAACnQV
AAABExURFXLlAgBwbyoAAApvFAAACnL7AgBwbx4AAAo6hgUAABEVcuUCAHBvKgAACm8UAAAKch8D
AHBvHgAACjlYBQAAERVy5QIAcG8qAAAKbxQAAApyHwMAcHJVAQBwbx8AAAoTExENciMDAHAREygm
AAAKbx0AAApzKwAAChMWAigQAAAKbywAAAoRBW8tAAAKAigQAAAKby4AAApvLwAACnUWAAABExYR
Fm8wAAAKExcbjSkAAAElFnJRAwBwoiUXB6IlGHLFAwBwoiUZEROiJRpyzQMAcKIoGQAAChMYERcR
GG8xAAAKclUBAHATGREXbzIAAAp0KQAAARMZERk5qAIAABEZbzMAAAo5nAIAABENG40pAAABJRZy
/QMAcKIlFweiJRhyxQMAcKIlGREToiUach0EAHCiKBkAAApvHQAACnM0AAAKEx0RHXJBBABwCHKv
BABwKCAAAApvNQAACiYRHRuNKQAAASUWcrkEAHCiJRcIoiUYcvEEAHCiJRkJoiUachUFAHCiKBkA
AApvNQAACiYRHR8LjSkAAAElFnInBQBwoiUXCKIlGHLFAwBwoiUZEROiJRpyeQEAcKIlGygXAAAK
Ew4SDnJXAQBwKBgAAAqiJRxyRwUAcKIlHQeiJR5yxQMAcKIlHwkRE6IlHwpyWQUAcKIoGQAACm81
AAAKJhEdG40pAAABJRZyYQUAcKIlFweiJRhyxQMAcKIlGREToiUaclkFAHCiKBkAAApvNQAACiYR
Em8iAAAKcnsFAHARE3KnBQBwKCAAAAoREnM2AAAKczcAAApzOAAAChMeER5vOQAACiYREm8lAAAK
czQAAAoTHxYTICswER9yrQUAcBEebzoAAAoRIG87AAAKbzwAAApysQUAcCggAAAKbzUAAAomESAX
WBMgESARHm86AAAKbz0AAAoXWTK+ER9yrQUAcBEebzoAAAoRIG87AAAKbzwAAApyrQUAcCggAAAK
bzUAAAomEQ1ytwUAcBEfbxQAAAooJgAACm8dAAAKHY0pAAABJRZyDQYAcKIlFxEToiUYcsoGAHCi
JRkHoiUacvQGAHCiJRsRH28UAAAKoiUcciAHAHCiKBkAAAoTIREXESFvMQAAChEXbzIAAAp0KQAA
ARMiEQ1ydAcAcBEiKCYAAApvHQAAChEdbxQAAAoRFnM+AAAKbz8AAAomEQ1y0AcAcAgoJgAACm8d
AAAKEQ1yLAgAcBETclQIAHAHKBwAAApvHQAACisSEQ1ylggAcAcoJgAACm8dAAAKERJvIgAACnLu
CABwERNypwUAcCggAAAKERJzNgAACnM3AAAKczgAAAoTGhEabzkAAAomERJvJQAACnM0AAAKExsR
GxuNKQAAASUWcg4JAHCiJRcHoiUYcsUDAHCiJRkRE6IlGnIsCQBwoigZAAAKbzUAAAomERtyMAkA
cG81AAAKJhYTHBYTHCswERtyNAkAcBEabzoAAAoRHG87AAAKbzwAAApyOAkAcCggAAAKbzUAAAom
ERwXWBMcERwRGm86AAAKbz0AAAoXWTK+ERtyNAkAcBEabzoAAAoRHG87AAAKbzwAAApyWgkAcCgg
AAAKbzUAAAomERtyegkAcG81AAAKJhEbbxQAAAoRFnM+AAAKbz8AAAomEQ0bjSkAAAElFnKACQBw
oiUXB6IlGHLFAwBwoiUZEROiJRpyLAkAcKIoGQAACm8dAAAKERZzQAAAChMjESMbjSkAAAElFnI0
CQBwoiUXB6IlGHLFAwBwoiUZEROiJRpyLAkAcKIoGQAACm9BAAAKESMRGm9CAAAK3gwRIywHESNv
QwAACtwRDR2NKQAAASUWcg0KAHCiJRcRE6IlGHJTCgBwoiUZB6IlGnLFAwBwoiUbEROiJRxyLAkA
cKIoGQAACm8dAAAKEQ1vRAAAChENb0QAAAoRFG9FAAAKOkD6///eFREUdRsAAAETJBEkLAcRJG9D
AAAK3BENb0QAAAoRDW9EAAAKEQocjSkAAAElFhEEoiUXcnUBAHCiJRgREW8bAAAKBnJVAQBwbx8A
AAoRC3JVAQBwbx8AAAqiJRlyeQEAcKIlGigXAAAKEw4SDnJXAQBwKBgAAAqiJRsRC6IoGQAACihG
AAAKERAXWBMQERARD45pP8L4//8RDW9HAAAKAigQAAAKFm9IAAAK3fgAAAATJQIoEAAACm8RAAAK
cqsKAHBvEgAACm8TAAAKbxQAAApy3QoAcCgXAAAKEw4SDnJXAQBwKBgAAApyfwEAcCgcAAAKKBoA
AAoTJhEmcvMKAHARJW9JAAAKKCYAAApvHQAAChEmcjELAHARJW9KAAAKKEsAAApvHQAAChEmclkL
AHARJW9MAAAKKCYAAApvHQAAChEmcoELAHARJW9NAAAKKCYAAApvHQAAChEmcp8LAHARJW9OAAAK
KEsAAApvHQAAChEmcu8LAHBvHQAAChEmESVvTwAACm8dAAAKAigQAAAKF29IAAAK3gwRJiwHESZv
QwAACtzeACoAQWQAAAIAAACdBwAAPgAAANsHAAAMAAAAAAAAAAIAAAB8AgAAxwUAAEMIAAAVAAAA
AAAAAAIAAAA8CQAAoAAAANwJAAAMAAAAAAAAAAAAAAAAAAAA8ggAAPIIAAD4AAAAHAAAAR4CKFAA
AAoqHgIoUQAACiqufgEAAAQtHnIvDABw0AMAAAIoUgAACm9TAAAKc1QAAAqAAQAABH4BAAAEKhp+
AgAABCoeAoACAAAEKhp+AwAABCoeAihVAAAKKi5zCAAABoADAAAEKgAAQlNKQgEAAQAAAAAADAAA
AHY0LjAuMzAzMTkAAAAABQBsAAAA7AUAACN+AABYBgAA6AgAACNTdHJpbmdzAAAAAEAPAACkDAAA
I1VTAOQbAAAQAAAAI0dVSUQAAAD0GwAAeAIAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6ATMA
FgAAAQAAAD0AAAAFAAAABgAAAAkAAAABAAAAVQAAAAIAAAAQAAAAAQAAAAIAAAADAAAABAAAAAEA
AAAFAAAAAQAAAAEAAAAAANsEAQAAAAAABgBuA/IGBgD9A/IGBgC6At8GDwBmBwAABgDnAn4FBgBR
A34FBgAyA34FBgDkA34FBgCOA34FBgCnA34FBgD+An4FBgAZAzAECgDCA4oECgABAooEBgAxBi4A
BgANBi4ABgCBBi4ABgCOAREFDgC3BWsABgC4BuAHDgC3CF8ADgDZBVMIDgCxAFMIDgAVAV8ABgBN
BogIDgDMCFMIBgAoAREFBgDwBREFBgAYBREFBgCdAt8GBgAxCBEFBgBfBhIHBgAWBlkFEgBeAsUE
EgDOAsUEEgA4AkQFBgCCAvIGCgCzBIoEFgCvB5cBFgAfAZcBBgBMBBEFBgBYAS4ABgAiBi4ABgCO
Bi4ADgC6BfoFDgCGAGsABgCRABEFDgClBV8ADgAdAl8AFgD3B5cBFgBvBpcBDgCZAPoFDgCWAGsA
DgCZBmsADgCcBvoFDgCQBV8ADgA5BV8ABgD2AX4FBgDBAREFBgA0AREFBgDDCH4FAAAAACUAAAAA
AAEAAQABABAALgUBADkAAQABAAAAEAAZB3UHfQABAAMAAAEQAMIHdQeRAAMABwADAQAAEwgAAHUA
BAAKABEAHQV1AREA5gF6AREA2gB/AQYGVwCDAVaAAwiGAVaAxgGGAVAgAAAAAIYANAUGAAEArCoA
AAAAhhjSBgYAAQC0KgAAAACDGNIGBgABALwqAAAAAJMIWwaKAQEA6CoAAAAAkwjOAZABAQDvKgAA
AACTCNoBlgEBAPcqAAAAAJYIOAidAQIA/ioAAAAAhhjSBgYAAgAGKwAAAACRGNgGogECAAAAAQAl
BAkA0gYBABEA0gYGABkA0gYKACkA0gYQADEA0gYQADkA0gYQAEEA0gYQAEkA0gYQAFEA0gYQAFkA
0gYQAGEA0gYQAGkA0gYGAPEA0gYGABkB0gYVACkB0gYGAHEACwhcADEBqwdiADkBCAVoAEEBGwRv
APkASgRzAHkA0gYQAHkAuQd3AJEArwh9AJEASgSCAEkBKgiHAFEBpAiNAFkBXQFzAEkBKgiTAGEB
twEQAEkBywebAEkBwwCgAEkBKgimAJkA0gYQAGkBKQUGAHEBpAetAJkAAQGyAGkBUAIGAEkBKgi8
AMEAIQjCAIkBxAbIAKEAaQhvAKkACAXNALEA0gYGADEB8wfSAJEBCAXYADEBbgVvAJkBxwXfALEA
owDkAKEBlAgQAKEBPwZvAEkBUwTpAMkA0gYGAMkAvADtAKkB0gbzALEB0gb6AMEA0gYGALkBAwUB
AcEA1AcHAcEBCAUNAckBfwFzAIkBdQjpALkA0gYUAaEB2AjpANEA0gYbAdEAZgEQANEAqgYhAdkA
VgIGAGEBtwEGAKEAfwgnAVEBKwQrAWEBUAIGADEBRAgBAOEAXgRzAOEA5wUxAUkBKgg2AeEA9QBz
AOEA6gBzAOEAcwI8AeEAywBzAHEA0gYGAPkA0gYGANkBRgFCAdkBvwhLAQEB0gZRASEB0gYGAAgA
FABrAQgAGABwASkAcwDfAS4ACwC3AS4AEwDAAS4AGwDfAS4AIwDoAS4AKwARAi4AMwARAi4AOwAR
Ai4AQwDoAS4ASwAXAi4AUwARAi4AWwAuAkMAYwBwAUkAcwDfAWEAewBwAWMAawBwARwAAwABAAQA
AwAAAF8GpgEAAO4BrAEAADwIsgECAAQAAwACAAUABQABAAYABQACAAcABwAEgAAAAQAAAG0aJ2MA
AAAAAAABAAAABAAAAAAAAAAAAAAAWQF9AAAAAAAMAAAAAAAAAAAAAABiAWsEAAAAAAQAAAAAAAAA
AAAAAFkBXwAAAAAABAAAAAAAAAAAAAAAWQERBQAAAAAMAAAAAAAAAAAAAABiATgAAAAAAAAAAAAB
AAAAIwcAAAUAAgAAAABTVF83YjgyNmI0ZTRiY2M0M2FhYmVmNTIwYWE1ODNjZTM3NAA8TW9kdWxl
PgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVt
LkRhdGEAU3lzdGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIAT2xlRGJTY2hlbWFHdWlkAE9sZURiQ29t
bWFuZABDcmVhdGVDb21tYW5kAFNxbENvbW1hbmQAQXBwZW5kAFJlcGxhY2UAZ2V0X1N0YWNrVHJh
Y2UAZGVmYXVsdEluc3RhbmNlAGdldF9Tb3VyY2UAZ2V0X01lc3NhZ2UAR2V0T2xlRGJTY2hlbWFU
YWJsZQBEYXRhVGFibGUAVmFyaWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0
VHlwZUZyb21IYW5kbGUARmlsZQBnZXRfTmFtZQBzZXRfRGVzdGluYXRpb25UYWJsZU5hbWUAZ2V0
X0NvbHVtbk5hbWUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBXcml0
ZUxpbmUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVy
ZQBNZXRob2RCYXNlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERhdGFDb2xs
ZWN0aW9uQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3NlAEVkaXRvckJy
b3dzYWJsZVN0YXRlAGdldF9UYXJnZXRTaXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERl
YnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93
c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0
dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0
cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9u
c0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRy
aWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0
dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAdmFsdWUATW92
ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAGdldF9MZW5ndGgAZ2V0X0hlbHBM
aW5rAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0
cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2Rl
bABTVF83YjgyNmI0ZTRiY2M0M2FhYmVmNTIwYWE1ODNjZTM3NC5kbGwARmlsbABnZXRfSXRlbQBT
eXN0ZW0ARW51bQByZXNvdXJjZU1hbgBPcGVuAFNjcmlwdE1haW4ARGF0YUNvbHVtbgBTeXN0ZW0u
Q29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRfVHJhbnNhY3Rpb24AU3lzdGVt
LlJlZmxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AT2xlRGJD
b25uZWN0aW9uAEFjcXVpcmVDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24AZ2V0X0lubmVyRXhjZXB0
aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBGaWxlSW5mbwBDdWx0dXJlSW5mbwBGaWxlU3lzdGVtSW5m
bwBEaXJlY3RvcnlJbmZvAEV4ZWN1dGVTY2FsYXIAU3RyaW5nQnVpbGRlcgBnZXRfUmVzb3VyY2VN
YW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2VyAFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVyAE9sZURiRGF0
YUFkYXB0ZXIAV3JpdGVUb1NlcnZlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5j
Y3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBT
eXN0ZW0uUmVzb3VyY2VzAFNUXzdiODI2YjRlNGJjYzQzYWFiZWY1MjBhYTU4M2NlMzc0LlByb3Bl
cnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF83YjgyNmI0ZTRiY2M0
M2FhYmVmNTIwYWE1ODNjZTM3NC5Qcm9wZXJ0aWVzAFRhYmxlcwBnZXRfVmFyaWFibGVzAEdldEZp
bGVzAFNldHRpbmdzAENvbnRhaW5zAGdldF9Db2x1bW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRf
Q29ubmVjdGlvbnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X1Jvd3MAQ29uY2F0
AE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQA
Z2V0X0N1cnJlbnQAZ2V0X0NvdW50AE1vdmVOZXh0AFN5c3RlbS5UZXh0AHNldF9Db21tYW5kVGV4
dABDcmVhdGVUZXh0AGdldF9Ob3cARGF0YVJvdwBnZXRfQXNzZW1ibHkAU3FsQnVsa0NvcHkARXhl
Y3V0ZU5vblF1ZXJ5AAAtVQBzAGUAcgA6ADoAUwBvAHUAcgBjAGUARgBvAGwAZABlAHIAUABhAHQA
aAAAIVUAcwBlAHIAOgA6AFMAYwBoAGUAbQBhAE4AYQBtAGUAAC1VAHMAZQByADoAOgBCAGEAYwBr
AFUAcABTAGMAaABlAG0AYQBOAGEAbQBlAAAhUwB5AHMAdABlAG0AOgA6AFUAcwBlAHIATgBhAG0A
ZQAAL1UAcwBlAHIAOgA6AEEAcgBjAGgAaQB2AGUARgBvAGwAZABlAHIAUABhAHQAaAAAM1UAcwBl
AHIAOgA6AFMAcQBsAEMAbwBuAG4AZQBjAHQAaQBvAG4AUwB0AHIAaQBuAGcAACdTAHkAcwB0AGUA
bQA6ADoAUABhAGMAawBhAGcAZQBOAGEAbQBlAAAnVQBzAGUAcgA6ADoATABvAGcARgBvAGwAZABl
AHIAUABhAHQAaAAAAQAdeQB5AHkAeQBNAE0AZABkAEgASABtAG0AcwBzAAADXAAABV8AJAAACS4A
bABvAGcAAB1UAGgAZQAgAHAAYQBjAGsAYQBnAGUAIAAtACAAATssACAAaQBzACAAdwBvAHIAawBp
AG4AZwAgAG8AbgAgAHQAaABlACAAZgBvAGwAZABlAHIAIAAtACAAAQsuAHgAbABzAHgAAAkuAHgA
bABzAABdUAByAG8AdgBpAGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAuAE8ATABF
AEQAQgAuADEAMgAuADAAOwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAAYTsARQB4AHQAZQBuAGQA
ZQBkACAAUAByAG8AcABlAHIAdABpAGUAcwA9ACIARQB4AGMAZQBsACAAMQAyAC4AMAA7AEgARABS
AD0AWQBFAFMAOwBJAE0ARQBYAD0AMQAiAAArVABoAGUAIABjAHUAcgByAGUAbgB0ACAAZgBpAGwA
ZQAgAGkAcwA6ACAAABVUAEEAQgBMAEUAXwBOAEEATQBFAAAjXwBmAGkAbAB0AGUAcgBlAGQARABh
AHQAYQBiAGEAcwBlAAADJAAALVQAaABlACAAYwB1AHIAcgBlAG4AdAAgAHMAaABlAGUAdAAgAGkA
cwA6ACAAAHNTAEUATABFAEMAVAAgACoAIABGAFIATwBNACAAcwB5AHMALgBvAGIAagBlAGMAdABz
ACAAVwBIAEUAUgBFACAAbwBiAGoAZQBjAHQAXwBpAGQAIAA9ACAATwBCAEoARQBDAFQAXwBJAEQA
KABOACcAWwABB10ALgBbAAAvXQAnACkAIAAgAEEATgBEACAAdAB5AHAAZQAgAGkAbgAgACgATgAn
AFUAJwApAAEfLQAtAD4AIABUAGgAZQAgAHQAYQBiAGwAZQAgAFsAASNdACAAYQBsAHIAZQBhAGQA
eQAgAGUAeABpAHMAdABzACEAAG1JAEYAKABOAE8AVAAgAEUAWABJAFMAVABTACgAUwBFAEwARQBD
AFQAIAAqACAARgBSAE8ATQAgAHMAeQBzAC4AcwBjAGgAZQBtAGEAcwAgAFcASABFAFIARQAgAG4A
YQBtAGUAIAA9ACAAJwABCScAKQApACAAATdCAEUARwBJAE4AIABFAFgARQBDACgAJwBDAFIARQBB
AFQARQAgAFMAQwBIAEUATQBBACAAWwABI10AIABBAFUAVABIAE8AUgBJAFoAQQBUAEkATwBOACAA
WwAAEV0AJwApACAARQBOAEQAIAABH1MARQBMAEUAQwBUACAAKgAgAEkATgBUAE8AIABbAAARXQAg
AEYAUgBPAE0AIABbAAAHXQA7ACAAABlEAFIATwBQACAAVABBAEIATABFACAAWwAAK3MAZQBsAGUA
YwB0ACAAdABvAHAAIAAxACAAKgAgAGYAcgBvAG0AIABbAAAFJABdAAADJwABBScALAABVWIAKQAg
AEEAYwB0AHUAYQBsACAAYwBvAGwAdQBtAG4AcwAgAGkAbgAgAGMAdQByAHIAZQBuAHQAIABlAHgA
YwBlAGwAIABzAGgAZQBlAHQAOgAgAACAu1MARQBMAEUAQwBUACAAUwBUAFUARgBGACgAKABTAEUA
TABFAEMAVAAgACAAJwAsAFsAJwArAEMAbwBsAHUAbQBuAF8ATgBhAG0AZQArACcAXQAnACAARgBS
AE8ATQAgAEkAbgBmAG8AcgBtAGEAdABpAG8AbgBfAHMAYwBoAGUAbQBhAC4AQwBvAGwAdQBtAG4A
cwAgAFcASABFAFIARQAgAFQAYQBiAGwAZQBfAE4AYQBtAGUAPQAnAAEpJwAgAEEATgBEACAAVABh
AGIAbABlAF8AUwBDAGgAZQBtAGEAPQAnAAErJwBBAE4ARAAgAEMAbwBsAHUAbQBuAF8ATgBhAG0A
ZQAgAEkATgAgACgAAVMpACAAZgBvAHIAIAB4AG0AbAAgAHAAYQB0AGgAKAAnACcAKQApACwAMQAs
ADEALAAnACcAKQAgAEEAUwAgAEMAbwBsAHUAbQBuAEwAaQBzAHQAAVtjACkAIABNAGEAdABjAGgA
aQBuAGcAIABjAG8AbAB1AG0AbgBzACAAdwBpAHQAaAAgAHQAaABlACAAZQB4AGkAcwB0AGkAbgBn
ACAAdABhAGIAbABlADoAIAAAWy0ALQA+ACAARQB4AGkAcwB0AGkAbgBnACAAdABhAGIAbABlACAA
aQBzACAAYwBvAHAAaQBlAGQAIAB0AG8AIAB0AGgAZQAgAHMAYwBoAGUAbQBhACAALQAgAAEnLQAt
AD4AIABFAHgAaQBzAHQAaQBuAGcAIAB0AGEAYgBsAGUAIAABQSwAIAAgAGkAcwAgAGQAcgBvAHAA
cABlAGQAIABmAHIAbwBtACAAdABoAGUAIABzAGMAaABlAG0AYQAgAC0AIAABV2EAKQAgAFQAaABl
ACAAdABhAGIAbABlACAAZABvAGUAcwBuACcAdAAgAGUAeABpAHMAdAAgAGkAbgAgAHQAaABlACAA
cwBjAGgAZQBtAGEAIAAtACAAAR9zAGUAbABlAGMAdAAgACoAIABmAHIAbwBtACAAWwAAHUMAcgBl
AGEAdABlACAAdABhAGIAbABlACAAWwAAA10AAAMoAAADWwAAIV0AIABuAHYAYQByAGMAaABhAHIA
KABtAGEAeAApACwAAB9dACAAbgB2AGEAcgBjAGgAYQByACgAbQBhAHgAKQAABSkAOwAAgIstAC0A
PgAgAEEAIABuAGUAdwAgAHQAYQBiAGwAZQAgAGkAcwAgAGMAcgBlAGEAdABlAGQAIAB3AGkAdABo
ACAAYQBsAGwAIABpAHQAJwBzACAAYwBvAGwAdQBtAG4AcwAgAGEAcwAgAG4AdgBhAHIAYwBoAGEA
cgAoAG0AYQB4ACkAIAAtACAAWwABRS0ALQA+ACAAQQBsAGwAIAB0AGgAZQAgAHIAbwB3AHMAIABm
AHIAbwBtACAAdABoAGUAIABzAGgAZQBlAHQAIAAtACAAAVcsACAAYQByAGUAIABjAG8AcABpAGUA
ZAAgAHQAbwAgAHQAaABlACAAbgBlAHcAbAB5ACAAYwByAGUAYQB0AGUAZAAgAHQAYQBiAGwAZQAg
AC0AIABbAAExVQBzAGUAcgA6ADoARQByAHIAbwByAEwAbwBnAEYAbwBsAGQAZQByAFAAYQB0AGgA
ABVcAEUAcgByAG8AcgBMAG8AZwBfAAA9SABlAGwAcAAgAGwAaQBuAGsAIABmAG8AcgAgAHQAaABp
AHMAIABlAHgAYwBlAHAAdABpAG8AbgA6ACAAACdQAHIAaQBtAGEAcgB5ACAAZQB4AGMAZQBwAHQA
aQBvAG4AOgAgAAAnRQB4AGMAZQBwAHQAaQBvAG4AIABNAGUAcwBzAGEAZwBlADoAIAAAHUUAcgBy
AG8AcgAgAFMAbwB1AHIAYwBlADoAIAAAT0MAdQByAHIAZQBuAHQAIABtAGUAdABoAG8AZAAgAHcA
aABpAGMAaAAgAHQAaAByAG8AdwBzACAAZQB4AGMAZQBwAHQAaQBvAG4AOgAgAAA/QwBvAGQAZQAg
AHQAcgBhAGMAZQAgAGEAdAAgAHQAaABlACAAZQByAHIAbwByACAAcABvAGkAbgB0ADoAIAAAcVMA
VABfADcAYgA4ADIANgBiADQAZQA0AGIAYwBjADQAMwBhAGEAYgBlAGYANQAyADAAYQBhADUAOAAz
AGMAZQAzADcANAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAA
eFZCtA6NZ0yuBhM02Q7CGAAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQERgIk/BycODg4ODg4ODhI9
HRJBDg4OEkURSR0SQQgSQRJNDhJRElUSWRJdDg4SYRJlCBJlEmESZQgODhJpEm0ScRJFBSAAEoCZ
BSAAEoCdBiABEoChHAMgABwDIAAOBSAAHRJBBAAAEUkEIAEODgUAAQ4dDgUAARJFDgcABA4ODg4O
BCABAg4FIAIODg4GAAMODg4OBAYRgL0JIAISYRGAvR0cBQACDg4OBSAAEoDBBCAAElEEIAEcDgUg
ABKAyQYgARKAzRwEIAEcHAQgABJdAyAACAUgARJlDgYgAgEOEk0GIAEBEoDVBSABCBJhBSAAEoDh
BiABEoDlCAYgAgEOElkFIAEBElkFIAEBEmEDIAACBQACAQ4OBCAAEnEFAAIOHBwFIAASgOkIAAES
gO0RgPEFIAASgPUHIAIBDhKA9Qi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAAEBhKAgQQGEoCF
AwYSEAIGCAMGERQFAAASgIEFAAASgIUGAAEBEoCFBAAAEhADAAABBQgAEoCBBQgAEoCFBAgAEhAI
AQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzdi
ODI2YjRlNGJjYzQzYWFiZWY1MjBhYTU4M2NlMzc0AAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIw
MTgAAEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5h
bWUQLk5FVCBGcmFtZXdvcmsgNAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJl
c291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWws
IFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1l
UmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAGBKAAAAAAAAAAAAAHpKAAAAIAAAAAAA
AAAAAAAAAAAAAAAAAAAAAABsSgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAA
AAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAA
gAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAA
AAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAA
AAEAJ2NtGgAAAQAnY20aPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYA
aQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMA
AAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAA
GgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAA
AAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA3AGIA
OAAyADYAYgA0AGUANABiAGMAYwA0ADMAYQBhAGIAZQBmADUAMgAwAGEAYQA1ADgAMwBjAGUAMwA3
ADQAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANgA3ADYANQAuADIA
NQAzADgAMwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA3AGIAOAAy
ADYAYgA0AGUANABiAGMAYwA0ADMAYQBhAGIAZQBmADUAMgAwAGEAYQA1ADgAMwBjAGUAMwA3ADQA
LgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgACAAMgAwADEAOAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIA
awBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABf
ADcAYgA4ADIANgBiADQAZQA0AGIAYwBjADQAMwBhAGEAYgBlAGYANQAyADAAYQBhADUAOAAzAGMA
ZQAzADcANAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA3
AGIAOAAyADYAYgA0AGUANABiAGMAYwA0ADMAYQBhAGIAZQBmADUAMgAwAGEAYQA1ADgAMwBjAGUA
MwA3ADQAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANwA2
ADUALgAyADUAMwA4ADMAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADYANwA2ADUALgAyADUAMwA4ADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAjDoAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="358,145" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
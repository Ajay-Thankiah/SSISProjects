<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/6/2018 3:36:38 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="AJAY"
  DTS:CreatorName="AJAY\Ajay"
  DTS:DTSID="{108D47DE-F4E4-47F9-BA81-03F1CD1F0093}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3002.106"
  DTS:LocaleID="16393"
  DTS:ObjectName="CreateTablesFromReportCardAssessment"
  DTS:PackageType="5"
  DTS:VersionBuild="8"
  DTS:VersionGUID="{8F6DC34D-B84B-48E7-B7C3-5BD4CEBA3E3E}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[60By25Development]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{474EEEC6-6E40-4468-A693-F0BF1DBA2A0E}"
      DTS:ObjectName="60By25Development">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=131.156.33.147;User ID=Census;Initial Catalog=60by25Development;Application Name=SSIS-Package1-{474EEEC6-6E40-4468-A693-F0BF1DBA2A0E}131.156.33.147.60by25Development.Census;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAlt5GeNGP60eViP7tOYSANgAAAAAIAAAARABUAFMAAAAQZgAAAAEAACAAAAC+vqXU4HbQGQfAbLDXAJoPcPK/9lozXAqg9eWTMgcgzwAAAAAOgAAAAAIAACAAAACTDDZl1bLTcQW7zQbN54YYun1ARIxvJdp36Ulz0JRfKSAAAABM27LutlfGdxcLetPiluOO/X42dEAt9eNxNwfnVyapeEAAAACU7VvpmMJ2Vy8y6b0vyNb6rgLb16yG+eD3WN/2S5oFlUROfZy/prVODNFWIpH1C9m+9WEoIVh6EcUSRXFLTg1q</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CC67673B-B0D6-4FB9-9FF0-384EE5C63A70}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorLogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\ErrorLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{429BAF43-73CD-4F0E-93D0-BB04D2CAEAEA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F6E2D251-6069-4F13-B2D4-2498ACB3EDD8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4BC7BBBA-5893-461C-8BB6-7910E3C4DB69}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\DummyFolderForSSIS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D3D389E1-9451-47DA-8A19-592C1BC94F23}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SqlConnectionString">
      <DTS:VariableValue
        DTS:DataType="8">60By25Development</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{71250FED-D7BC-4ADE-9520-5D50386F74A4}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_a13a8c0f860646d3a7f7284b05f01794"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ErrorLogFolderPath,User::LogFolderPath,System::PackageName,User::SchemaName,User::SourceFolderPath,User::SqlConnectionString">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ST_a13a8c0f860646d3a7f7284b05f01794.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{2621f78e-5da4-4b6d-b791-a111b1a82385}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_a13a8c0f860646d3a7f7284b05f01794</RootNamespace>
    <AssemblyName>ST_a13a8c0f860646d3a7f7284b05f01794</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Text;
#endregion

namespace ST_a13a8c0f860646d3a7f7284b05f01794
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                String sourceFolderPath = Dts.Variables["User::SourceFolderPath"].Value.ToString();
                String schemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                String sqlConnectionString = Dts.Variables["User::SqlConnectionString"].Value.ToString();
                String packageName = Dts.Variables["System::PackageName"].Value.ToString();
                String logFolderPath = Dts.Variables["User::LogFolderPath"].Value.ToString();

                var directory = new DirectoryInfo(sourceFolderPath);
                FileInfo[] files = directory.GetFiles();
                string fileFullPath = "", fileExtension = "", filename = "";
                string logTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                using (StreamWriter streamWriter = File.CreateText(logFolderPath + "\\" + packageName + "_$" + logTime + ".log"))
                {
                    streamWriter.WriteLine("The package - " + packageName + ", is working on the folder - " + directory.Name);
                    foreach (FileInfo file in files)
                    {
                        if (file.Name.Contains(".xlsx")) { filename = file.Name.Replace(".xlsx", ""); fileExtension = ".xlsx"; }
                        else if (file.Name.Contains(".xls")) { filename = file.Name.Replace(".xls", ""); fileExtension = ".xls"; }
                        else continue;

                        fileFullPath = sourceFolderPath + "\\" + file.Name;

                        string connectionStringWithoutExcelDataType = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
                        OleDbConnection oleDbConnectionWithoutExcelDataType = new OleDbConnection(connectionStringWithoutExcelDataType);

                        oleDbConnectionWithoutExcelDataType.Open();
                        DataTable dataTableWithEachSheetInfo = oleDbConnectionWithoutExcelDataType.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                        oleDbConnectionWithoutExcelDataType.Close();

                        streamWriter.WriteLine("The current file is: " + file.Name);

                        string sheetname = "";
                        foreach (DataRow dataRowWithCurrentSheetInfo in dataTableWithEachSheetInfo.Rows)
                        {
                            if (!dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("Assessment") || dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("_filteredDatabase")) continue;
                            if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("$"))
                            {
                                sheetname = dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Replace("$", "");

                                streamWriter.WriteLine("The current sheet is: " + sheetname);

                                //establish connection to excel
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForDistinctSubgroup = new OleDbCommand("select variable_number , subgroup from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForDistinctSubgroup = new OleDbDataAdapter(oleDbCommandForDistinctSubgroup);
                                DataTable dataTableForDistinctSubgroup = new DataTable();
                                oleDbDataAdapterForDistinctSubgroup.Fill(dataTableForDistinctSubgroup);
                                oleDbConnectionWithoutExcelDataType.Close();

                                streamWriter.WriteLine("The sub groups are: " );//*****************************

                                //create subgroup table and populate distinct subgroup data
                                if (!TableAvailability("Subgroup")) CreateTable("Subgroup");
                                StringBuilder insertIntoTable = new StringBuilder();
                                int k = 0;
                                for (k = 0; k < dataTableForDistinctSubgroup.Rows.Count - 1; k++)
                                {
                                    insertIntoTable.Append("insert into [" + schemaName + "].[" + sheetname + "] (ID, name) values (" + k + ", " + dataTableForDistinctSubgroup.Rows[k] + ");");
                                }
                                streamWriter.WriteLine("After Insert ");//*****************************
                                SqlConnection sqlConnection = (SqlConnection)(Dts.Connections[Dts.Variables["User::SqlConnectionString"].Value.ToString()].AcquireConnection(Dts.Transaction) as SqlConnection);
                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[Subgroup]";
                                    sqlBulkCopy.WriteToServer(dataTableForDistinctSubgroup);
                                }
                                streamWriter.WriteLine("After bulk ");//*****************************
                                //using (sqlConnection)
                                //{
                                //    string createNewTableQuery = "select distinct name from Subgroup;";
                                //    SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                                //    SqlDataReader datareader = createNewTableCommand.ExecuteReader();// .ExecuteNonQuery();
                                //    string createNewTableQuery1 = "delete from Subgroup;";
                                //    streamWriter.WriteLine("After delete ");//*****************************
                                //    SqlCommand createNewTableCommand1 = new SqlCommand(createNewTableQuery1.ToString(), sqlConnection);
                                //    createNewTableCommand1.ExecuteNonQuery();
                                //    using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                //    {
                                //        sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[Subgroup]";
                                //        sqlBulkCopy.WriteToServer(datareader);
                                //    }
                                //    streamWriter.WriteLine("After last bulk ");//*****************************
                                //}


                                streamWriter.WriteLine("--> All the rows from the sheet - " + sheetname + ", are copied to the table - [" + schemaName + "].[" + sheetname + "]");

                                //using (SqlConnection sqlConnection = (SqlConnection)(Dts.Connections[Dts.Variables["User::SqlConnectionString"].Value.ToString()].AcquireConnection(Dts.Transaction) as SqlConnection))
                                //{
                                //    SqlCommand insertIntoTableCommand = new SqlCommand(insertIntoTable.ToString(), sqlConnection);
                                //    insertIntoTableCommand.ExecuteNonQuery();
                                //}
                            }
                        }
                    }
                }
                Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success;
            }

            catch (Exception exception)
            {
                using (StreamWriter sw = File.CreateText(Dts.Variables["User::ErrorLogFolderPath"].Value.ToString()
                    + "\\" + "ErrorLog_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".log"))
                {
                    sw.WriteLine("Help link for this exception: " + exception.HelpLink);
                    sw.WriteLine("Primary exception: " + exception.InnerException);
                    sw.WriteLine("Exception Message: " + exception.Message);
                    sw.WriteLine("Error Source: " + exception.Source);
                    sw.WriteLine("Current method which throws exception: " + exception.TargetSite);
                    sw.WriteLine("Code trace at the error point: ");
                    sw.WriteLine(exception.StackTrace);
                    Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure;
                }
            }
        }

        public Boolean TableAvailability(string tableName)
        {
            using (SqlConnection sqlConnection = (SqlConnection)(Dts.Connections[Dts.Variables["User::SqlConnectionString"].Value.ToString()].AcquireConnection(Dts.Transaction) as SqlConnection))
            {
                SqlCommand sqlCommand = sqlConnection.CreateCommand();
                string checkTableAvailabilityQuery = "SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[" + Dts.Variables["User::SchemaName"].Value.ToString() + "].[" + tableName + "]')  AND type in (N'U')";
                sqlCommand.CommandText = checkTableAvailabilityQuery;
                string resultOfTableAvailabilityCheck = "";
                resultOfTableAvailabilityCheck = (string)sqlCommand.ExecuteScalar();
                if (resultOfTableAvailabilityCheck != null && resultOfTableAvailabilityCheck.Length != 0) return true;
                else return false;
            }
        }

        public Boolean CreateTable(string tableName)
        {
            using (SqlConnection sqlConnection = (SqlConnection)(Dts.Connections[Dts.Variables["User::SqlConnectionString"].Value.ToString()].AcquireConnection(Dts.Transaction) as SqlConnection))
            {
                string createNewTableQuery = "create table [" + Dts.Variables["User::SchemaName"].Value.ToString() + "].[" + tableName + "] ( ID nvarchar(max), name nvarchar(max) );";
                SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                createNewTableCommand.ExecuteNonQuery();
                return true;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_a13a8c0f860646d3a7f7284b05f01794</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_a13a8c0f860646d3a7f7284b05f01794</msb:DisplayName>
		<msb:ProjectId>{169E9A9D-E628-4614-AA5D-F4B57DD20D79}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_a13a8c0f860646d3a7f7284b05f01794.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a13a8c0f860646d3a7f7284b05f01794.Properties.Settings.get_Default():ST_a13a8c0f860646d3a7f7284b05f01794.Properties.Sett" +
    "ings")]

namespace ST_a13a8c0f860646d3a7f7284b05f01794.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_a13a8c0f860646d3a7f7284b05f01794")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_a13a8c0f860646d3a7f7284b05f01794")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a13a8c0f860646d3a7f7284b05f01794.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a13a8c0f860646d3a7f7284b05f01794.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a13a8c0f860646d3a7f7284b05f01794.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_a13a8c0f860646d3a7f7284b05f01794.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_a13a8c0f860646d3a7f7284b05f01794.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_a13a8c0f860646d3a7f7284b05f01794.dll">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
AAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAPQFAAAjfgAAYAYAANgIAAAjU3RyaW5ncwAAAAA4
DwAAwAcAACNVUwD4FgAAEAAAACNHVUlEAAAACBcAAGwCAAAjQmxvYgAAAAAAAAACAAABVx2iAQkD
AAAA+gEzABYAAAEAAAA8AAAABQAAAAYAAAALAAAAAwAAAFAAAAACAAAAEAAAAAMAAAACAAAAAwAA
AAQAAAABAAAABQAAAAEAAAABAAAAAADjBAEAAAAAAAYAewPaBgYACgTaBgYAxwLHBg8ATgcAAAYA
9AJ7BQYAXgN7BQYAPwN7BQYA8QN7BQYAmwN7BQYAtAN7BQYACwN7BQYAJgM4BAoAzwOSBAoADgKS
BAYAGQY0AAYA9QU0AAYAmwEZBQYAaQY0AA4AnwVxAAYAoAa8Bw4AkwhlAA4AGwFlAAYANQZkCA4A
qAgvCAYAOgEZBQYA2AUZBQ4AwQUvCA4AtwAvCAYAIAUZBQYAqgLHBgYADQgZBQYARwb6BgYA/gVW
BRIAawLNBBIA2wLNBBIARQJBBQYAjwLaBgoAuwSSBBYAlwekARYAMQGkAQYAVAQZBQYAagE0AAYA
CgY0AAYAdgY0AA4AogXiBQ4AjABxAAYAlwAZBQ4AjQVlAA4AKgJlAA4AnABxAA4AgQZxAA4AhAbi
BQYAAQAZBRYA0wekARYAVwakAQYAAwJ7BQ4AnwDiBQYAzgEZBQYARgEZBQYAnwh7BQAAAAArAAAA
AAABAAEAAQAQADYFBwA5AAEAAQAAABAAAQddB30AAQAFAAABEACqB10HkQADAAkAAwEAAO8HAAB1
AAQADAARACUFagERAPMBbwERAOAAdAEGBl0AeAFWgN8HewFWgNMBewFQIAAAAACGADwFBgABAIQm
AAAAAIYAxAiHAAEAdCcAAAAAhgAlAYcAAgBAKAAAAACGGLoGBgADAEgoAAAAAIMYugYGAAMAUCgA
AAAAkwhDBn8BAwB8KAAAAACTCNsBhQEDAIMoAAAAAJMI5wGLAQMAiygAAAAAlggUCJIBBACSKAAA
AACGGLoGBgAEAJooAAAAAJEYwAaXAQQAAAABAJEBAAABAJEBAAABADIECQC6BgEAEQC6BgYAGQC6
BgoAKQC6BhAAMQC6BhAAOQC6BhAAQQC6BhAASQC6BhAAUQC6BhAAWQC6BhAAYQC6BhAAaQC6BgYA
8QC6BgYAGQG6BhUAKQG6BgYAcQDnB0gAMQGTB04AOQEQBVQAQQEoBFsA+QBSBF8AeQC6BhAAeQCh
B2MAiQCLCGkAiQBSBG4ASQEGCHMAUQGACHkAWQFvAV8ASQEGCH8AYQHEARAASQGzB4cASQHJAIwA
SQEGCJIAmQC6BhAAaQExBQYAcQGMB5kAmQAHAZ4AaQFdAgYASQEGCKgAsQD9B64AiQGsBrQAoQBF
CFsAqQAQBbkAkQG6Br4AmQG6BsUAsQC6BgYAoQELBcwAuQC6BgYAgQEQBdIASQEGCNgAuQDCAN4A
iQFRCOQAMQHPB+gAsQEQBe4AMQFrBVsAuQGvBfUAwQC6BvoAwQB4ARAAwQCSBgAByQBjAgYAoQBb
CAYBMQEgCAEA0QBmBF8A0QDPBQoBSQEGCA8B0QD7AF8A0QDwAF8A0QCAAhUB0QDRAF8A2QCpACUB
yQFwCBAAyQEnBlsASQFbBOQA4QC6BjAByQG0COQAcQC6BgYA+QC6BgYA0QFYATcB0QGbCEABAQG6
BkYBIQG6BgYACAAUAGABCAAYAGUBKQBzANQBLgALAKwBLgATALUBLgAbANQBLgAjAN0BLgArAAYC
LgAzAAYCLgA7AAYCLgBDAN0BLgBLAAwCLgBTAAYCLgBbACMCQwBjAGUBSQBzANQBYQB7AGUBYwBr
AGUBHAAbASoBAwABAAQAAwAAAEcGmwEAAPsBoQEAABgIpwECAAYAAwACAAcABQABAAgABQACAAkA
BwAEgAAAAQAAAGkaujsAAAAAAAAHAAAABAAAAAAAAAAAAAAATgGDAAAAAAAMAAAAAAAAAAAAAABX
AXMEAAAAAAQAAAAAAAAAAAAAAE4BZQAAAAAABAAAAAAAAAAAAAAATgEZBQAAAAAMAAAAAAAAAAAA
AABXAT4AAAAAAAAAAAABAAAACwcAAAUAAgAAAABJbnQzMgBTVF9hMTNhOGMwZjg2MDY0NmQzYTdm
NzI4NGIwNWYwMTc5NAA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5h
Z2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAU3lzdGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIAT2xl
RGJTY2hlbWFHdWlkAE9sZURiQ29tbWFuZABDcmVhdGVDb21tYW5kAFNxbENvbW1hbmQAQXBwZW5k
AFJlcGxhY2UAZ2V0X1N0YWNrVHJhY2UAZGVmYXVsdEluc3RhbmNlAGdldF9Tb3VyY2UAZ2V0X01l
c3NhZ2UAR2V0T2xlRGJTY2hlbWFUYWJsZQBEYXRhVGFibGUAQ3JlYXRlVGFibGUAVmFyaWFibGUA
SURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARmlsZQBnZXRf
TmFtZQBzZXRfRGVzdGluYXRpb25UYWJsZU5hbWUAdGFibGVOYW1lAERhdGVUaW1lAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAV3JpdGVMaW5lAFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVy
ZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUATWV0aG9kQmFzZQBWU1RBUlRTY3JpcHRPYmpl
Y3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5n
c0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBnZXRfVGFyZ2V0U2l0ZQBD
b21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERl
YnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVB
dHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0
cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0
cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2lu
dEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlB
dHRyaWJ1dGUAZ2V0X1ZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJp
bmcAZ2V0X0xlbmd0aABnZXRfSGVscExpbmsATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNr
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9k
ZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUX2ExM2E4YzBmODYwNjQ2ZDNhN2Y3Mjg0YjA1ZjAx
Nzk0LmRsbABGaWxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0
TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRfVHJhbnNh
Y3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AT2xlRGJDb25uZWN0aW9u
AEFjcXVpcmVDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24AZ2V0X0lubmVyRXhjZXB0aW9uAFN5c3Rl
bS5EYXRhLkNvbW1vbgBGaWxlSW5mbwBDdWx0dXJlSW5mbwBGaWxlU3lzdGVtSW5mbwBEaXJlY3Rv
cnlJbmZvAEV4ZWN1dGVTY2FsYXIAU3RyaW5nQnVpbGRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENv
bm5lY3Rpb25NYW5hZ2VyAFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVyAE9sZURiRGF0YUFkYXB0ZXIA
V3JpdGVUb1NlcnZlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0
ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVz
b3VyY2VzAFNUX2ExM2E4YzBmODYwNjQ2ZDNhN2Y3Mjg0YjA1ZjAxNzk0LlByb3BlcnRpZXMuUmVz
b3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9hMTNhOGMwZjg2MDY0NmQzYTdmNzI4
NGIwNWYwMTc5NC5Qcm9wZXJ0aWVzAFRhYmxlcwBnZXRfVmFyaWFibGVzAEdldEZpbGVzAFNldHRp
bmdzAENvbnRhaW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMAU3VjY2VzcwBn
ZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVjdABnZXRfRGVmYXVsdABz
ZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50
AE1vdmVOZXh0AFN5c3RlbS5UZXh0AHNldF9Db21tYW5kVGV4dABDcmVhdGVUZXh0AGdldF9Ob3cA
RGF0YVJvdwBnZXRfQXNzZW1ibHkAU3FsQnVsa0NvcHkARXhlY3V0ZU5vblF1ZXJ5AFRhYmxlQXZh
aWxhYmlsaXR5AAAAAC1VAHMAZQByADoAOgBTAG8AdQByAGMAZQBGAG8AbABkAGUAcgBQAGEAdABo
AAAhVQBzAGUAcgA6ADoAUwBjAGgAZQBtAGEATgBhAG0AZQAAM1UAcwBlAHIAOgA6AFMAcQBsAEMA
bwBuAG4AZQBjAHQAaQBvAG4AUwB0AHIAaQBuAGcAACdTAHkAcwB0AGUAbQA6ADoAUABhAGMAawBh
AGcAZQBOAGEAbQBlAAAnVQBzAGUAcgA6ADoATABvAGcARgBvAGwAZABlAHIAUABhAHQAaAAAAQAd
eQB5AHkAeQBNAE0AZABkAEgASABtAG0AcwBzAAADXAAABV8AJAAACS4AbABvAGcAAB1UAGgAZQAg
AHAAYQBjAGsAYQBnAGUAIAAtACAAATssACAAaQBzACAAdwBvAHIAawBpAG4AZwAgAG8AbgAgAHQA
aABlACAAZgBvAGwAZABlAHIAIAAtACAAAQsuAHgAbABzAHgAAAkuAHgAbABzAABdUAByAG8AdgBp
AGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAuAE8ATABFAEQAQgAuADEAMgAuADAA
OwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAAYTsARQB4AHQAZQBuAGQAZQBkACAAUAByAG8AcABl
AHIAdABpAGUAcwA9ACIARQB4AGMAZQBsACAAMQAyAC4AMAA7AEgARABSAD0AWQBFAFMAOwBJAE0A
RQBYAD0AMQAiAAArVABoAGUAIABjAHUAcgByAGUAbgB0ACAAZgBpAGwAZQAgAGkAcwA6ACAAABVU
AEEAQgBMAEUAXwBOAEEATQBFAAAVQQBzAHMAZQBzAHMAbQBlAG4AdAAAI18AZgBpAGwAdABlAHIA
ZQBkAEQAYQB0AGEAYgBhAHMAZQAAAyQAAC1UAGgAZQAgAGMAdQByAHIAZQBuAHQAIABzAGgAZQBl
AHQAIABpAHMAOgAgAABRcwBlAGwAZQBjAHQAIAB2AGEAcgBpAGEAYgBsAGUAXwBuAHUAbQBiAGUA
cgAgACwAIABzAHUAYgBnAHIAbwB1AHAAIABmAHIAbwBtACAAWwAABSQAXQAAKVQAaABlACAAcwB1
AGIAIABnAHIAbwB1AHAAcwAgAGEAcgBlADoAIAAAEVMAdQBiAGcAcgBvAHUAcAAAG2kAbgBzAGUA
cgB0ACAAaQBuAHQAbwAgAFsAAAddAC4AWwAAK10AIAAoAEkARAAsACAAbgBhAG0AZQApACAAdgBh
AGwAdQBlAHMAIAAoAAAFLAAgAAAFKQA7AAAbQQBmAHQAZQByACAASQBuAHMAZQByAHQAIAAAA1sA
ABldAC4AWwBTAHUAYgBnAHIAbwB1AHAAXQAAF0EAZgB0AGUAcgAgAGIAdQBsAGsAIAAARS0ALQA+
ACAAQQBsAGwAIAB0AGgAZQAgAHIAbwB3AHMAIABmAHIAbwBtACAAdABoAGUAIABzAGgAZQBlAHQA
IAAtACAAATssACAAYQByAGUAIABjAG8AcABpAGUAZAAgAHQAbwAgAHQAaABlACAAdABhAGIAbABl
ACAALQAgAFsAAQNdAAAxVQBzAGUAcgA6ADoARQByAHIAbwByAEwAbwBnAEYAbwBsAGQAZQByAFAA
YQB0AGgAABVcAEUAcgByAG8AcgBMAG8AZwBfAAA9SABlAGwAcAAgAGwAaQBuAGsAIABmAG8AcgAg
AHQAaABpAHMAIABlAHgAYwBlAHAAdABpAG8AbgA6ACAAACdQAHIAaQBtAGEAcgB5ACAAZQB4AGMA
ZQBwAHQAaQBvAG4AOgAgAAAnRQB4AGMAZQBwAHQAaQBvAG4AIABNAGUAcwBzAGEAZwBlADoAIAAA
HUUAcgByAG8AcgAgAFMAbwB1AHIAYwBlADoAIAAAT0MAdQByAHIAZQBuAHQAIABtAGUAdABoAG8A
ZAAgAHcAaABpAGMAaAAgAHQAaAByAG8AdwBzACAAZQB4AGMAZQBwAHQAaQBvAG4AOgAgAAA/QwBv
AGQAZQAgAHQAcgBhAGMAZQAgAGEAdAAgAHQAaABlACAAZQByAHIAbwByACAAcABvAGkAbgB0ADoA
IAAAc1MARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABzAHkAcwAuAG8AYgBqAGUAYwB0AHMAIABX
AEgARQBSAEUAIABvAGIAagBlAGMAdABfAGkAZAAgAD0AIABPAEIASgBFAEMAVABfAEkARAAoAE4A
JwBbAAEvXQAnACkAIAAgAEEATgBEACAAdAB5AHAAZQAgAGkAbgAgACgATgAnAFUAJwApAAEdYwBy
AGUAYQB0AGUAIAB0AGEAYgBsAGUAIABbAABXXQAgACgAIABJAEQAIABuAHYAYQByAGMAaABhAHIA
KABtAGEAeAApACwAIABuAGEAbQBlACAAbgB2AGEAcgBjAGgAYQByACgAbQBhAHgAKQAgACkAOwAA
cVMAVABfAGEAMQAzAGEAOABjADAAZgA4ADYAMAA2ADQANgBkADMAYQA3AGYANwAyADgANABiADAA
NQBmADAAMQA3ADkANAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAA
APSwioEng0lGtmJHkEy3OSMABCABAQgDIAABBSABARERBCABAQ4GIAEBEYCJKwcYDg4ODhI9HRJB
Dg4RRRJJHRJBCBJBEk0OElESVRJZEl0IEmESZRJpEkkFIAASgJkFIAASgJ0GIAESgKEcAyAAHAMg
AA4FIAAdEkEEAAARRQQgAQ4OBQABDh0OBQABEkkOBwAEDg4ODg4EIAECDgUgAg4ODgYAAw4ODg4E
BhGAvQkgAhJZEYC9HRwFAAIODg4FIAASgMEEIAASUQQgARwOBiACAQ4STQYgAQESgMkFIAEIElkF
IAESVQgFAAEOHRwFIAESXQ4DIAAIBSAAEoDZBiABEoDdHAQgARwcBSABARJtBSABARJZAyAAAgQg
ABJpBQACDhwcBSAAEoDhCQcFEm0ScQ4OAgQgABJxBQcCEm0CBiACAQ4SbQgAARKA6RGA7QUgABKA
8QcgAgEOEoDxCLd6XFYZNOCJCImEXc2AgMyRBAAAAAAEAQAAAAQGEoCBBAYSgIUDBhIQAgYIAwYR
FAUAABKAgQUAABKAhQYAAQESgIUEAAASEAMAAAEFCAASgIEFCAASgIUECAASEAgBAAgAAAAAAB4B
AAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfYTEzYThjMGY4NjA2
NDZkM2E3ZjcyODRiMDVmMDE3OTQAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOAAARwEAGi5O
RVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZy
YW1ld29yayA0ALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRl
ciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlU
b2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0
AgAAAAAAAAAAAAAAUEFEUEFEULQAAAD8QgAAAAAAAAAAAAAWQwAAACAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAACEMAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAA
ABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA
GgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4A
AAEAAAABALo7aRoAAAEAujtpGj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEA
cgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACw
BHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIA
MAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBt
AGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8A
YQAxADMAYQA4AGMAMABmADgANgAwADYANAA2AGQAMwBhADcAZgA3ADIAOAA0AGIAMAA1AGYAMAAx
ADcAOQA0AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADYANwA2ADEA
LgAxADUAMgA5ADAAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYQAx
ADMAYQA4AGMAMABmADgANgAwADYANAA2AGQAMwBhADcAZgA3ADIAOAA0AGIAMAA1AGYAMAAxADcA
OQA0AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5
AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADgAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0A
YQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AFQAXwBhADEAMwBhADgAYwAwAGYAOAA2ADAANgA0ADYAZAAzAGEANwBmADcAMgA4ADQAYgAwADUA
ZgAwADEANwA5ADQALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBU
AF8AYQAxADMAYQA4AGMAMABmADgANgAwADYANAA2AGQAMwBhADcAZgA3ADIAOAA0AGIAMAA1AGYA
MAAxADcAOQA0AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2
ADcANgAxAC4AMQA1ADIAOQAwAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkA
bwBuAAAAMQAuADAALgA2ADcANgAxAC4AMQA1ADIAOQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAACgzAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="293,80" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
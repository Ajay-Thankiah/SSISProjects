<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/9/2018 6:41:05 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CGSUDAY"
  DTS:CreatorName="NIUNT\A1809750"
  DTS:DTSID="{4E7EF504-9B85-4A7E-A4DD-16FC5EB77683}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3008.28"
  DTS:LocaleID="1033"
  DTS:ObjectName="AppendOrCreateTablesFromExcelSheets"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="45"
  DTS:VersionGUID="{5AB75B79-EC6E-4AD1-A931-4868BF0E0F17}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLEDBConnection]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}"
      DTS:ObjectName="OLEDBConnection">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">"Data Source="+@[User::ServerName]+";User ID="+@[User::LoginName]+";Password="+@[User::LoginPassword]+";Initial Catalog="+@[User::DatabaseName]+";Application Name=SSIS-AppendToTablesFromExcelSheets-{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}"+@[User::ServerName]+"."+@[User::DatabaseName]+"."+@[User::LoginName]+";"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=131.156.33.147;User ID=sa;Initial Catalog=60by25Development;Application Name=SSIS-AppendToTablesFromExcelSheets-{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}131.156.33.147.60by25Development.sa;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{590065CF-75F6-4485-AA96-C32907BBFB45}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::AppendSourceFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="AppendSourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\DummyFolderForSSIS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{23B3E977-1B8F-4FDA-8218-79D8778DC041}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ArchiveFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B7931060-0320-408B-AF2C-825991991582}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::BackUpSchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BackUpSchemaName">
      <DTS:VariableValue
        DTS:DataType="8">archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{78A766D6-7FAE-407B-A82D-FA926ACF18BE}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::DatabaseName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DatabaseName">
      <DTS:VariableValue
        DTS:DataType="8">60by25Development</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{569A53D5-3900-43F5-BD24-BA5ACE97306C}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailFrom]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailFrom">
      <DTS:VariableValue
        DTS:DataType="8">cgs.niu@gmail.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{19FF3B48-013D-445A-ACB1-E088B868A4CC}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailFromPassword]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailFromPassword">
      <DTS:VariableValue
        DTS:DataType="8">CgsNiu@1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9F663405-E54E-413C-98C7-72DDF53C807C}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailTo]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailTo">
      <DTS:VariableValue
        DTS:DataType="8">asaraswathyperumal1@niu.edu</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4286D702-5DD4-462B-891D-64D8D3126B81}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ErrorLogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorLogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\ErrorLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2711411C-B2A3-46FA-B978-E86373A7D32A}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EE64A0BE-1441-45B8-BF5D-36FC81444959}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginName">
      <DTS:VariableValue
        DTS:DataType="8">sa</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D0B364DA-294B-42AA-A8B9-A7ECEFBFA0E9}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginPassword]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginPassword">
      <DTS:VariableValue
        DTS:DataType="8">cgstestSQL2013</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0FBA51BF-D055-40A7-BD29-802DD6D85057}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::SchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{86B4F105-05DB-42E1-8ABF-76D89D662DA2}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ServerName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ServerName">
      <DTS:VariableValue
        DTS:DataType="8">131.156.33.147</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{4331BB69-BFA8-4520-9405-EAC83E9D2731}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_22f67f5f4f6a442583760db1fdfb36a0"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::AppendSourceFolderPath,User::ArchiveFolderPath,User::BackUpSchemaName,User::EmailFrom,User::EmailFromPassword,User::EmailTo,User::ErrorLogFolderPath,User::LogFolderPath,System::PackageName,User::SchemaName,System::UserName">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Text;
using System.Net;
using System.Net.Mail;
#endregion

namespace ST_22f67f5f4f6a442583760db1fdfb36a0
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            bool notEmptyFlag = false;
            string logFileName = "";
            string errorLogFileName = "";
            try
            {
                String sourceFolderPath = Dts.Variables["User::AppendSourceFolderPath"].Value.ToString();
                String schemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                String backUpSchemaName = Dts.Variables["User::BackUpSchemaName"].Value.ToString();
                String userName = Dts.Variables["System::UserName"].Value.ToString();
                String archiveFolderPath = Dts.Variables["User::ArchiveFolderPath"].Value.ToString();
                String packageName = Dts.Variables["System::PackageName"].Value.ToString();
                String logFolderPath = Dts.Variables["User::LogFolderPath"].Value.ToString();

                var directory = new DirectoryInfo(sourceFolderPath);
                FileInfo[] files = directory.GetFiles();
                string fileFullPath = "", fileExtension = "", filename = "";
                string logTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                StreamWriter streamWriter = null;
                logFileName = logFolderPath + "\\" + packageName + "_$" + logTime + ".log";

                bool isFirstFile = true;

                foreach (FileInfo file in files)
                {
                    if(isFirstFile)
                    {
                        streamWriter = File.CreateText(logFileName);
                        isFirstFile = false;
                        notEmptyFlag = true;
                    }
                    if (file.Name.Contains(".xlsx")) { filename = file.Name.Replace(".xlsx", ""); fileExtension = ".xlsx"; }
                    else if (file.Name.Contains(".xls")) { filename = file.Name.Replace(".xls", ""); fileExtension = ".xls"; }
                    else continue;

                    fileFullPath = sourceFolderPath + "\\" + file.Name;

                    string connectionStringWithoutExcelDataType = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
                    OleDbConnection oleDbConnectionWithoutExcelDataType = new OleDbConnection(connectionStringWithoutExcelDataType);

                    oleDbConnectionWithoutExcelDataType.Open();
                    DataTable dataTableWithEachSheetInfo = oleDbConnectionWithoutExcelDataType.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    oleDbConnectionWithoutExcelDataType.Close();

                    streamWriter.WriteLine("The current file is: " + file.Name);

                    string sheetname = "";
                    foreach (DataRow dataRowWithCurrentSheetInfo in dataTableWithEachSheetInfo.Rows)
                    {
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("_FilterDatabase")) continue;
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("$"))
                        {
                            sheetname = dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Replace("$", "");

                            streamWriter.WriteLine("The current sheet is: " + sheetname);

                            SqlConnection sqlConnection = new SqlConnection();
                            sqlConnection = (SqlConnection)(Dts.Connections["OLEDBConnection"].AcquireConnection(Dts.Transaction) as SqlConnection);

                            SqlCommand sqlCommand = sqlConnection.CreateCommand();
                            string checkTableAvailabilityQuery = "SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[" + schemaName + "].[" + sheetname + "]')  AND type in (N'U')";
                            sqlCommand.CommandText = checkTableAvailabilityQuery;
                            string resultOfTableAvailabilityCheck = "";
                            resultOfTableAvailabilityCheck = (string)sqlCommand.ExecuteScalar();

                            if (resultOfTableAvailabilityCheck != null && resultOfTableAvailabilityCheck.Length != 0)
                            {
                                streamWriter.WriteLine("--> The table [" + schemaName + "].[" + sheetname + "] already exists!");
                                StringBuilder clearExistingTableQuery = new StringBuilder();
                                clearExistingTableQuery.Append("IF(NOT EXISTS(SELECT * FROM sys.schemas WHERE name = '" + backUpSchemaName + "')) ");
                                clearExistingTableQuery.Append("BEGIN EXEC('CREATE SCHEMA [" + backUpSchemaName + "] AUTHORIZATION [" + userName + "]') END ");
                                clearExistingTableQuery.Append("SELECT * INTO [" + backUpSchemaName + "].[" + sheetname + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + "] FROM [" + schemaName + "].[" + sheetname + "]; ");
                                
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForColumnNames = new OleDbCommand("select top 1 * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForColumnNames = new OleDbDataAdapter(oleDbCommandForColumnNames);
                                DataTable dataTableForColumnNames = new DataTable();
                                oleDbDataAdapterForColumnNames.Fill(dataTableForColumnNames);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder excelHeaderColumn = new StringBuilder();
                                int i;
                                for (i = 0; i < dataTableForColumnNames.Columns.Count - 1; i++)
                                    excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'" + ",");
                                excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'");

                                streamWriter.WriteLine("b) Actual columns in current excel sheet: " + excelHeaderColumn.ToString());

                                string queryToGetMatchingColumns = "SELECT STUFF((SELECT  ',['+Column_Name+']' FROM Information_schema.Columns WHERE Table_Name='" +
                                    sheetname + "' AND Table_SChema='" + schemaName + "'" +
                                    "AND Column_Name IN (" + @excelHeaderColumn.ToString() + ") for xml path('')),1,1,'') AS ColumnList";
                                sqlCommand.CommandText = queryToGetMatchingColumns;
                                string matchedColumnsList = (string)sqlCommand.ExecuteScalar();
                                streamWriter.WriteLine("c) Matching columns with the existing table: " + matchedColumnsList);

                                SqlCommand clearExistingTableCommand = new SqlCommand(clearExistingTableQuery.ToString(), sqlConnection);
                                clearExistingTableCommand.ExecuteNonQuery();
                                streamWriter.WriteLine("--> Existing table is copied to the schema - " + backUpSchemaName);
                                
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForMatchedColumnsDataFromExcel = new OleDbCommand("select " + matchedColumnsList + " from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForMatchedColumnsData = new OleDbDataAdapter(oleDbCommandForMatchedColumnsDataFromExcel);
                                DataTable dataTableWithMatchedColumnsData = new DataTable();
                                oleDbDataAdapterForMatchedColumnsData.Fill(dataTableWithMatchedColumnsData);
                                oleDbConnectionWithoutExcelDataType.Close();

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = schemaName + "." + sheetname;
                                    foreach (var column in dataTableWithMatchedColumnsData.Columns)
                                        sqlBulkCopy.ColumnMappings.Add(column.ToString(), column.ToString());
                                    sqlBulkCopy.WriteToServer(dataTableWithMatchedColumnsData);
                                }
                                streamWriter.WriteLine("--> All the rows under above mentioned columns, from the sheet " + sheetname + ", were appended to the table " + "[" + schemaName + "].[" + sheetname + "]");
                            }
                            else
                            {
                                streamWriter.WriteLine("a) The table doesn't exist in the schema - " + schemaName);
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForAllDataFromExcel = new OleDbCommand("select * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForAllDataFromExcel = new OleDbDataAdapter(oleDbCommandForAllDataFromExcel);
                                DataTable dataTableForAllDataFromExcel = new DataTable();
                                oleDbDataAdapterForAllDataFromExcel.Fill(dataTableForAllDataFromExcel);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder createNewTableQuery = new StringBuilder();
                                createNewTableQuery.Append("Create table [" + schemaName + "].[" + sheetname + "]");
                                createNewTableQuery.Append("(");
                                int k = 0;
                                for (k = 0; k < dataTableForAllDataFromExcel.Columns.Count - 1; k++)
                                    createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max),");
                                createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max)");
                                createNewTableQuery.Append(");");

                                SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                                createNewTableCommand.ExecuteNonQuery();

                                streamWriter.WriteLine("--> A new table is created with all it's columns as nvarchar(max) - [" + schemaName + "].[" + sheetname + "]");

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[" + sheetname + "]";
                                    sqlBulkCopy.WriteToServer(dataTableForAllDataFromExcel);
                                }
                                streamWriter.WriteLine("--> All the rows from the sheet - " + sheetname + ", are copied to the table - [" + schemaName + "].[" + sheetname + "]");
                            }
                        }
                        streamWriter.WriteLine(); streamWriter.WriteLine();
                    }
                    streamWriter.WriteLine(); streamWriter.WriteLine();
                    File.Move(fileFullPath, archiveFolderPath + "\\" + (file.Name.Replace(sourceFolderPath, "")).Replace(fileExtension, "") + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + fileExtension);
                }
                if (streamWriter != null) streamWriter.Close();
                Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success;
            }

            catch (Exception exception)
            {
                errorLogFileName = Dts.Variables["User::ErrorLogFolderPath"].Value.ToString()
                    + "\\" + "ErrorLog_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".log";
                using (StreamWriter sw = File.CreateText(errorLogFileName))
                {
                    sw.WriteLine("Help link for this exception: " + exception.HelpLink);
                    sw.WriteLine("Primary exception: " + exception.InnerException);
                    sw.WriteLine("Exception Message: " + exception.Message);
                    sw.WriteLine("Error Source: " + exception.Source);
                    sw.WriteLine("Current method which throws exception: " + exception.TargetSite);
                    sw.WriteLine("Code trace at the error point: ");
                    sw.WriteLine(exception.StackTrace);
                    Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure;
                }
            }
            String SendMailFrom = Dts.Variables["EmailFrom"].Value.ToString();
            String SendMailFromPassword = Dts.Variables["EmailFromPassword"].Value.ToString();
            String SendMailTo = Dts.Variables["EmailTo"].Value.ToString();
            String [] SendMailToArray = SendMailTo.Split(',');
            try
            {
                MailMessage email = new MailMessage();
                email.From = new MailAddress(SendMailFrom);
                email.To.Add(SendMailToArray[0]);
                for(int i=1;i< SendMailToArray.Length; i++)
                {
                    email.CC.Add(SendMailToArray[i]);
                }
                SmtpClient SmtpServer = new SmtpClient("smtp.gmail.com");
                SmtpServer.Port = 587;
                SmtpServer.Credentials = new System.Net.NetworkCredential(SendMailFrom, SendMailFromPassword);
                SmtpServer.EnableSsl = true;

                if (Dts.TaskResult == 0 && notEmptyFlag)
                {
                    //send email of success log - logFileName
                    email.Subject = "Success: package - " + Dts.Variables["System::PackageName"].Value.ToString();
                    email.Body = "Team, \n  The package - " + Dts.Variables["System::PackageName"].Value.ToString() + ", was successful. Attached is the log file about all the steps it has taken.\n\nCenter for Governmental Studies";
                    email.Attachments.Add(new System.Net.Mail.Attachment(logFileName));
                }
                else if (Dts.TaskResult == 1)
                {
                    //send email of failure log - errorLogFileName
                    email.Subject = "Failed: package - " + Dts.Variables["System::PackageName"].Value.ToString();
                    email.Body = "Team, \n  The package - " + Dts.Variables["System::PackageName"].Value.ToString() + ", has been failed. Attached is the error log file with the details of the error. Also, check the log file to find the point at which the error has triggered. \n\nCenter for Governmental Studies";
                    email.Attachments.Add(new System.Net.Mail.Attachment(errorLogFileName));
                }

                SmtpServer.Send(email);
            }
            catch(Exception)
            {
                //
            }
        }
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_22f67f5f4f6a442583760db1fdfb36a0.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_22f67f5f4f6a442583760db1fdfb36a0</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_22f67f5f4f6a442583760db1fdfb36a0</msb:DisplayName>
		<msb:ProjectId>{C94AD718-7837-4A9F-B633-32E32B52C937}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_22f67f5f4f6a442583760db1fdfb36a0.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Settings.get_Default():ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Sett" +
    "ings")]

namespace ST_22f67f5f4f6a442583760db1fdfb36a0.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_22f67f5f4f6a442583760db1fdfb36a0")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_22f67f5f4f6a442583760db1fdfb36a0")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ST_22f67f5f4f6a442583760db1fdfb36a0.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{25c668bd-a783-4556-a8f3-620e8e56b6a6}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_22f67f5f4f6a442583760db1fdfb36a0</RootNamespace>
    <AssemblyName>ST_22f67f5f4f6a442583760db1fdfb36a0</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <BinaryItem
            Name="ST_22f67f5f4f6a442583760db1fdfb36a0.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAOI3alsAAAAAAAAAAOAAIiALATAAADQAAAAIAAAAAAAAElMA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMBSAABPAAAAAGAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAGDMAAAAgAAAANAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAYAAAAAYAAAA2AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAPAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAD0
UgAAAAAAAEgAAAACAAUAMC4AANgjAAABAAAAAAAAAAhSAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBwC9DAAAAQAAERYKcgEAAHALcgEAAHAMAigQAAAKbxEA
AApyAwAAcG8SAAAKbxMAAApvFAAAChMGAigQAAAKbxEAAApyPQAAcG8SAAAKbxMAAApvFAAAChMH
AigQAAAKbxEAAApyXwAAcG8SAAAKbxMAAApvFAAAChMIAigQAAAKbxEAAApyjQAAcG8SAAAKbxMA
AApvFAAAChMJAigQAAAKbxEAAApyrwAAcG8SAAAKbxMAAApvFAAAChMKAigQAAAKbxEAAApy3wAA
cG8SAAAKbxMAAApvFAAAChMLAigQAAAKbxEAAApyBwEAcG8SAAAKbxMAAApvFAAAChMMEQZzFQAA
Cm8WAAAKEw1yAQAAcBMOcgEAAHATDygXAAAKExMSE3IvAQBwKBgAAAoTEBQTERyNKQAAASUWEQyi
JRdyTQEAcKIlGBELoiUZclEBAHCiJRoREKIlG3JXAQBwoigZAAAKCxcTEhENExQWExU4LQgAABEU
ERWaExYREiwNBygaAAAKExEWExIXChEWbxsAAApyYQEAcG8cAAAKLCARFm8bAAAKcmEBAHByAQAA
cG8dAAAKJnJhAQBwEw8rNBEWbxsAAApybQEAcG8cAAAKOcYHAAARFm8bAAAKcm0BAHByAQAAcG8d
AAAKJnJtAQBwEw8RBnJNAQBwERZvGwAACigeAAAKEw5ydwEAcBEOctUBAHAoHgAACnMfAAAKExcR
F28gAAAKERd+IQAAChRvIgAAChEXbyMAAAoREXI3AgBwERZvGwAACigkAAAKbyUAAApyAQAAcBMY
byYAAApvJwAAChMZOJsGAAARGW8oAAAKdBQAAAETGhEacmMCAHBvKQAACm8UAAAKcnkCAHBvHAAA
CjptBgAAERpyYwIAcG8pAAAKbxQAAApymQIAcG8cAAAKOT8GAAARGnJjAgBwbykAAApvFAAACnKZ
AgBwcgEAAHBvHQAAChMYERFynQIAcBEYKCQAAApvJQAACnMqAAAKExsCKBAAAApvKwAACnLLAgBw
bywAAAoCKBAAAApvLQAACm8uAAAKdRUAAAETGxEbby8AAAoTHBuNKQAAASUWcusCAHCiJRcRB6Il
GHJfAwBwoiUZERiiJRpyZwMAcKIoGQAAChMdERwRHW8wAAAKcgEAAHATHhEcbzEAAAp0KQAAARMe
ER45hgMAABEebzIAAAo5egMAABERG40pAAABJRZylwMAcKIlFxEHoiUYcl8DAHCiJRkRGKIlGnK3
AwBwoigZAAAKbyUAAApzMwAAChMfER9y2wMAcBEIckkEAHAoHgAACm80AAAKJhEfG40pAAABJRZy
UwQAcKIlFxEIoiUYcosEAHCiJRkRCaIlGnKvBABwoigZAAAKbzQAAAomER8fC40pAAABJRZywQQA
cKIlFxEIoiUYcl8DAHCiJRkRGKIlGnJRAQBwoiUbKBcAAAoTExITci8BAHAoGAAACqIlHHLhBABw
oiUdEQeiJR5yXwMAcKIlHwkRGKIlHwpy8wQAcKIoGQAACm80AAAKJhEXbyAAAApy+wQAcBEYcicF
AHAoHgAAChEXczUAAApzNgAACnM3AAAKEyARIG84AAAKJhEXbyMAAApzMwAAChMhFhMiKzARIXIt
BQBwESBvOQAAChEibzoAAApvOwAACnIxBQBwKB4AAApvNAAACiYRIhdYEyIRIhEgbzkAAApvPAAA
ChdZMr4RIXItBQBwESBvOQAAChEibzoAAApvOwAACnItBQBwKB4AAApvNAAACiYREXI3BQBwESFv
FAAACigkAAAKbyUAAAodjSkAAAElFnKNBQBwoiUXERiiJRhySgYAcKIlGREHoiUacnQGAHCiJRsR
IW8UAAAKoiUccqAGAHCiKBkAAAoTIxEcESNvMAAAChEcbzEAAAp0KQAAARMkERFy9AYAcBEkKCQA
AApvJQAAChEfbxQAAAoRG3M9AAAKbz4AAAomERFyUAcAcBEIKCQAAApvJQAAChEXbyAAAAobjSkA
AAElFnKsBwBwoiUXESSiJRhyvAcAcKIlGREYoiUacicFAHCiKBkAAAoRF3M1AAAKczYAAApzNwAA
ChMlESVvOAAACiYRF28jAAAKERtzPwAAChMmESYRB3LMBwBwERgoHgAACm9AAAAKESVvOQAACm8n
AAAKEycrJBEnbygAAAoTKBEmb0EAAAoRKG8UAAAKEShvFAAACm9CAAAKJhEnb0MAAAot094VESd1
GwAAARMpESksBxEpb0QAAArcESYRJW9FAAAK3gwRJiwHESZvRAAACtwRER2NKQAAASUWctAHAHCi
JRcRGKIlGHJQCABwoiUZEQeiJRpyXwMAcKIlGxEYoiUcco4IAHCiKBkAAApvJQAACjj0AQAAERFy
kggAcBEHKCQAAApvJQAAChEXbyAAAApy6ggAcBEYcicFAHAoHgAAChEXczUAAApzNgAACnM3AAAK
EyoRKm84AAAKJhEXbyMAAApzMwAAChMrESsbjSkAAAElFnIKCQBwoiUXEQeiJRhyXwMAcKIlGREY
oiUaco4IAHCiKBkAAApvNAAACiYRK3IoCQBwbzQAAAomFhMsFhMsKzARK3IsCQBwESpvOQAAChEs
bzoAAApvOwAACnIwCQBwKB4AAApvNAAACiYRLBdYEywRLBEqbzkAAApvPAAAChdZMr4RK3IsCQBw
ESpvOQAAChEsbzoAAApvOwAACnJSCQBwKB4AAApvNAAACiYRK3JyCQBwbzQAAAomEStvFAAAChEb
cz0AAApvPgAACiYRERuNKQAAASUWcngJAHCiJRcRB6IlGHJfAwBwoiUZERiiJRpyjggAcKIoGQAA
Cm8lAAAKERtzPwAAChMtES0bjSkAAAElFnIsCQBwoiUXEQeiJRhyXwMAcKIlGREYoiUaco4IAHCi
KBkAAApvQAAAChEtESpvRQAACt4MES0sBxEtb0QAAArcEREdjSkAAAElFnIFCgBwoiUXERiiJRhy
SwoAcKIlGREHoiUacl8DAHCiJRsRGKIlHHKOCABwoigZAAAKbyUAAAoREW9GAAAKERFvRgAAChEZ
b0MAAAo6Wfn//94VERl1GwAAARMpESksBxEpb0QAAArcERFvRgAAChERb0YAAAoRDhyNKQAAASUW
EQqiJRdyTQEAcKIlGBEWbxsAAAoRBnIBAABwbx0AAAoRD3IBAABwbx0AAAqiJRlyUQEAcKIlGigX
AAAKExMSE3IvAQBwKBgAAAqiJRsRD6IoGQAACihHAAAKERUXWBMVERURFI5pP8j3//8RESwHERFv
SAAACgIoEAAAChZvSQAACt36AAAAEy4CKBAAAApvEQAACnKHCgBwbxIAAApvEwAACm8UAAAKcrkK
AHAoFwAAChMTEhNyLwEAcCgYAAAKclcBAHAoSgAACgwIKBoAAAoTLxEvcs8KAHARLm9LAAAKKCQA
AApvJQAAChEvcg0LAHARLm9MAAAKKE0AAApvJQAAChEvcjULAHARLm9OAAAKKCQAAApvJQAAChEv
cl0LAHARLm9PAAAKKCQAAApvJQAAChEvcnsLAHARLm9QAAAKKE0AAApvJQAAChEvcssLAHBvJQAA
ChEvES5vUQAACm8lAAAKAigQAAAKF29JAAAK3gwRLywHES9vRAAACtzeAAIoEAAACm8RAAAKcgsM
AHBvEgAACm8TAAAKbxQAAAoNAigQAAAKbxEAAApyHwwAcG8SAAAKbxMAAApvFAAAChMEAigQAAAK
bxEAAApyQwwAcG8SAAAKbxMAAApvFAAACheNPQAAASUWHyydb1IAAAoTBXNTAAAKEzARMAlzVAAA
Cm9VAAAKETBvVgAAChEFFppvVwAAChcTMSsXETBvWAAAChEFETGab1cAAAoRMRdYEzERMREFjmky
4XJTDABwc1kAAAolIEsCAABvWgAACiUJEQRzWwAACm9cAAAKJRdvXQAACgIoEAAACm9eAAAKFv4B
Bl8sfBEwcnEMAHACKBAAAApvEQAACnLfAABwbxIAAApvEwAACm8UAAAKKCQAAApvXwAAChEwcpkM
AHACKBAAAApvEQAACnLfAABwbxIAAApvEwAACm8UAAAKcskMAHAoHgAACm9gAAAKETBvYQAACgdz
YgAACm9jAAAKOIUAAAACKBAAAApvXgAAChczdxEwcqYNAHACKBAAAApvEQAACnLfAABwbxIAAApv
EwAACm8UAAAKKCQAAApvXwAAChEwcpkMAHACKBAAAApvEQAACnLfAABwbxIAAApvEwAACm8UAAAK
cswNAHAoHgAACm9gAAAKETBvYQAACghzYgAACm9jAAAKETBvZAAACt4DJt4AKgAAAEGsAAACAAAA
WAYAADEAAACJBgAAFQAAAAAAAAACAAAANQYAAHQAAACpBgAADAAAAAAAAAACAAAAYwgAAD8AAACi
CAAADAAAAAAAAAACAAAAXQIAAK4GAAALCQAAFQAAAAAAAAACAAAACwoAAKAAAACrCgAADAAAAAAA
AAAAAAAADgAAALEJAAC/CQAA+gAAABwAAAEAAAAAKwsAAI4BAAC5DAAAAwAAABwAAAEeAihlAAAK
Kh4CKGYAAAoqrn4BAAAELR5yTQ8AcNADAAACKGcAAApvaAAACnNpAAAKgAEAAAR+AQAABCoafgIA
AAQqHgKAAgAABCoafgMAAAQqHgIoagAACioucwgAAAaAAwAABCoAAEJTSkIBAAEAAAAAAAwAAAB2
NC4wLjMwMzE5AAAAAAUAbAAAAHwGAAAjfgAA6AYAAFgKAAAjU3RyaW5ncwAAAABAEQAAwA8AACNV
UwAAIQAAEAAAACNHVUlEAAAAECEAAMgCAAAjQmxvYgAAAAAAAAACAAABVxWiCQkBAAAA+gEzABYA
AAEAAABIAAAABAAAAAMAAAAJAAAAAQAAAGoAAAAQAAAAAQAAAAIAAAADAAAABAAAAAEAAAABAAAA
BQAAAAEAAAAAAE4FAQAAAAAABgCHA9EHBgAWBNEHBgDTAr4HDwBFCAAABgAAAwMGBgBqAwMGBgBL
AwMGBgD9AwMGBgCnAwMGBgDAAwMGBgAXAwMGBgAyA0kECgDbA7wECgAaArwEBgDnBkIABgBgB0IA
BgCvAZIFDgCKBncABgCXB+IIDgAdCmsADgCsBocJDgDBAIcJBgAsB+4JDgA2AWsADgA7CocJBgA5
CZIFBgBJAZIFBgDDBpIFEgAWAT4FBgC2Ar4HBgA+B/EHBgDwBt4FEgB3AigFEgDnAigFEgBRAskF
BgCbAtEHCgAWBbwEFgCOCLgBFgBAAbgBBgALB0IABgB+BJIFBgB5AUIABgD8BkIADgCNBs0GDgCW
AHcABgChAJIFBgBtB0IADgB4BmsADgA2AmsAFgD5CLgBFgBOB7gBDgCpAM0GDgCmAHcADgB4B3cA
DgB7B80GDgA4BmsADgC+BWsADgAVBocJDgBjBIcJBgAPAgMGBgAZB5IFEgAFCT4FEgBNBj4FEgCd
CT4FEgDlBEwJEgDSCUwJEgBjBj4FEgCoCT4FBgAlAPcEBgDiAZIFBgBVAZIFBgAyCgMGAAAAADIA
AAAAAAEAAQABABAAswUBADkAAQABAAAAEAD4B1QIaQABAAMAAAEQALQIVAiNAAMABwARAKIFyQER
AP8BzQERAO8A0gFQIAAAAACGALkFBgABAMgtAAAAAIYYsQcGAAEA0C0AAAAAgxixBwYAAQDYLQAA
AACTCDoH1gEBAAQuAAAAAJMI5wHbAQEACy4AAAAAkwjzAeEBAQATLgAAAACWCF0J6AECABouAAAA
AIYYsQcGAAIAIi4AAAAAkRi3B+0BAgAAAAEAPgQJALEHAQARALEHBgAZALEHCgApALEHEAAxALEH
EAA5ALEHEABBALEHEABJALEHEABRALEHEABZALEHEABhALEHEABpALEHBgDxALEHBgARAbEHFQAh
AbEHBgBxABEJawApAYoIcQAxAYkFdwA5ATQEfgDRAHwEggBBAbEHEABBAZgIhgCJABUKjACJAHwE
kQBJATIJlgBRAQoKnABZAX4BggBJAc0IogBJAdgApwBJATIJrQCRALEHEABhAa4FBgBpAYMItACR
ACIBuQBhAWkCBgBJATIJwwB5AdgBEADBACkJyQCJAaMHzwCZALMJfgChAIkF1ACpALEHBgApAfUI
2QCRAYkF3wApAfMFfgCZAZoG5gCpALMA6wChAfoJEAChAR4HfgBJAYUE8AC5ALEHBgC5ANEA9ACp
AbEH+gCxAbEHAQHBALEHBgC5AXYFCAHBANYIDgHBAYkFFAHJAaABggCJAb8J8ACxALEHGwGhAUcK
8ADJALEHIgHJAIcBEADJAKEIKAHRAZIALgGZAOUJNgHZAG8CBgDJAIkHOgF5AdgBBgBRAUQEQAF5
AWkCBgApAXgJAQBJATIJRgHhAJAEggDhALoGTgFJATIJUwHhAAoBggDhAP8AggDhAIwCWQHhAOAA
ggBJAVcJXwHpALEHBgDxAbEHEADpAJkFZgHpAOAGbQH5AZIAEADpADsAbQEBArEHEAABAskJAQAJ
ArEHcwEBAr0IeQEBAnsFgAEpAWkJ8ADpAEAJEADpACUKEADpABkJhQEhArEHEAAMAJIAlAEBAswA
mgFxALEHBgDRALEHBgAxAmcBoAExAi4KqQH5ALEHrwEZAbEHBgApAHMAKQIuAAsAAQIuABMACgIu
ABsAKQIuACMAMgIuACsAWwIuADMAWwIuADsAWwIuAEMAMgIuAEsAYQIuAFMAWwIuAFsAeAJDAGMA
wAJJAHMAKQJhAHsAwAJjAGsAwAIcAAMAAQAEAAMAAAA+B/EBAAAHAvYBAABhCfwBAgAEAAMAAgAF
AAUAAQAGAAUAAgAHAAcAiwEEgAAAAQAAAIkaSYgAAAAAAAABAAAABAAAAAAAAAAAAAAAtwGJAAAA
AAAMAAAAAAAAAAAAAADAAZ0EAAAAAAQAAAAAAAAAAAAAALcBawAAAAAABAAAAAAAAAAAAAAAtwGS
BQAAAAAMAAAAAAAAAAAAAADAAUwAAAAAAAAAAAABAAAAAggAAAAAAAAAU1RfMjJmNjdmNWY0ZjZh
NDQyNTgzNzYwZGIxZmRmYjM2YTAAQ29sbGVjdGlvbmAxADxNb2R1bGU+AGdldF9DQwBTeXN0ZW0u
SU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAFN5c3RlbS5EYXRhAFN5c3RlbS5EYXRh
Lk9sZURiAG1zY29ybGliAEFkZABPbGVEYlNjaGVtYUd1aWQAT2xlRGJDb21tYW5kAENyZWF0ZUNv
bW1hbmQAU3FsQ29tbWFuZABTZW5kAEFwcGVuZABSZXBsYWNlAGdldF9TdGFja1RyYWNlAGRlZmF1
bHRJbnN0YW5jZQBnZXRfU291cmNlAGdldF9NZXNzYWdlAE1haWxNZXNzYWdlAEdldE9sZURiU2No
ZW1hVGFibGUARGF0YVRhYmxlAFZhcmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxl
AEdldFR5cGVGcm9tSGFuZGxlAEZpbGUAZ2V0X05hbWUAc2V0X0Rlc3RpbmF0aW9uVGFibGVOYW1l
AGdldF9Db2x1bW5OYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUA
V3JpdGVMaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAE1l
dGhvZEJhc2UAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rp
b25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3Nh
YmxlU3RhdGUAZ2V0X1RhcmdldFNpdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdn
ZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJs
ZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmli
dXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1
dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0
cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0
ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmli
dXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBNb3ZlAFN5
c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nAFRvU3RyaW5n
AGdldF9MZW5ndGgAZ2V0X0hlbHBMaW5rAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBN
aWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAE5ldHdvcmtDcmVkZW50aWFs
AFN5c3RlbS5Db2xsZWN0aW9ucy5PYmplY3RNb2RlbABTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0u
Q29tcG9uZW50TW9kZWwAU3lzdGVtLk5ldC5NYWlsAFNUXzIyZjY3ZjVmNGY2YTQ0MjU4Mzc2MGRi
MWZkZmIzNmEwLmRsbABGaWxsAHNldF9FbmFibGVTc2wAZ2V0X0l0ZW0AU3lzdGVtAHNldF9Gcm9t
AHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBEYXRhQ29sdW1uAFN5c3RlbS5Db25maWd1cmF0
aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAGdldF9UcmFuc2FjdGlvbgBTeXN0ZW0uUmVmbGVjdGlv
bgBTcWxCdWxrQ29weUNvbHVtbk1hcHBpbmdDb2xsZWN0aW9uAERhdGFDb2x1bW5Db2xsZWN0aW9u
AE1haWxBZGRyZXNzQ29sbGVjdGlvbgBBdHRhY2htZW50Q29sbGVjdGlvbgBEYXRhUm93Q29sbGVj
dGlvbgBPbGVEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBnZXRf
SW5uZXJFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAGdldF9UbwBGaWxlSW5mbwBDdWx0dXJl
SW5mbwBGaWxlU3lzdGVtSW5mbwBEaXJlY3RvcnlJbmZvAENoYXIARXhlY3V0ZVNjYWxhcgBTdHJp
bmdCdWlsZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIAU3RyZWFtV3Jp
dGVyAFRleHRXcml0ZXIAT2xlRGJEYXRhQWRhcHRlcgBXcml0ZVRvU2VydmVyAElFbnVtZXJhdG9y
AEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVu
dGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfMjJmNjdmNWY0ZjZhNDQy
NTgzNzYwZGIxZmRmYjM2YTAuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2lu
Z01vZGVzAFNUXzIyZjY3ZjVmNGY2YTQ0MjU4Mzc2MGRiMWZkZmIzNmEwLlByb3BlcnRpZXMAVGFi
bGVzAGdldF9WYXJpYWJsZXMAR2V0RmlsZXMAZ2V0X0NvbHVtbk1hcHBpbmdzAFNldHRpbmdzAHNl
dF9DcmVkZW50aWFscwBDb250YWlucwBnZXRfQ29sdW1ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0
X0Nvbm5lY3Rpb25zAE1haWxBZGRyZXNzAGdldF9EdHMAZ2V0X0F0dGFjaG1lbnRzAGdldF9Sb3dz
AENvbmNhdABPYmplY3QAc2V0X1N1YmplY3QAU3lzdGVtLk5ldABTcGxpdABnZXRfRGVmYXVsdABn
ZXRfVGFza1Jlc3VsdABzZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAU210cENs
aWVudABBdHRhY2htZW50AGdldF9DdXJyZW50AGdldF9Db3VudABzZXRfUG9ydABJQ3JlZGVudGlh
bHNCeUhvc3QATW92ZU5leHQAU3lzdGVtLlRleHQAc2V0X0NvbW1hbmRUZXh0AENyZWF0ZVRleHQA
Z2V0X05vdwBEYXRhUm93AHNldF9Cb2R5AGdldF9Bc3NlbWJseQBTcWxCdWxrQ29weQBFeGVjdXRl
Tm9uUXVlcnkAAAABADlVAHMAZQByADoAOgBBAHAAcABlAG4AZABTAG8AdQByAGMAZQBGAG8AbABk
AGUAcgBQAGEAdABoAAAhVQBzAGUAcgA6ADoAUwBjAGgAZQBtAGEATgBhAG0AZQAALVUAcwBlAHIA
OgA6AEIAYQBjAGsAVQBwAFMAYwBoAGUAbQBhAE4AYQBtAGUAACFTAHkAcwB0AGUAbQA6ADoAVQBz
AGUAcgBOAGEAbQBlAAAvVQBzAGUAcgA6ADoAQQByAGMAaABpAHYAZQBGAG8AbABkAGUAcgBQAGEA
dABoAAAnUwB5AHMAdABlAG0AOgA6AFAAYQBjAGsAYQBnAGUATgBhAG0AZQAAJ1UAcwBlAHIAOgA6
AEwAbwBnAEYAbwBsAGQAZQByAFAAYQB0AGgAAB15AHkAeQB5AE0ATQBkAGQASABIAG0AbQBzAHMA
AANcAAAFXwAkAAAJLgBsAG8AZwAACy4AeABsAHMAeAAACS4AeABsAHMAAF1QAHIAbwB2AGkAZABl
AHIAPQBNAGkAYwByAG8AcwBvAGYAdAAuAEEAQwBFAC4ATwBMAEUARABCAC4AMQAyAC4AMAA7AEQA
YQB0AGEAIABTAG8AdQByAGMAZQA9AABhOwBFAHgAdABlAG4AZABlAGQAIABQAHIAbwBwAGUAcgB0
AGkAZQBzAD0AIgBFAHgAYwBlAGwAIAAxADIALgAwADsASABEAFIAPQBZAEUAUwA7AEkATQBFAFgA
PQAxACIAACtUAGgAZQAgAGMAdQByAHIAZQBuAHQAIABmAGkAbABlACAAaQBzADoAIAAAFVQAQQBC
AEwARQBfAE4AQQBNAEUAAB9fAEYAaQBsAHQAZQByAEQAYQB0AGEAYgBhAHMAZQAAAyQAAC1UAGgA
ZQAgAGMAdQByAHIAZQBuAHQAIABzAGgAZQBlAHQAIABpAHMAOgAgAAAfTwBMAEUARABCAEMAbwBu
AG4AZQBjAHQAaQBvAG4AAHNTAEUATABFAEMAVAAgACoAIABGAFIATwBNACAAcwB5AHMALgBvAGIA
agBlAGMAdABzACAAVwBIAEUAUgBFACAAbwBiAGoAZQBjAHQAXwBpAGQAIAA9ACAATwBCAEoARQBD
AFQAXwBJAEQAKABOACcAWwABB10ALgBbAAAvXQAnACkAIAAgAEEATgBEACAAdAB5AHAAZQAgAGkA
bgAgACgATgAnAFUAJwApAAEfLQAtAD4AIABUAGgAZQAgAHQAYQBiAGwAZQAgAFsAASNdACAAYQBs
AHIAZQBhAGQAeQAgAGUAeABpAHMAdABzACEAAG1JAEYAKABOAE8AVAAgAEUAWABJAFMAVABTACgA
UwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAHMAeQBzAC4AcwBjAGgAZQBtAGEAcwAgAFcASABF
AFIARQAgAG4AYQBtAGUAIAA9ACAAJwABCScAKQApACAAATdCAEUARwBJAE4AIABFAFgARQBDACgA
JwBDAFIARQBBAFQARQAgAFMAQwBIAEUATQBBACAAWwABI10AIABBAFUAVABIAE8AUgBJAFoAQQBU
AEkATwBOACAAWwAAEV0AJwApACAARQBOAEQAIAABH1MARQBMAEUAQwBUACAAKgAgAEkATgBUAE8A
IABbAAARXQAgAEYAUgBPAE0AIABbAAAHXQA7ACAAACtzAGUAbABlAGMAdAAgAHQAbwBwACAAMQAg
ACoAIABmAHIAbwBtACAAWwAABSQAXQAAAycAAQUnACwAAVViACkAIABBAGMAdAB1AGEAbAAgAGMA
bwBsAHUAbQBuAHMAIABpAG4AIABjAHUAcgByAGUAbgB0ACAAZQB4AGMAZQBsACAAcwBoAGUAZQB0
ADoAIAAAgLtTAEUATABFAEMAVAAgAFMAVABVAEYARgAoACgAUwBFAEwARQBDAFQAIAAgACcALABb
ACcAKwBDAG8AbAB1AG0AbgBfAE4AYQBtAGUAKwAnAF0AJwAgAEYAUgBPAE0AIABJAG4AZgBvAHIA
bQBhAHQAaQBvAG4AXwBzAGMAaABlAG0AYQAuAEMAbwBsAHUAbQBuAHMAIABXAEgARQBSAEUAIABU
AGEAYgBsAGUAXwBOAGEAbQBlAD0AJwABKScAIABBAE4ARAAgAFQAYQBiAGwAZQBfAFMAQwBoAGUA
bQBhAD0AJwABKycAQQBOAEQAIABDAG8AbAB1AG0AbgBfAE4AYQBtAGUAIABJAE4AIAAoAAFTKQAg
AGYAbwByACAAeABtAGwAIABwAGEAdABoACgAJwAnACkAKQAsADEALAAxACwAJwAnACkAIABBAFMA
IABDAG8AbAB1AG0AbgBMAGkAcwB0AAFbYwApACAATQBhAHQAYwBoAGkAbgBnACAAYwBvAGwAdQBt
AG4AcwAgAHcAaQB0AGgAIAB0AGgAZQAgAGUAeABpAHMAdABpAG4AZwAgAHQAYQBiAGwAZQA6ACAA
AFstAC0APgAgAEUAeABpAHMAdABpAG4AZwAgAHQAYQBiAGwAZQAgAGkAcwAgAGMAbwBwAGkAZQBk
ACAAdABvACAAdABoAGUAIABzAGMAaABlAG0AYQAgAC0AIAABD3MAZQBsAGUAYwB0ACAAAA8gAGYA
cgBvAG0AIABbAAADLgAAfy0ALQA+ACAAQQBsAGwAIAB0AGgAZQAgAHIAbwB3AHMAIAB1AG4AZABl
AHIAIABhAGIAbwB2AGUAIABtAGUAbgB0AGkAbwBuAGUAZAAgAGMAbwBsAHUAbQBuAHMALAAgAGYA
cgBvAG0AIAB0AGgAZQAgAHMAaABlAGUAdAAgAAE9LAAgAHcAZQByAGUAIABhAHAAcABlAG4AZABl
AGQAIAB0AG8AIAB0AGgAZQAgAHQAYQBiAGwAZQAgAFsAAANdAABXYQApACAAVABoAGUAIAB0AGEA
YgBsAGUAIABkAG8AZQBzAG4AJwB0ACAAZQB4AGkAcwB0ACAAaQBuACAAdABoAGUAIABzAGMAaABl
AG0AYQAgAC0AIAABH3MAZQBsAGUAYwB0ACAAKgAgAGYAcgBvAG0AIABbAAAdQwByAGUAYQB0AGUA
IAB0AGEAYgBsAGUAIABbAAADKAAAA1sAACFdACAAbgB2AGEAcgBjAGgAYQByACgAbQBhAHgAKQAs
AAAfXQAgAG4AdgBhAHIAYwBoAGEAcgAoAG0AYQB4ACkAAAUpADsAAICLLQAtAD4AIABBACAAbgBl
AHcAIAB0AGEAYgBsAGUAIABpAHMAIABjAHIAZQBhAHQAZQBkACAAdwBpAHQAaAAgAGEAbABsACAA
aQB0ACcAcwAgAGMAbwBsAHUAbQBuAHMAIABhAHMAIABuAHYAYQByAGMAaABhAHIAKABtAGEAeAAp
ACAALQAgAFsAAUUtAC0APgAgAEEAbABsACAAdABoAGUAIAByAG8AdwBzACAAZgByAG8AbQAgAHQA
aABlACAAcwBoAGUAZQB0ACAALQAgAAE7LAAgAGEAcgBlACAAYwBvAHAAaQBlAGQAIAB0AG8AIAB0
AGgAZQAgAHQAYQBiAGwAZQAgAC0AIABbAAExVQBzAGUAcgA6ADoARQByAHIAbwByAEwAbwBnAEYA
bwBsAGQAZQByAFAAYQB0AGgAABVcAEUAcgByAG8AcgBMAG8AZwBfAAA9SABlAGwAcAAgAGwAaQBu
AGsAIABmAG8AcgAgAHQAaABpAHMAIABlAHgAYwBlAHAAdABpAG8AbgA6ACAAACdQAHIAaQBtAGEA
cgB5ACAAZQB4AGMAZQBwAHQAaQBvAG4AOgAgAAAnRQB4AGMAZQBwAHQAaQBvAG4AIABNAGUAcwBz
AGEAZwBlADoAIAAAHUUAcgByAG8AcgAgAFMAbwB1AHIAYwBlADoAIAAAT0MAdQByAHIAZQBuAHQA
IABtAGUAdABoAG8AZAAgAHcAaABpAGMAaAAgAHQAaAByAG8AdwBzACAAZQB4AGMAZQBwAHQAaQBv
AG4AOgAgAAA/QwBvAGQAZQAgAHQAcgBhAGMAZQAgAGEAdAAgAHQAaABlACAAZQByAHIAbwByACAA
cABvAGkAbgB0ADoAIAAAE0UAbQBhAGkAbABGAHIAbwBtAAAjRQBtAGEAaQBsAEYAcgBvAG0AUABh
AHMAcwB3AG8AcgBkAAAPRQBtAGEAaQBsAFQAbwAAHXMAbQB0AHAALgBnAG0AYQBpAGwALgBjAG8A
bQAAJ1MAdQBjAGMAZQBzAHMAOgAgAHAAYQBjAGsAYQBnAGUAIAAtACAAAS9UAGUAYQBtACwAIAAK
ACAAIABUAGgAZQAgAHAAYQBjAGsAYQBnAGUAIAAtACAAAYDbLAAgAHcAYQBzACAAcwB1AGMAYwBl
AHMAcwBmAHUAbAAuACAAQQB0AHQAYQBjAGgAZQBkACAAaQBzACAAdABoAGUAIABsAG8AZwAgAGYA
aQBsAGUAIABhAGIAbwB1AHQAIABhAGwAbAAgAHQAaABlACAAcwB0AGUAcABzACAAaQB0ACAAaABh
AHMAIAB0AGEAawBlAG4ALgAKAAoAQwBlAG4AdABlAHIAIABmAG8AcgAgAEcAbwB2AGUAcgBuAG0A
ZQBuAHQAYQBsACAAUwB0AHUAZABpAGUAcwAAJUYAYQBpAGwAZQBkADoAIABwAGEAYwBrAGEAZwBl
ACAALQAgAAGBfywAIABoAGEAcwAgAGIAZQBlAG4AIABmAGEAaQBsAGUAZAAuACAAQQB0AHQAYQBj
AGgAZQBkACAAaQBzACAAdABoAGUAIABlAHIAcgBvAHIAIABsAG8AZwAgAGYAaQBsAGUAIAB3AGkA
dABoACAAdABoAGUAIABkAGUAdABhAGkAbABzACAAbwBmACAAdABoAGUAIABlAHIAcgBvAHIALgAg
AEEAbABzAG8ALAAgAGMAaABlAGMAawAgAHQAaABlACAAbABvAGcAIABmAGkAbABlACAAdABvACAA
ZgBpAG4AZAAgAHQAaABlACAAcABvAGkAbgB0ACAAYQB0ACAAdwBoAGkAYwBoACAAdABoAGUAIABl
AHIAcgBvAHIAIABoAGEAcwAgAHQAcgBpAGcAZwBlAHIAZQBkAC4AIAAKAAoAQwBlAG4AdABlAHIA
IABmAG8AcgAgAEcAbwB2AGUAcgBuAG0AZQBuAHQAYQBsACAAUwB0AHUAZABpAGUAcwAAcVMAVABf
ADIAMgBmADYANwBmADUAZgA0AGYANgBhADQANAAyADUAOAAzADcANgAwAGQAYgAxAGYAZABmAGIA
MwA2AGEAMAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAADweYyNF
FU9CttjXVC+6XysABCABAQgDIAABBSABARERBCABAQ4GIAEBEYCFTgcyAg4ODg4dDg4ODg4ODg4d
Ej0ODg4SQQIRRR0SPQgSPRJJDhJNElESVRJZDg4SXRJhEl0IDg4SYRJlEk0cEm0SYRJdCBJlEnES
QRJ1CAUgABKAlQUgABKAmQYgARKAnRwDIAAcAyAADgUgAB0SPQQAABFFBCABDg4FAAEOHQ4FAAES
QQ4EIAECDgUgAg4ODgYAAw4ODg4EBhGAuQkgAhJhEYC5HRwFAAIODg4FIAASgMEEIAASTQQgARwO
BSAAEoDJBiABEoDNHAQgARwcBCAAElkDIAAIBSABEl0OBiACAQ4SSQYgAQESgNUFIAEIEmEFIAAS
gOEGIAESgOUIBiACAQ4SVQUgAQESVQUgABKA6QcgAhKA7Q4OAyAAAgUgAQESYQUAAgEODgcABA4O
Dg4OBCAAEnEFAAIOHBwFIAASgPEGIAEdDh0DBiABARKA+QUgABKA/QUgAgEODgYgAQESgQkEIAEB
AgUgABKBDQgVEoEVARKBEQUgAQETAAUgAQESdQgAARKBGRGBHQUgABKBIQcgAgEOEoEhCLd6XFYZ
NOCJCImEXc2AgMyRAwYSfQQGEoCBAwYSEAQAABJ9BQAAEoCBBgABARKAgQQAABIQAwAAAQQIABJ9
BQgAEoCBBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAA
AAAAKAEAI1NUXzIyZjY3ZjVmNGY2YTQ0MjU4Mzc2MGRiMWZkZmIzNmEwAAAFAQAAAAAWAQARQ29w
eXJpZ2h0IEAgIDIwMTgAAEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3
b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNAQBAAAAAAAAtAAAAM7K774BAAAAkQAAAGxT
eXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4w
LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVt
LlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAOhSAAAA
AAAAAAAAAAJTAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0UgAAAAAAAAAAAAAAAF9Db3JEbGxN
YWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAA
AAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAABoEAAAAAAAA
AAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQBJ
iIkaAAABAEmIiRo/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwA
ZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6AwAAAQBT
AHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEA
AQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAA
AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADIAMgBmADYA
NwBmADUAZgA0AGYANgBhADQANAAyADUAOAAzADcANgAwAGQAYgAxAGYAZABmAGIAMwA2AGEAMAAA
AD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA2ADcAOQAzAC4AMwA0ADgA
OAA5AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADIAMgBmADYANwBm
ADUAZgA0AGYANgBhADQANAAyADUAOAAzADcANgAwAGQAYgAxAGYAZABmAGIAMwA2AGEAMAAuAGQA
bABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBo
AHQAIABAACAAIAAyADAAMQA4AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMA
AAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AMgAy
AGYANgA3AGYANQBmADQAZgA2AGEANAA0ADIANQA4ADMANwA2ADAAZABiADEAZgBkAGYAYgAzADYA
YQAwAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfADIAMgBm
ADYANwBmADUAZgA0AGYANgBhADQANAAyADUAOAAzADcANgAwAGQAYgAxAGYAZABmAGIAMwA2AGEA
MAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgA3ADkAMwAu
ADMANAA4ADgAOQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEA
LgAwAC4ANgA3ADkAMwAuADMANAA4ADgAOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAwAAAAUMwAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="578,112" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
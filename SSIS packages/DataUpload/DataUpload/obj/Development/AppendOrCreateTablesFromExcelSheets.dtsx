<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/9/2018 6:41:05 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CGSUDAY"
  DTS:CreatorName="NIUNT\A1809750"
  DTS:DTSID="{4E7EF504-9B85-4A7E-A4DD-16FC5EB77683}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3008.28"
  DTS:LocaleID="1033"
  DTS:ObjectName="AppendOrCreateTablesFromExcelSheets"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="42"
  DTS:VersionGUID="{F4AB9361-9FD4-4822-B0CC-4DA9A7EA6724}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLEDBConnection]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}"
      DTS:ObjectName="OLEDBConnection">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">"Data Source="+@[User::ServerName]+";User ID="+@[User::LoginName]+";Password="+@[User::LoginPassword]+";Initial Catalog="+@[User::DatabaseName]+";Application Name=SSIS-AppendToTablesFromExcelSheets-{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}"+@[User::ServerName]+"."+@[User::DatabaseName]+"."+@[User::LoginName]+";"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=131.156.33.147;User ID=sa;Initial Catalog=60by25Development;Application Name=SSIS-AppendToTablesFromExcelSheets-{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}131.156.33.147.60by25Development.sa;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{590065CF-75F6-4485-AA96-C32907BBFB45}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::AppendSourceFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="AppendSourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\DummyFolderForSSIS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{23B3E977-1B8F-4FDA-8218-79D8778DC041}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ArchiveFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B7931060-0320-408B-AF2C-825991991582}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::BackUpSchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BackUpSchemaName">
      <DTS:VariableValue
        DTS:DataType="8">archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{78A766D6-7FAE-407B-A82D-FA926ACF18BE}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::DatabaseName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DatabaseName">
      <DTS:VariableValue
        DTS:DataType="8">60by25Development</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4286D702-5DD4-462B-891D-64D8D3126B81}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ErrorLogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorLogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\ErrorLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2711411C-B2A3-46FA-B978-E86373A7D32A}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EE64A0BE-1441-45B8-BF5D-36FC81444959}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginName">
      <DTS:VariableValue
        DTS:DataType="8">sa</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D0B364DA-294B-42AA-A8B9-A7ECEFBFA0E9}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginPassword]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginPassword">
      <DTS:VariableValue
        DTS:DataType="8">cgstestSQL2013</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0FBA51BF-D055-40A7-BD29-802DD6D85057}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::SchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{86B4F105-05DB-42E1-8ABF-76D89D662DA2}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ServerName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ServerName">
      <DTS:VariableValue
        DTS:DataType="8">131.156.33.147</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{4331BB69-BFA8-4520-9405-EAC83E9D2731}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_22f67f5f4f6a442583760db1fdfb36a0"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::AppendSourceFolderPath,User::ArchiveFolderPath,User::BackUpSchemaName,User::ErrorLogFolderPath,User::LogFolderPath,System::PackageName,User::SchemaName,System::UserName">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_22f67f5f4f6a442583760db1fdfb36a0")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_22f67f5f4f6a442583760db1fdfb36a0")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Text;
#endregion

namespace ST_22f67f5f4f6a442583760db1fdfb36a0
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                String sourceFolderPath = Dts.Variables["User::AppendSourceFolderPath"].Value.ToString();
                String schemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                String backUpSchemaName = Dts.Variables["User::BackUpSchemaName"].Value.ToString();
                String userName = Dts.Variables["System::UserName"].Value.ToString();
                String archiveFolderPath = Dts.Variables["User::ArchiveFolderPath"].Value.ToString();
                String packageName = Dts.Variables["System::PackageName"].Value.ToString();
                String logFolderPath = Dts.Variables["User::LogFolderPath"].Value.ToString();

                var directory = new DirectoryInfo(sourceFolderPath);
                FileInfo[] files = directory.GetFiles();
                string fileFullPath = "", fileExtension = "", filename = "";
                string logTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                StreamWriter streamWriter = File.CreateText(logFolderPath + "\\" + packageName + "_$" + logTime + ".log");

                streamWriter.WriteLine("The package - " + packageName + ", is working on the folder - " + directory.Name);
                foreach (FileInfo file in files)
                {
                    if (file.Name.Contains(".xlsx")) { filename = file.Name.Replace(".xlsx", ""); fileExtension = ".xlsx"; }
                    else if (file.Name.Contains(".xls")) { filename = file.Name.Replace(".xls", ""); fileExtension = ".xls"; }
                    else continue;

                    fileFullPath = sourceFolderPath + "\\" + file.Name;

                    string connectionStringWithoutExcelDataType = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
                    OleDbConnection oleDbConnectionWithoutExcelDataType = new OleDbConnection(connectionStringWithoutExcelDataType);

                    oleDbConnectionWithoutExcelDataType.Open();
                    DataTable dataTableWithEachSheetInfo = oleDbConnectionWithoutExcelDataType.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    oleDbConnectionWithoutExcelDataType.Close();

                    streamWriter.WriteLine("The current file is: " + file.Name);

                    string sheetname = "";
                    foreach (DataRow dataRowWithCurrentSheetInfo in dataTableWithEachSheetInfo.Rows)
                    {
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("_FilterDatabase")) continue;
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("$"))
                        {
                            sheetname = dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Replace("$", "");

                            streamWriter.WriteLine("The current sheet is: " + sheetname);

                            SqlConnection sqlConnection = new SqlConnection();
                            sqlConnection = (SqlConnection)(Dts.Connections["OLEDBConnection"].AcquireConnection(Dts.Transaction) as SqlConnection);

                            SqlCommand sqlCommand = sqlConnection.CreateCommand();
                            string checkTableAvailabilityQuery = "SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[" + schemaName + "].[" + sheetname + "]')  AND type in (N'U')";
                            sqlCommand.CommandText = checkTableAvailabilityQuery;
                            string resultOfTableAvailabilityCheck = "";
                            resultOfTableAvailabilityCheck = (string)sqlCommand.ExecuteScalar();

                            if (resultOfTableAvailabilityCheck != null && resultOfTableAvailabilityCheck.Length != 0)
                            {
                                streamWriter.WriteLine("--> The table [" + schemaName + "].[" + sheetname + "] already exists!");
                                StringBuilder clearExistingTableQuery = new StringBuilder();
                                clearExistingTableQuery.Append("IF(NOT EXISTS(SELECT * FROM sys.schemas WHERE name = '" + backUpSchemaName + "')) ");
                                clearExistingTableQuery.Append("BEGIN EXEC('CREATE SCHEMA [" + backUpSchemaName + "] AUTHORIZATION [" + userName + "]') END ");
                                clearExistingTableQuery.Append("SELECT * INTO [" + backUpSchemaName + "].[" + sheetname + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + "] FROM [" + schemaName + "].[" + sheetname + "]; ");
                                
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForColumnNames = new OleDbCommand("select top 1 * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForColumnNames = new OleDbDataAdapter(oleDbCommandForColumnNames);
                                DataTable dataTableForColumnNames = new DataTable();
                                oleDbDataAdapterForColumnNames.Fill(dataTableForColumnNames);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder excelHeaderColumn = new StringBuilder();
                                int i;
                                for (i = 0; i < dataTableForColumnNames.Columns.Count - 1; i++)
                                    excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'" + ",");
                                excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'");

                                streamWriter.WriteLine("b) Actual columns in current excel sheet: " + excelHeaderColumn.ToString());

                                string queryToGetMatchingColumns = "SELECT STUFF((SELECT  ',['+Column_Name+']' FROM Information_schema.Columns WHERE Table_Name='" +
                                    sheetname + "' AND Table_SChema='" + schemaName + "'" +
                                    "AND Column_Name IN (" + @excelHeaderColumn.ToString() + ") for xml path('')),1,1,'') AS ColumnList";
                                sqlCommand.CommandText = queryToGetMatchingColumns;
                                string matchedColumnsList = (string)sqlCommand.ExecuteScalar();
                                streamWriter.WriteLine("c) Matching columns with the existing table: " + matchedColumnsList);

                                SqlCommand clearExistingTableCommand = new SqlCommand(clearExistingTableQuery.ToString(), sqlConnection);
                                clearExistingTableCommand.ExecuteNonQuery();
                                streamWriter.WriteLine("--> Existing table is copied to the schema - " + backUpSchemaName);
                                
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForMatchedColumnsDataFromExcel = new OleDbCommand("select " + matchedColumnsList + " from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForMatchedColumnsData = new OleDbDataAdapter(oleDbCommandForMatchedColumnsDataFromExcel);
                                DataTable dataTableWithMatchedColumnsData = new DataTable();
                                oleDbDataAdapterForMatchedColumnsData.Fill(dataTableWithMatchedColumnsData);
                                oleDbConnectionWithoutExcelDataType.Close();

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = schemaName + "." + sheetname;
                                    foreach (var column in dataTableWithMatchedColumnsData.Columns)
                                        sqlBulkCopy.ColumnMappings.Add(column.ToString(), column.ToString());
                                    sqlBulkCopy.WriteToServer(dataTableWithMatchedColumnsData);
                                }
                                streamWriter.WriteLine("--> All the rows under above mentioned columns, from the sheet " + sheetname + ", were appended to the table " + "[" + schemaName + "].[" + sheetname + "]");
                            }
                            else
                            {
                                streamWriter.WriteLine("a) The table doesn't exist in the schema - " + schemaName);
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForAllDataFromExcel = new OleDbCommand("select * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForAllDataFromExcel = new OleDbDataAdapter(oleDbCommandForAllDataFromExcel);
                                DataTable dataTableForAllDataFromExcel = new DataTable();
                                oleDbDataAdapterForAllDataFromExcel.Fill(dataTableForAllDataFromExcel);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder createNewTableQuery = new StringBuilder();
                                createNewTableQuery.Append("Create table [" + schemaName + "].[" + sheetname + "]");
                                createNewTableQuery.Append("(");
                                int k = 0;
                                for (k = 0; k < dataTableForAllDataFromExcel.Columns.Count - 1; k++)
                                    createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max),");
                                createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max)");
                                createNewTableQuery.Append(");");

                                SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                                createNewTableCommand.ExecuteNonQuery();

                                streamWriter.WriteLine("--> A new table is created with all it's columns as nvarchar(max) - [" + schemaName + "].[" + sheetname + "]");

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[" + sheetname + "]";
                                    sqlBulkCopy.WriteToServer(dataTableForAllDataFromExcel);
                                }
                                streamWriter.WriteLine("--> All the rows from the sheet - " + sheetname + ", are copied to the table - [" + schemaName + "].[" + sheetname + "]");
                            }
                        }
                        streamWriter.WriteLine(); streamWriter.WriteLine();
                    }
                    streamWriter.WriteLine(); streamWriter.WriteLine();
                    File.Move(fileFullPath, archiveFolderPath + "\\" + (file.Name.Replace(sourceFolderPath, "")).Replace(fileExtension, "") + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + fileExtension);
                }
                streamWriter.Close();
                Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success;
            }

            catch (Exception exception)
            {
                using (StreamWriter sw = File.CreateText(Dts.Variables["User::ErrorLogFolderPath"].Value.ToString()
                    + "\\" + "ErrorLog_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".log"))
                {
                    sw.WriteLine("Help link for this exception: " + exception.HelpLink);
                    sw.WriteLine("Primary exception: " + exception.InnerException);
                    sw.WriteLine("Exception Message: " + exception.Message);
                    sw.WriteLine("Error Source: " + exception.Source);
                    sw.WriteLine("Current method which throws exception: " + exception.TargetSite);
                    sw.WriteLine("Code trace at the error point: ");
                    sw.WriteLine(exception.StackTrace);
                    Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure;
                }
            }
        }
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_22f67f5f4f6a442583760db1fdfb36a0.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{25c668bd-a783-4556-a8f3-620e8e56b6a6}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_22f67f5f4f6a442583760db1fdfb36a0</RootNamespace>
    <AssemblyName>ST_22f67f5f4f6a442583760db1fdfb36a0</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_22f67f5f4f6a442583760db1fdfb36a0</msb:CodeName>
		<msb:DisplayName>ST_22f67f5f4f6a442583760db1fdfb36a0</msb:DisplayName>
		<msb:ProjectId>{C94AD718-7837-4A9F-B633-32E32B52C937}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_22f67f5f4f6a442583760db1fdfb36a0.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Settings.get_Default():ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Sett" +
    "ings")]

namespace ST_22f67f5f4f6a442583760db1fdfb36a0.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_22f67f5f4f6a442583760db1fdfb36a0.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_22f67f5f4f6a442583760db1fdfb36a0.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAElLX1sAAAAAAAAAAOAAIiALATAAACwAAAAIAAAAAAAArksA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFxLAABPAAAAAGAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAtCsAAAAgAAAALAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAYAAAAAYAAAAuAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAANAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACQ
SwAAAAAAAEgAAAACAAUA/CsAAKgeAAABAAAAAAAAAKRKAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBwChCgAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKAigQAAAKbxEAAApyOwAAcG8SAAAKbxMAAApvFAAACgsCKBAAAApvEQAACnJdAABw
bxIAAApvEwAACm8UAAAKDAIoEAAACm8RAAAKcosAAHBvEgAACm8TAAAKbxQAAAoNAigQAAAKbxEA
AApyrQAAcG8SAAAKbxMAAApvFAAAChMEAigQAAAKbxEAAApy3QAAcG8SAAAKbxMAAApvFAAAChMF
AigQAAAKbxEAAApyBQEAcG8SAAAKbxMAAApvFAAAChMGBnMVAAAKEwcRB28WAAAKEwhyLQEAcBMJ
ci0BAHATCigXAAAKEw0SDXIvAQBwKBgAAAoTCxyNKAAAASUWEQaiJRdyTQEAcKIlGBEFoiUZclEB
AHCiJRoRC6IlG3JXAQBwoigZAAAKKBoAAAoTDBEMcmEBAHARBXJ/AQBwEQdvGwAACigcAAAKbx0A
AAoRCBMOFhMPOAoIAAARDhEPmhMQERBvGwAACnK7AQBwbx4AAAosIBEQbxsAAApyuwEAcHItAQBw
bx8AAAomcrsBAHATCis0ERBvGwAACnLHAQBwbx4AAAo5tAcAABEQbxsAAApyxwEAcHItAQBwbx8A
AAomcscBAHATCgZyTQEAcBEQbxsAAAooIAAAChMJctEBAHARCXIvAgBwKCAAAApzIQAAChMRERFv
IgAAChERfiMAAAoUbyQAAAoREW8lAAAKEQxykQIAcBEQbxsAAAooJgAACm8dAAAKci0BAHATEm8n
AAAKbygAAAoTEziLBgAAERNvKQAACnQVAAABExQRFHK9AgBwbyoAAApvFAAACnLTAgBwbx4AAAo6
XQYAABEUcr0CAHBvKgAACm8UAAAKcvMCAHBvHgAACjkvBgAAERRyvQIAcG8qAAAKbxQAAApy8wIA
cHItAQBwbx8AAAoTEhEMcvcCAHAREigmAAAKbx0AAApzKwAAChMVAigQAAAKbywAAApyJQMAcG8t
AAAKAigQAAAKby4AAApvLwAACnUWAAABExURFW8wAAAKExYbjSgAAAElFnJFAwBwoiUXB6IlGHK5
AwBwoiUZERKiJRpywQMAcKIoGQAAChMXERYRF28xAAAKci0BAHATGBEWbzIAAAp0KAAAARMYERg5
fAMAABEYbzMAAAo5cAMAABEMG40oAAABJRZy8QMAcKIlFweiJRhyuQMAcKIlGRESoiUachEEAHCi
KBkAAApvHQAACnM0AAAKExkRGXI1BABwCHKjBABwKCAAAApvNQAACiYRGRuNKAAAASUWcq0EAHCi
JRcIoiUYcuUEAHCiJRkJoiUacgkFAHCiKBkAAApvNQAACiYRGR8LjSgAAAElFnIbBQBwoiUXCKIl
GHK5AwBwoiUZERKiJRpyUQEAcKIlGygXAAAKEw0SDXIvAQBwKBgAAAqiJRxyOwUAcKIlHQeiJR5y
uQMAcKIlHwkREqIlHwpyTQUAcKIoGQAACm81AAAKJhERbyIAAApyVQUAcBEScoEFAHAoIAAAChER
czYAAApzNwAACnM4AAAKExoRGm85AAAKJhERbyUAAApzNAAAChMbFhMcKzARG3KHBQBwERpvOgAA
ChEcbzsAAApvPAAACnKLBQBwKCAAAApvNQAACiYRHBdYExwRHBEabzoAAApvPQAAChdZMr4RG3KH
BQBwERpvOgAAChEcbzsAAApvPAAACnKHBQBwKCAAAApvNQAACiYRDHKRBQBwERtvFAAACigmAAAK
bx0AAAodjSgAAAElFnLnBQBwoiUXERKiJRhypAYAcKIlGQeiJRpyzgYAcKIlGxEbbxQAAAqiJRxy
+gYAcKIoGQAAChMdERYRHW8xAAAKERZvMgAACnQoAAABEx4RDHJOBwBwER4oJgAACm8dAAAKERlv
FAAAChEVcz4AAApvPwAACiYRDHKqBwBwCCgmAAAKbx0AAAoREW8iAAAKG40oAAABJRZyBggAcKIl
FxEeoiUYchYIAHCiJRkREqIlGnKBBQBwoigZAAAKERFzNgAACnM3AAAKczgAAAoTHxEfbzkAAAom
ERFvJQAAChEVc0AAAAoTIBEgB3ImCABwERIoIAAACm9BAAAKER9vOgAACm8oAAAKEyErJBEhbykA
AAoTIhEgb0IAAAoRIm8UAAAKESJvFAAACm9DAAAKJhEhb0QAAAot094VESF1HAAAARMjESMsBxEj
b0UAAArcESARH29GAAAK3gwRICwHESBvRQAACtwRDB2NKAAAASUWcioIAHCiJRcREqIlGHKqCABw
oiUZB6IlGnK5AwBwoiUbERKiJRxy6AgAcKIoGQAACm8dAAAKOO8BAAARDHLsCABwBygmAAAKbx0A
AAoREW8iAAAKckQJAHAREnKBBQBwKCAAAAoREXM2AAAKczcAAApzOAAAChMkESRvOQAACiYREW8l
AAAKczQAAAoTJRElG40oAAABJRZyZAkAcKIlFweiJRhyuQMAcKIlGRESoiUacugIAHCiKBkAAApv
NQAACiYRJXKCCQBwbzUAAAomFhMmFhMmKzARJXKGCQBwESRvOgAAChEmbzsAAApvPAAACnKKCQBw
KCAAAApvNQAACiYRJhdYEyYRJhEkbzoAAApvPQAAChdZMr4RJXKGCQBwESRvOgAAChEmbzsAAApv
PAAACnKsCQBwKCAAAApvNQAACiYRJXLMCQBwbzUAAAomESVvFAAAChEVcz4AAApvPwAACiYRDBuN
KAAAASUWctIJAHCiJRcHoiUYcrkDAHCiJRkREqIlGnLoCABwoigZAAAKbx0AAAoRFXNAAAAKEycR
JxuNKAAAASUWcoYJAHCiJRcHoiUYcrkDAHCiJRkREqIlGnLoCABwoigZAAAKb0EAAAoRJxEkb0YA
AAreDBEnLAcRJ29FAAAK3BEMHY0oAAABJRZyXwoAcKIlFxESoiUYcqUKAHCiJRkHoiUacrkDAHCi
JRsREqIlHHLoCABwoigZAAAKbx0AAAoRDG9HAAAKEQxvRwAAChETb0QAAAo6afn//94VERN1HAAA
ARMjESMsBxEjb0UAAArcEQxvRwAAChEMb0cAAAoRCRyNKAAAASUWEQSiJRdyTQEAcKIlGBEQbxsA
AAoGci0BAHBvHwAAChEKci0BAHBvHwAACqIlGXJRAQBwoiUaKBcAAAoTDRINci8BAHAoGAAACqIl
GxEKoigZAAAKKEgAAAoRDxdYEw8RDxEOjmk/6/f//xEMb0kAAAoCKBAAAAoWb0oAAArd+AAAABMo
AigQAAAKbxEAAApy4QoAcG8SAAAKbxMAAApvFAAACnITCwBwKBcAAAoTDRINci8BAHAoGAAACnJX
AQBwKBwAAAooGgAAChMpESlyKQsAcBEob0sAAAooJgAACm8dAAAKESlyZwsAcBEob0wAAAooTQAA
Cm8dAAAKESlyjwsAcBEob04AAAooJgAACm8dAAAKESlytwsAcBEob08AAAooJgAACm8dAAAKESly
1QsAcBEob1AAAAooTQAACm8dAAAKESlyJQwAcG8dAAAKESkRKG9RAAAKbx0AAAoCKBAAAAoXb0oA
AAreDBEpLAcRKW9FAAAK3N4AKgAAAEGUAAACAAAATAYAADEAAAB9BgAAFQAAAAAAAAACAAAAKgYA
AHMAAACdBgAADAAAAAAAAAACAAAAUwgAAD4AAACRCAAADAAAAAAAAAACAAAAWwIAAJ4GAAD5CAAA
FQAAAAAAAAACAAAA8gkAAKAAAACSCgAADAAAAAAAAAAAAAAAAAAAAKgJAACoCQAA+AAAAB0AAAEe
AihSAAAKKh4CKFMAAAoqrn4BAAAELR5yZQwAcNADAAACKFQAAApvVQAACnNWAAAKgAEAAAR+AQAA
BCoafgIAAAQqHgKAAgAABCoafgMAAAQqHgIoVwAACioucwgAAAaAAwAABCoAAEJTSkIBAAEAAAAA
AAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAMgFAAAjfgAANAYAABAJAAAjU3RyaW5ncwAAAABEDwAA
2AwAACNVUwAcHAAAEAAAACNHVUlEAAAALBwAAHwCAAAjQmxvYgAAAAAAAAACAAABVxWiAQkBAAAA
+gEzABYAAAEAAAA+AAAABAAAAAMAAAAJAAAAAQAAAFcAAAAQAAAAAQAAAAIAAAADAAAABAAAAAEA
AAAFAAAAAQAAAAAA6AQBAAAAAAAGAGIDHQcGAPEDHQcGAK4CCgcPAJEHAAAGANsChgUGAEUDhgUG
ACYDhgUGANgDhgUGAIIDhgUGAJsDhgUGAPIChgUGAA0DJAQKALYDlwQKAPUBlwQGAFwGLgAGADgG
LgAGAKwGLgAGAIoBHgUOAOIFYwAGAOMGHggOAN8IVwAOAAQGewgOAK0AewgGAHgGsAgOABEBVwAO
APQIewgGAFkIHgUGACQBHgUGABsGHgUGAJECCgcGAIoGPQcGAEEGYQUSAFIC0gQSAMIC0gQSACwC
TAUGAHYCHQcKAMAElwQWANoHkwEWABsBkwEGAFkEHgUGAFQBLgAGAE0GLgAGALkGLgAOAOUFJQYO
AIIAYwAGAI0AHgUOANAFVwAOABECVwAWADUIkwEWAJoGkwEOAJUAJQYOAJIAYwAOAMQGYwAOAMcG
JQYOALsFVwAOAEEFVwAOAJgFewgOAD4EewgGAOoBhgUGAL0BHgUGADABHgUGAOsIhgUAAAAAJQAA
AAAAAQABAAEAEAA2BQEAOQABAAEAAAAQAEQHoAdtAAEAAwAAARAAAAigB40AAwAHABEAJQV/AREA
2gGDAREA1gCIAVAgAAAAAIYAPAUGAAEAlCsAAAAAhhj9BgYAAQCcKwAAAACDGP0GBgABAKQrAAAA
AJMIhgaMAQEA0CsAAAAAkwjCAZEBAQDXKwAAAACTCM4BlwEBAN8rAAAAAJYIYAieAQIA5isAAAAA
hhj9BgYAAgDuKwAAAACRGAMHowECAAAAAQAZBAkA/QYBABEA/QYGABkA/QYKACkA/QYQADEA/QYQ
ADkA/QYQAEEA/QYQAEkA/QYQAFEA/QYQAFkA/QYQAGEA/QYQAGkA/QYGAPEA/QYGABEB/QYVACEB
/QYGAHEAQQhiACkB1gdoADEBFQVuADkBDwR1ANkAVwR5AHkA/QYQAHkA5Ad9AJEA1wiDAJEAVwSI
AEEBUgiNAEkBzAiTAFEBWQF5AEEBUgiZAFkBswEQAEEBCQihAEEBvwCmAEEBUgisAJkA/QYQAGEB
MQUGAGkBzwezAJkA/QC4AGEBRAIGAEEBUgjCAMkASQjIAIEB7wbOAKEAkQh1AKkAFQXTALEA/QYG
ACkBMQjYAIkBFQXeACkBdgV1AJEB8gXlALEAnwDqAJkBvAgQAJkBagZ1AEEBYATvAMEA/QYGAMEA
uADzAKEB/Qb5AKkB/QYAAckA/QYGALEBEAUHAckAEggNAbkBFQUTAcEBewF5AIEBnQjvALkA/QYa
AZkBAAnvANEA/QYhAdEAYgEQANEA7QcnAckBfgAtAaEApwg1AeEASgIGANEA1QY5AVkBswEGAEkB
HwQ/AVkBRAIGACkBbAgBAOkAawR5AOkAEgZFAUEBUghKAekA8QB5AOkA5gB5AOkAZwJQAekAxwB5
AHEA/QYGANkA/QYGAOEBQgFWAeEB5whfAfkA/QZlARkB/QYGACkAcwDfAS4ACwC3AS4AEwDAAS4A
GwDfAS4AIwDoAS4AKwARAi4AMwARAi4AOwARAi4AQwDoAS4ASwAXAi4AUwARAi4AWwAuAkMAYwB2
AkkAcwDfAWEAewB2AmMAawB2AhwAAwABAAQAAwAAAIoGpwEAAOIBrAEAAGQIsgECAAQAAwACAAUA
BQABAAYABQACAAcABwAEgAAAAQAAAIEa/FcAAAAAAAABAAAABAAAAAAAAAAAAAAAbQF1AAAAAAAM
AAAAAAAAAAAAAAB2AXgEAAAAAAQAAAAAAAAAAAAAAG0BVwAAAAAABAAAAAAAAAAAAAAAbQEeBQAA
AAAMAAAAAAAAAAAAAAB2ATgAAAAAAAAAAAABAAAATgcAAAAAAAAAU1RfMjJmNjdmNWY0ZjZhNDQy
NTgzNzYwZGIxZmRmYjM2YTAAPE1vZHVsZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
TWFuYWdlZERUUwBTeXN0ZW0uRGF0YQBTeXN0ZW0uRGF0YS5PbGVEYgBtc2NvcmxpYgBBZGQAT2xl
RGJTY2hlbWFHdWlkAE9sZURiQ29tbWFuZABDcmVhdGVDb21tYW5kAFNxbENvbW1hbmQAQXBwZW5k
AFJlcGxhY2UAZ2V0X1N0YWNrVHJhY2UAZGVmYXVsdEluc3RhbmNlAGdldF9Tb3VyY2UAZ2V0X01l
c3NhZ2UAR2V0T2xlRGJTY2hlbWFUYWJsZQBEYXRhVGFibGUAVmFyaWFibGUASURpc3Bvc2FibGUA
UnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARmlsZQBnZXRfTmFtZQBzZXRfRGVz
dGluYXRpb25UYWJsZU5hbWUAZ2V0X0NvbHVtbk5hbWUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuUnVudGltZQBXcml0ZUxpbmUAVHlwZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBy
ZXNvdXJjZUN1bHR1cmUATWV0aG9kQmFzZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50
ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlz
cG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBnZXRfVGFyZ2V0U2l0ZQBDb21waWxlckdlbmVyYXRl
ZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1
dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1i
bHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29u
ZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0
aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5
Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3Nl
bWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1Zh
bHVlAHZhbHVlAE1vdmUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBTcWxCdWxrQ29weUNvbHVt
bk1hcHBpbmcAVG9TdHJpbmcAZ2V0X0xlbmd0aABnZXRfSGVscExpbmsATWljcm9zb2Z0LlNxbFNl
cnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sA
U2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzIyZjY3ZjVmNGY2YTQ0
MjU4Mzc2MGRiMWZkZmIzNmEwLmRsbABGaWxsAGdldF9JdGVtAFN5c3RlbQByZXNvdXJjZU1hbgBP
cGVuAFNjcmlwdE1haW4ARGF0YUNvbHVtbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xv
YmFsaXphdGlvbgBnZXRfVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AU3FsQnVsa0NvcHlD
b2x1bW5NYXBwaW5nQ29sbGVjdGlvbgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVj
dGlvbgBPbGVEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBnZXRf
SW5uZXJFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAEZpbGVJbmZvAEN1bHR1cmVJbmZvAEZp
bGVTeXN0ZW1JbmZvAERpcmVjdG9yeUluZm8ARXhlY3V0ZVNjYWxhcgBTdHJpbmdCdWlsZGVyAGdl
dF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIAU3RyZWFtV3JpdGVyAFRleHRXcml0
ZXIAT2xlRGJEYXRhQWRhcHRlcgBXcml0ZVRvU2VydmVyAElFbnVtZXJhdG9yAEdldEVudW1lcmF0
b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxl
clNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfMjJmNjdmNWY0ZjZhNDQyNTgzNzYwZGIxZmRm
YjM2YTAuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzIy
ZjY3ZjVmNGY2YTQ0MjU4Mzc2MGRiMWZkZmIzNmEwLlByb3BlcnRpZXMAVGFibGVzAGdldF9WYXJp
YWJsZXMAR2V0RmlsZXMAZ2V0X0NvbHVtbk1hcHBpbmdzAFNldHRpbmdzAENvbnRhaW5zAGdldF9D
b2x1bW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMAZ2V0X0R0cwBnZXRfUm93
cwBDb25jYXQAT2JqZWN0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNx
bENsaWVudABnZXRfQ3VycmVudABnZXRfQ291bnQATW92ZU5leHQAU3lzdGVtLlRleHQAc2V0X0Nv
bW1hbmRUZXh0AENyZWF0ZVRleHQAZ2V0X05vdwBEYXRhUm93AGdldF9Bc3NlbWJseQBTcWxCdWxr
Q29weQBFeGVjdXRlTm9uUXVlcnkAADlVAHMAZQByADoAOgBBAHAAcABlAG4AZABTAG8AdQByAGMA
ZQBGAG8AbABkAGUAcgBQAGEAdABoAAAhVQBzAGUAcgA6ADoAUwBjAGgAZQBtAGEATgBhAG0AZQAA
LVUAcwBlAHIAOgA6AEIAYQBjAGsAVQBwAFMAYwBoAGUAbQBhAE4AYQBtAGUAACFTAHkAcwB0AGUA
bQA6ADoAVQBzAGUAcgBOAGEAbQBlAAAvVQBzAGUAcgA6ADoAQQByAGMAaABpAHYAZQBGAG8AbABk
AGUAcgBQAGEAdABoAAAnUwB5AHMAdABlAG0AOgA6AFAAYQBjAGsAYQBnAGUATgBhAG0AZQAAJ1UA
cwBlAHIAOgA6AEwAbwBnAEYAbwBsAGQAZQByAFAAYQB0AGgAAAEAHXkAeQB5AHkATQBNAGQAZABI
AEgAbQBtAHMAcwAAA1wAAAVfACQAAAkuAGwAbwBnAAAdVABoAGUAIABwAGEAYwBrAGEAZwBlACAA
LQAgAAE7LAAgAGkAcwAgAHcAbwByAGsAaQBuAGcAIABvAG4AIAB0AGgAZQAgAGYAbwBsAGQAZQBy
ACAALQAgAAELLgB4AGwAcwB4AAAJLgB4AGwAcwAAXVAAcgBvAHYAaQBkAGUAcgA9AE0AaQBjAHIA
bwBzAG8AZgB0AC4AQQBDAEUALgBPAEwARQBEAEIALgAxADIALgAwADsARABhAHQAYQAgAFMAbwB1
AHIAYwBlAD0AAGE7AEUAeAB0AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAiAEUA
eABjAGUAbAAgADEAMgAuADAAOwBIAEQAUgA9AFkARQBTADsASQBNAEUAWAA9ADEAIgAAK1QAaABl
ACAAYwB1AHIAcgBlAG4AdAAgAGYAaQBsAGUAIABpAHMAOgAgAAAVVABBAEIATABFAF8ATgBBAE0A
RQAAH18ARgBpAGwAdABlAHIARABhAHQAYQBiAGEAcwBlAAADJAAALVQAaABlACAAYwB1AHIAcgBl
AG4AdAAgAHMAaABlAGUAdAAgAGkAcwA6ACAAAB9PAEwARQBEAEIAQwBvAG4AbgBlAGMAdABpAG8A
bgAAc1MARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABzAHkAcwAuAG8AYgBqAGUAYwB0AHMAIABX
AEgARQBSAEUAIABvAGIAagBlAGMAdABfAGkAZAAgAD0AIABPAEIASgBFAEMAVABfAEkARAAoAE4A
JwBbAAEHXQAuAFsAAC9dACcAKQAgACAAQQBOAEQAIAB0AHkAcABlACAAaQBuACAAKABOACcAVQAn
ACkAAR8tAC0APgAgAFQAaABlACAAdABhAGIAbABlACAAWwABI10AIABhAGwAcgBlAGEAZAB5ACAA
ZQB4AGkAcwB0AHMAIQAAbUkARgAoAE4ATwBUACAARQBYAEkAUwBUAFMAKABTAEUATABFAEMAVAAg
ACoAIABGAFIATwBNACAAcwB5AHMALgBzAGMAaABlAG0AYQBzACAAVwBIAEUAUgBFACAAbgBhAG0A
ZQAgAD0AIAAnAAEJJwApACkAIAABN0IARQBHAEkATgAgAEUAWABFAEMAKAAnAEMAUgBFAEEAVABF
ACAAUwBDAEgARQBNAEEAIABbAAEjXQAgAEEAVQBUAEgATwBSAEkAWgBBAFQASQBPAE4AIABbAAAR
XQAnACkAIABFAE4ARAAgAAEfUwBFAEwARQBDAFQAIAAqACAASQBOAFQATwAgAFsAABFdACAARgBS
AE8ATQAgAFsAAAddADsAIAAAK3MAZQBsAGUAYwB0ACAAdABvAHAAIAAxACAAKgAgAGYAcgBvAG0A
IABbAAAFJABdAAADJwABBScALAABVWIAKQAgAEEAYwB0AHUAYQBsACAAYwBvAGwAdQBtAG4AcwAg
AGkAbgAgAGMAdQByAHIAZQBuAHQAIABlAHgAYwBlAGwAIABzAGgAZQBlAHQAOgAgAACAu1MARQBM
AEUAQwBUACAAUwBUAFUARgBGACgAKABTAEUATABFAEMAVAAgACAAJwAsAFsAJwArAEMAbwBsAHUA
bQBuAF8ATgBhAG0AZQArACcAXQAnACAARgBSAE8ATQAgAEkAbgBmAG8AcgBtAGEAdABpAG8AbgBf
AHMAYwBoAGUAbQBhAC4AQwBvAGwAdQBtAG4AcwAgAFcASABFAFIARQAgAFQAYQBiAGwAZQBfAE4A
YQBtAGUAPQAnAAEpJwAgAEEATgBEACAAVABhAGIAbABlAF8AUwBDAGgAZQBtAGEAPQAnAAErJwBB
AE4ARAAgAEMAbwBsAHUAbQBuAF8ATgBhAG0AZQAgAEkATgAgACgAAVMpACAAZgBvAHIAIAB4AG0A
bAAgAHAAYQB0AGgAKAAnACcAKQApACwAMQAsADEALAAnACcAKQAgAEEAUwAgAEMAbwBsAHUAbQBu
AEwAaQBzAHQAAVtjACkAIABNAGEAdABjAGgAaQBuAGcAIABjAG8AbAB1AG0AbgBzACAAdwBpAHQA
aAAgAHQAaABlACAAZQB4AGkAcwB0AGkAbgBnACAAdABhAGIAbABlADoAIAAAWy0ALQA+ACAARQB4
AGkAcwB0AGkAbgBnACAAdABhAGIAbABlACAAaQBzACAAYwBvAHAAaQBlAGQAIAB0AG8AIAB0AGgA
ZQAgAHMAYwBoAGUAbQBhACAALQAgAAEPcwBlAGwAZQBjAHQAIAAADyAAZgByAG8AbQAgAFsAAAMu
AAB/LQAtAD4AIABBAGwAbAAgAHQAaABlACAAcgBvAHcAcwAgAHUAbgBkAGUAcgAgAGEAYgBvAHYA
ZQAgAG0AZQBuAHQAaQBvAG4AZQBkACAAYwBvAGwAdQBtAG4AcwAsACAAZgByAG8AbQAgAHQAaABl
ACAAcwBoAGUAZQB0ACAAAT0sACAAdwBlAHIAZQAgAGEAcABwAGUAbgBkAGUAZAAgAHQAbwAgAHQA
aABlACAAdABhAGIAbABlACAAWwAAA10AAFdhACkAIABUAGgAZQAgAHQAYQBiAGwAZQAgAGQAbwBl
AHMAbgAnAHQAIABlAHgAaQBzAHQAIABpAG4AIAB0AGgAZQAgAHMAYwBoAGUAbQBhACAALQAgAAEf
cwBlAGwAZQBjAHQAIAAqACAAZgByAG8AbQAgAFsAAB1DAHIAZQBhAHQAZQAgAHQAYQBiAGwAZQAg
AFsAAAMoAAADWwAAIV0AIABuAHYAYQByAGMAaABhAHIAKABtAGEAeAApACwAAB9dACAAbgB2AGEA
cgBjAGgAYQByACgAbQBhAHgAKQAABSkAOwAAgIstAC0APgAgAEEAIABuAGUAdwAgAHQAYQBiAGwA
ZQAgAGkAcwAgAGMAcgBlAGEAdABlAGQAIAB3AGkAdABoACAAYQBsAGwAIABpAHQAJwBzACAAYwBv
AGwAdQBtAG4AcwAgAGEAcwAgAG4AdgBhAHIAYwBoAGEAcgAoAG0AYQB4ACkAIAAtACAAWwABRS0A
LQA+ACAAQQBsAGwAIAB0AGgAZQAgAHIAbwB3AHMAIABmAHIAbwBtACAAdABoAGUAIABzAGgAZQBl
AHQAIAAtACAAATssACAAYQByAGUAIABjAG8AcABpAGUAZAAgAHQAbwAgAHQAaABlACAAdABhAGIA
bABlACAALQAgAFsAATFVAHMAZQByADoAOgBFAHIAcgBvAHIATABvAGcARgBvAGwAZABlAHIAUABh
AHQAaAAAFVwARQByAHIAbwByAEwAbwBnAF8AAD1IAGUAbABwACAAbABpAG4AawAgAGYAbwByACAA
dABoAGkAcwAgAGUAeABjAGUAcAB0AGkAbwBuADoAIAAAJ1AAcgBpAG0AYQByAHkAIABlAHgAYwBl
AHAAdABpAG8AbgA6ACAAACdFAHgAYwBlAHAAdABpAG8AbgAgAE0AZQBzAHMAYQBnAGUAOgAgAAAd
RQByAHIAbwByACAAUwBvAHUAcgBjAGUAOgAgAABPQwB1AHIAcgBlAG4AdAAgAG0AZQB0AGgAbwBk
ACAAdwBoAGkAYwBoACAAdABoAHIAbwB3AHMAIABlAHgAYwBlAHAAdABpAG8AbgA6ACAAAD9DAG8A
ZABlACAAdAByAGEAYwBlACAAYQB0ACAAdABoAGUAIABlAHIAcgBvAHIAIABwAG8AaQBuAHQAOgAg
AABxUwBUAF8AMgAyAGYANgA3AGYANQBmADQAZgA2AGEANAA0ADIANQA4ADMANwA2ADAAZABiADEA
ZgBkAGYAYgAzADYAYQAwAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBz
AAAApcYxPbFcwUi0k0KrJiX+JAAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQERgIVFByoODg4ODg4O
Ej0dEkEODg4SRRFJHRJBCBJBEk0OElESVRJZEl0ODhJhEmUSYQgODhJlEmkSURwScRJlEmEIEmkS
dRJFBSAAEoCVBSAAEoCZBiABEoCdHAMgABwDIAAOBSAAHRJBBAAAEUkEIAEODgUAAQ4dDgUAARJF
DgcABA4ODg4OBCABAg4FIAIODg4GAAMODg4OBAYRgLkJIAISZRGAuR0cBQACDg4OBSAAEoC9BCAA
ElEEIAEcDgUgABKAxQYgARKAyRwEIAEcHAQgABJdAyAACAUgARJhDgYgAgEOEk0GIAEBEoDRBSAB
CBJlBSAAEoDdBiABEoDhCAYgAgEOElkFIAEBElkFIAASgOUHIAISgOkODgMgAAIFIAEBEmUFAAIB
Dg4EIAASdQUAAg4cHAUgABKA7QgAARKA8RGA9QUgABKA+QcgAgEOEoD5CLd6XFYZNOCJCImEXc2A
gMyRAwYSfQQGEoCBAwYSEAQAABJ9BQAAEoCBBgABARKAgQQAABIQAwAAAQQIABJ9BQgAEoCBBAgA
EhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NU
XzIyZjY3ZjVmNGY2YTQ0MjU4Mzc2MGRiMWZkZmIzNmEwAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAg
IDIwMTgAAEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxh
eU5hbWUQLk5FVCBGcmFtZXdvcmsgNAQBAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291
cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1u
ZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMu
UnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAACESwAAAAAAAAAAAACeSwAA
ACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkEsAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVl
LmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAA
gAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAA
AAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAA
AAEA/FeBGgAAAQD8V4EaPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYA
aQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMA
AAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAA
GgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAA
AAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwAyADIA
ZgA2ADcAZgA1AGYANABmADYAYQA0ADQAMgA1ADgAMwA3ADYAMABkAGIAMQBmAGQAZgBiADMANgBh
ADAAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANgA3ADgANQAuADIA
MgA1ADIANAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAyADIAZgA2
ADcAZgA1AGYANABmADYAYQA0ADQAMgA1ADgAMwA3ADYAMABkAGIAMQBmAGQAZgBiADMANgBhADAA
LgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgACAAMgAwADEAOAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIA
awBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABf
ADIAMgBmADYANwBmADUAZgA0AGYANgBhADQANAAyADUAOAAzADcANgAwAGQAYgAxAGYAZABmAGIA
MwA2AGEAMAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwAy
ADIAZgA2ADcAZgA1AGYANABmADYAYQA0ADQAMgA1ADgAMwA3ADYAMABkAGIAMQBmAGQAZgBiADMA
NgBhADAAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANwA4
ADUALgAyADIANQAyADQAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADYANwA4ADUALgAyADIANQAyADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAsDsAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="578,112" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
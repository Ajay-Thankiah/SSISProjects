<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/9/2018 6:41:05 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CGSUDAY"
  DTS:CreatorName="NIUNT\A1809750"
  DTS:DTSID="{52E30A00-4F9A-4503-856F-1FBC633B20C5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3008.28"
  DTS:LocaleID="1033"
  DTS:ObjectName="AppendToOrCreatePopulateTablesFromExcelSheets"
  DTS:PackageType="5"
  DTS:VersionBuild="23"
  DTS:VersionGUID="{52BEA91C-5DB8-4AD8-AB04-F2AD8EDCD4CE}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[60By25Development]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}"
      DTS:ObjectName="60By25Development">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=131.156.33.147;User ID=sa;Initial Catalog=60by25Development;Application Name=SSIS-AppendToTablesFromExcelSheets-{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}131.156.33.147.60by25Development.sa;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAACxZl1qynOEaJVjcZggMcOAAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAAANCO8JPOujZc+3FtOTw4h6AAAAAASAAACgAAAAEAAAAPKdK2q07uTzujYcUgsR2mggAAAAJQaL56ENxvrkMpqKuv0YO6x+6RC1kL64KotC+2dkAhMUAAAAkB0nxkIChGAzONmldhVdzeykq80</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{23B3E977-1B8F-4FDA-8218-79D8778DC041}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\a1809750\Desktop\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B7931060-0320-408B-AF2C-825991991582}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BackUpSchemaName">
      <DTS:VariableValue
        DTS:DataType="8">archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4286D702-5DD4-462B-891D-64D8D3126B81}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorLogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\a1809750\Desktop\ErrorLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2711411C-B2A3-46FA-B978-E86373A7D32A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\a1809750\Desktop\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0FBA51BF-D055-40A7-BD29-802DD6D85057}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{590065CF-75F6-4485-AA96-C32907BBFB45}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\a1809750\Desktop\AppendTables</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B988D752-3CF9-49CA-B169-A73826CD9819}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SqlConnectionString">
      <DTS:VariableValue
        DTS:DataType="8">60By25Development</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{4331BB69-BFA8-4520-9405-EAC83E9D2731}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_22f67f5f4f6a442583760db1fdfb36a0"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ArchiveFolderPath,User::BackUpSchemaName,User::ErrorLogFolderPath,User::LogFolderPath,System::PackageName,User::SchemaName,User::SourceFolderPath,User::SqlConnectionString,System::UserName">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_22f67f5f4f6a442583760db1fdfb36a0")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_22f67f5f4f6a442583760db1fdfb36a0")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Text;
#endregion

namespace ST_22f67f5f4f6a442583760db1fdfb36a0
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                String sourceFolderPath = Dts.Variables["User::SourceFolderPath"].Value.ToString();
                String schemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                String backUpSchemaName = Dts.Variables["User::BackUpSchemaName"].Value.ToString();
                String userName = Dts.Variables["System::UserName"].Value.ToString();
                String archiveFolderPath = Dts.Variables["User::ArchiveFolderPath"].Value.ToString();
                String sqlConnectionString = Dts.Variables["User::SqlConnectionString"].Value.ToString();
                String packageName = Dts.Variables["System::PackageName"].Value.ToString();
                String logFolderPath = Dts.Variables["User::LogFolderPath"].Value.ToString();

                var directory = new DirectoryInfo(sourceFolderPath);
                FileInfo[] files = directory.GetFiles();
                string fileFullPath = "", fileExtension = "", filename = "";
                string logTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                StreamWriter streamWriter = File.CreateText(logFolderPath + "\\" + packageName + "_$" + logTime + ".log");

                streamWriter.WriteLine("The package - " + packageName + ", is working on the folder - " + directory.Name);
                foreach (FileInfo file in files)
                {
                    if (file.Name.Contains(".xlsx")) { filename = file.Name.Replace(".xlsx", ""); fileExtension = ".xlsx"; }
                    else if (file.Name.Contains(".xls")) { filename = file.Name.Replace(".xls", ""); fileExtension = ".xls"; }
                    else continue;

                    fileFullPath = sourceFolderPath + "\\" + file.Name;

                    string connectionStringWithoutExcelDataType = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
                    OleDbConnection oleDbConnectionWithoutExcelDataType = new OleDbConnection(connectionStringWithoutExcelDataType);

                    oleDbConnectionWithoutExcelDataType.Open();
                    DataTable dataTableWithEachSheetInfo = oleDbConnectionWithoutExcelDataType.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    oleDbConnectionWithoutExcelDataType.Close();

                    streamWriter.WriteLine("The current file is: " + file.Name);

                    string sheetname = "";
                    foreach (DataRow dataRowWithCurrentSheetInfo in dataTableWithEachSheetInfo.Rows)
                    {
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("_filteredDatabase")) continue;
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("$"))
                        {
                            sheetname = dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Replace("$", "");

                            streamWriter.WriteLine("The current sheet is: " + sheetname);

                            SqlConnection sqlConnection = new SqlConnection();
                            sqlConnection = (SqlConnection)(Dts.Connections[sqlConnectionString].AcquireConnection(Dts.Transaction) as SqlConnection);

                            SqlCommand sqlCommand = sqlConnection.CreateCommand();
                            string checkTableAvailabilityQuery = "SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[" + schemaName + "].[" + sheetname + "]')  AND type in (N'U')";
                            sqlCommand.CommandText = checkTableAvailabilityQuery;
                            string resultOfTableAvailabilityCheck = "";
                            resultOfTableAvailabilityCheck = (string)sqlCommand.ExecuteScalar();

                            if (resultOfTableAvailabilityCheck != null && resultOfTableAvailabilityCheck.Length != 0)
                            {
                                streamWriter.WriteLine("--> The table [" + schemaName + "].[" + sheetname + "] already exists!");
                                StringBuilder clearExistingTableQuery = new StringBuilder();
                                clearExistingTableQuery.Append("IF(NOT EXISTS(SELECT * FROM sys.schemas WHERE name = '" + backUpSchemaName + "')) ");
                                clearExistingTableQuery.Append("BEGIN EXEC('CREATE SCHEMA [" + backUpSchemaName + "] AUTHORIZATION [" + userName + "]') END ");
                                clearExistingTableQuery.Append("SELECT * INTO [" + backUpSchemaName + "].[" + sheetname + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + "] FROM [" + schemaName + "].[" + sheetname + "]; ");
                                
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForColumnNames = new OleDbCommand("select top 1 * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForColumnNames = new OleDbDataAdapter(oleDbCommandForColumnNames);
                                DataTable dataTableForColumnNames = new DataTable();
                                oleDbDataAdapterForColumnNames.Fill(dataTableForColumnNames);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder excelHeaderColumn = new StringBuilder();
                                int i;
                                for (i = 0; i < dataTableForColumnNames.Columns.Count - 1; i++)
                                    excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'" + ",");
                                excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'");

                                streamWriter.WriteLine("b) Actual columns in current excel sheet: " + excelHeaderColumn.ToString());

                                string queryToGetMatchingColumns = "SELECT STUFF((SELECT  ',['+Column_Name+']' FROM Information_schema.Columns WHERE Table_Name='" +
                                    sheetname + "' AND Table_SChema='" + schemaName + "'" +
                                    "AND Column_Name IN (" + @excelHeaderColumn.ToString() + ") for xml path('')),1,1,'') AS ColumnList";
                                sqlCommand.CommandText = queryToGetMatchingColumns;
                                string matchedColumnsList = (string)sqlCommand.ExecuteScalar();
                                streamWriter.WriteLine("c) Matching columns with the existing table: " + matchedColumnsList);

                                SqlCommand clearExistingTableCommand = new SqlCommand(clearExistingTableQuery.ToString(), sqlConnection);
                                clearExistingTableCommand.ExecuteNonQuery();
                                streamWriter.WriteLine("--> Existing table is copied to the schema - " + backUpSchemaName);
                                
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForMatchedColumnsDataFromExcel = new OleDbCommand("select " + matchedColumnsList + " from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForMatchedColumnsData = new OleDbDataAdapter(oleDbCommandForMatchedColumnsDataFromExcel);
                                DataTable dataTableWithMatchedColumnsData = new DataTable();
                                oleDbDataAdapterForMatchedColumnsData.Fill(dataTableWithMatchedColumnsData);
                                oleDbConnectionWithoutExcelDataType.Close();

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = schemaName + "." + sheetname;
                                    foreach (var column in dataTableWithMatchedColumnsData.Columns)
                                        sqlBulkCopy.ColumnMappings.Add(column.ToString(), column.ToString());
                                    sqlBulkCopy.WriteToServer(dataTableWithMatchedColumnsData);
                                }
                                streamWriter.WriteLine("--> All the rows under above mentioned columns, from the sheet " + sheetname + ", were appended to the table " + "[" + schemaName + "].[" + sheetname + "]");
                            }
                            else
                            {
                                streamWriter.WriteLine("a) The table doesn't exist in the schema - " + schemaName);
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForAllDataFromExcel = new OleDbCommand("select * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForAllDataFromExcel = new OleDbDataAdapter(oleDbCommandForAllDataFromExcel);
                                DataTable dataTableForAllDataFromExcel = new DataTable();
                                oleDbDataAdapterForAllDataFromExcel.Fill(dataTableForAllDataFromExcel);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder createNewTableQuery = new StringBuilder();
                                createNewTableQuery.Append("Create table [" + schemaName + "].[" + sheetname + "]");
                                createNewTableQuery.Append("(");
                                int k = 0;
                                for (k = 0; k < dataTableForAllDataFromExcel.Columns.Count - 1; k++)
                                    createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max),");
                                createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max)");
                                createNewTableQuery.Append(");");

                                SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                                createNewTableCommand.ExecuteNonQuery();

                                streamWriter.WriteLine("--> A new table is created with all it's columns as nvarchar(max) - [" + schemaName + "].[" + sheetname + "]");

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[" + sheetname + "]";
                                    sqlBulkCopy.WriteToServer(dataTableForAllDataFromExcel);
                                }
                                streamWriter.WriteLine("--> All the rows from the sheet - " + sheetname + ", are copied to the table - [" + schemaName + "].[" + sheetname + "]");
                            }
                        }
                        streamWriter.WriteLine(); streamWriter.WriteLine();
                    }
                    streamWriter.WriteLine(); streamWriter.WriteLine();
                    File.Move(fileFullPath, archiveFolderPath + "\\" + (file.Name.Replace(sourceFolderPath, "")).Replace(fileExtension, "") + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + fileExtension);
                }
                streamWriter.Close();
                Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success;
            }

            catch (Exception exception)
            {
                using (StreamWriter sw = File.CreateText(Dts.Variables["User::ErrorLogFolderPath"].Value.ToString()
                    + "\\" + "ErrorLog_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".log"))
                {
                    sw.WriteLine("Help link for this exception: " + exception.HelpLink);
                    sw.WriteLine("Primary exception: " + exception.InnerException);
                    sw.WriteLine("Exception Message: " + exception.Message);
                    sw.WriteLine("Error Source: " + exception.Source);
                    sw.WriteLine("Current method which throws exception: " + exception.TargetSite);
                    sw.WriteLine("Code trace at the error point: ");
                    sw.WriteLine(exception.StackTrace);
                    Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure;
                }
            }
        }
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_22f67f5f4f6a442583760db1fdfb36a0.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{25c668bd-a783-4556-a8f3-620e8e56b6a6}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_22f67f5f4f6a442583760db1fdfb36a0</RootNamespace>
    <AssemblyName>ST_22f67f5f4f6a442583760db1fdfb36a0</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_22f67f5f4f6a442583760db1fdfb36a0</msb:CodeName>
		<msb:DisplayName>ST_22f67f5f4f6a442583760db1fdfb36a0</msb:DisplayName>
		<msb:ProjectId>{C94AD718-7837-4A9F-B633-32E32B52C937}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_22f67f5f4f6a442583760db1fdfb36a0.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Settings.get_Default():ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Sett" +
    "ings")]

namespace ST_22f67f5f4f6a442583760db1fdfb36a0.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_22f67f5f4f6a442583760db1fdfb36a0.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_22f67f5f4f6a442583760db1fdfb36a0.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_22f67f5f4f6a442583760db1fdfb36a0.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDADr6Q1sAAAAAAAAAAOAAIiALATAAACwAAAAIAAAAAAAA1ksA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIRLAABPAAAAAGAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA3CsAAAAgAAAALAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAYAAAAAYAAAAuAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAANAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAC4
SwAAAAAAAEgAAAACAAUAGCwAALQeAAABAAAAAAAAAMxKAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBwC/CgAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKAigQAAAKbxEAAApyLwAAcG8SAAAKbxMAAApvFAAACgsCKBAAAApvEQAACnJRAABw
bxIAAApvEwAACm8UAAAKDAIoEAAACm8RAAAKcn8AAHBvEgAACm8TAAAKbxQAAAoNAigQAAAKbxEA
AApyoQAAcG8SAAAKbxMAAApvFAAAChMEAigQAAAKbxEAAApy0QAAcG8SAAAKbxMAAApvFAAAChMF
AigQAAAKbxEAAApyBQEAcG8SAAAKbxMAAApvFAAAChMGAigQAAAKbxEAAApyLQEAcG8SAAAKbxMA
AApvFAAAChMHBnMVAAAKEwgRCG8WAAAKEwlyVQEAcBMKclUBAHATCygXAAAKEw4SDnJXAQBwKBgA
AAoTDByNKAAAASUWEQeiJRdydQEAcKIlGBEGoiUZcnkBAHCiJRoRDKIlG3J/AQBwoigZAAAKKBoA
AAoTDRENcokBAHARBnKnAQBwEQhvGwAACigcAAAKbx0AAAoRCRMPFhMQOAcIAAARDxEQmhMRERFv
GwAACnLjAQBwbx4AAAosIBERbxsAAApy4wEAcHJVAQBwbx8AAAomcuMBAHATCys0ERFvGwAACnLv
AQBwbx4AAAo5sQcAABERbxsAAApy7wEAcHJVAQBwbx8AAAomcu8BAHATCwZydQEAcBERbxsAAAoo
IAAAChMKcvkBAHARCnJXAgBwKCAAAApzIQAAChMSERJvIgAAChESfiMAAAoUbyQAAAoREm8lAAAK
EQ1yuQIAcBERbxsAAAooJgAACm8dAAAKclUBAHATE28nAAAKbygAAAoTFDiIBgAAERRvKQAACnQV
AAABExURFXLlAgBwbyoAAApvFAAACnL7AgBwbx4AAAo6WgYAABEVcuUCAHBvKgAACm8UAAAKch8D
AHBvHgAACjksBgAAERVy5QIAcG8qAAAKbxQAAApyHwMAcHJVAQBwbx8AAAoTExENciMDAHAREygm
AAAKbx0AAApzKwAAChMWAigQAAAKbywAAAoRBW8tAAAKAigQAAAKby4AAApvLwAACnUWAAABExYR
Fm8wAAAKExcbjSgAAAElFnJRAwBwoiUXB6IlGHLFAwBwoiUZEROiJRpyzQMAcKIoGQAAChMYERcR
GG8xAAAKclUBAHATGREXbzIAAAp0KAAAARMZERk5fAMAABEZbzMAAAo5cAMAABENG40oAAABJRZy
/QMAcKIlFweiJRhyxQMAcKIlGREToiUach0EAHCiKBkAAApvHQAACnM0AAAKExoRGnJBBABwCHKv
BABwKCAAAApvNQAACiYRGhuNKAAAASUWcrkEAHCiJRcIoiUYcvEEAHCiJRkJoiUachUFAHCiKBkA
AApvNQAACiYRGh8LjSgAAAElFnInBQBwoiUXCKIlGHLFAwBwoiUZEROiJRpyeQEAcKIlGygXAAAK
Ew4SDnJXAQBwKBgAAAqiJRxyRwUAcKIlHQeiJR5yxQMAcKIlHwkRE6IlHwpyWQUAcKIoGQAACm81
AAAKJhESbyIAAApyYQUAcBETco0FAHAoIAAAChESczYAAApzNwAACnM4AAAKExsRG285AAAKJhES
byUAAApzNAAAChMcFhMdKzARHHKTBQBwERtvOgAAChEdbzsAAApvPAAACnKXBQBwKCAAAApvNQAA
CiYRHRdYEx0RHREbbzoAAApvPQAAChdZMr4RHHKTBQBwERtvOgAAChEdbzsAAApvPAAACnKTBQBw
KCAAAApvNQAACiYRDXKdBQBwERxvFAAACigmAAAKbx0AAAodjSgAAAElFnLzBQBwoiUXEROiJRhy
sAYAcKIlGQeiJRpy2gYAcKIlGxEcbxQAAAqiJRxyBgcAcKIoGQAAChMeERcRHm8xAAAKERdvMgAA
CnQoAAABEx8RDXJaBwBwER8oJgAACm8dAAAKERpvFAAAChEWcz4AAApvPwAACiYRDXK2BwBwCCgm
AAAKbx0AAAoREm8iAAAKG40oAAABJRZyEggAcKIlFxEfoiUYciIIAHCiJRkRE6IlGnKNBQBwoigZ
AAAKERJzNgAACnM3AAAKczgAAAoTIBEgbzkAAAomERJvJQAAChEWc0AAAAoTIREhB3IyCABwERMo
IAAACm9BAAAKESBvOgAACm8oAAAKEyIrJBEibykAAAoTIxEhb0IAAAoRI28UAAAKESNvFAAACm9D
AAAKJhEib0QAAAot094VESJ1HAAAARMkESQsBxEkb0UAAArcESERIG9GAAAK3gwRISwHESFvRQAA
CtwRDR2NKAAAASUWcjYIAHCiJRcRE6IlGHK2CABwoiUZB6IlGnLFAwBwoiUbEROiJRxy9AgAcKIo
GQAACm8dAAAKOO8BAAARDXL4CABwBygmAAAKbx0AAAoREm8iAAAKclAJAHARE3KNBQBwKCAAAAoR
EnM2AAAKczcAAApzOAAAChMlESVvOQAACiYREm8lAAAKczQAAAoTJhEmG40oAAABJRZycAkAcKIl
FweiJRhyxQMAcKIlGREToiUacvQIAHCiKBkAAApvNQAACiYRJnKOCQBwbzUAAAomFhMnFhMnKzAR
JnKSCQBwESVvOgAAChEnbzsAAApvPAAACnKWCQBwKCAAAApvNQAACiYRJxdYEycRJxElbzoAAApv
PQAAChdZMr4RJnKSCQBwESVvOgAAChEnbzsAAApvPAAACnK4CQBwKCAAAApvNQAACiYRJnLYCQBw
bzUAAAomESZvFAAAChEWcz4AAApvPwAACiYRDRuNKAAAASUWct4JAHCiJRcHoiUYcsUDAHCiJRkR
E6IlGnL0CABwoigZAAAKbx0AAAoRFnNAAAAKEygRKBuNKAAAASUWcpIJAHCiJRcHoiUYcsUDAHCi
JRkRE6IlGnL0CABwoigZAAAKb0EAAAoRKBElb0YAAAreDBEoLAcRKG9FAAAK3BENHY0oAAABJRZy
awoAcKIlFxEToiUYcrEKAHCiJRkHoiUacsUDAHCiJRsRE6IlHHL0CABwoigZAAAKbx0AAAoRDW9H
AAAKEQ1vRwAAChEUb0QAAAo6bPn//94VERR1HAAAARMkESQsBxEkb0UAAArcEQ1vRwAAChENb0cA
AAoRChyNKAAAASUWEQSiJRdydQEAcKIlGBERbxsAAAoGclUBAHBvHwAAChELclUBAHBvHwAACqIl
GXJ5AQBwoiUaKBcAAAoTDhIOclcBAHAoGAAACqIlGxELoigZAAAKKEgAAAoREBdYExAREBEPjmk/
7vf//xENb0kAAAoCKBAAAAoWb0oAAArd+AAAABMpAigQAAAKbxEAAApy7QoAcG8SAAAKbxMAAApv
FAAACnIfCwBwKBcAAAoTDhIOclcBAHAoGAAACnJ/AQBwKBwAAAooGgAAChMqESpyNQsAcBEpb0sA
AAooJgAACm8dAAAKESpycwsAcBEpb0wAAAooTQAACm8dAAAKESpymwsAcBEpb04AAAooJgAACm8d
AAAKESpywwsAcBEpb08AAAooJgAACm8dAAAKESpy4QsAcBEpb1AAAAooTQAACm8dAAAKESpyMQwA
cG8dAAAKESoRKW9RAAAKbx0AAAoCKBAAAAoXb0oAAAreDBEqLAcRKm9FAAAK3N4AKgBBlAAAAgAA
AGoGAAAxAAAAmwYAABUAAAAAAAAAAgAAAEgGAABzAAAAuwYAAAwAAAAAAAAAAgAAAHEIAAA+AAAA
rwgAAAwAAAAAAAAAAgAAAHwCAACbBgAAFwkAABUAAAAAAAAAAgAAABAKAACgAAAAsAoAAAwAAAAA
AAAAAAAAAAAAAADGCQAAxgkAAPgAAAAdAAABHgIoUgAACioeAihTAAAKKq5+AQAABC0ecnEMAHDQ
AwAAAihUAAAKb1UAAApzVgAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKh4CKFcA
AAoqLnMIAAAGgAMAAAQqAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAADIBQAA
I34AADQGAAAQCQAAI1N0cmluZ3MAAAAARA8AAOQMAAAjVVMAKBwAABAAAAAjR1VJRAAAADgcAAB8
AgAAI0Jsb2IAAAAAAAAAAgAAAVcVogEJAQAAAPoBMwAWAAABAAAAPgAAAAQAAAADAAAACQAAAAEA
AABXAAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAAAAOgEAQAAAAAABgBiAx0HBgDx
Ax0HBgCuAgoHDwCRBwAABgDbAoYFBgBFA4YFBgAmA4YFBgDYA4YFBgCCA4YFBgCbA4YFBgDyAoYF
BgANAyQECgC2A5cECgD1AZcEBgBcBi4ABgA4Bi4ABgCsBi4ABgCKAR4FDgDiBWMABgDjBh4IDgDf
CFcADgAEBnsIDgCtAHsIBgB4BrAIDgARAVcADgD0CHsIBgBZCB4FBgAkAR4FBgAbBh4FBgCRAgoH
BgCKBj0HBgBBBmEFEgBSAtIEEgDCAtIEEgAsAkwFBgB2Ah0HCgDABJcEFgDaB5MBFgAbAZMBBgBZ
BB4FBgBUAS4ABgBNBi4ABgC5Bi4ADgDlBSUGDgCCAGMABgCNAB4FDgDQBVcADgARAlcAFgA1CJMB
FgCaBpMBDgCVACUGDgCSAGMADgDEBmMADgDHBiUGDgC7BVcADgBBBVcADgCYBXsIDgA+BHsIBgDq
AYYFBgC9AR4FBgAwAR4FBgDrCIYFAAAAACUAAAAAAAEAAQABABAANgUBADkAAQABAAAAEABEB6AH
bQABAAMAAAEQAAAIoAeNAAMABwARACUFgAERANoBhAERANYAiQFQIAAAAACGADwFBgABALArAAAA
AIYY/QYGAAEAuCsAAAAAgxj9BgYAAQDAKwAAAACTCIYGjQEBAOwrAAAAAJMIwgGSAQEA8ysAAAAA
kwjOAZgBAQD7KwAAAACWCGAInwECAAIsAAAAAIYY/QYGAAIACiwAAAAAkRgDB6QBAgAAAAEAGQQJ
AP0GAQARAP0GBgAZAP0GCgApAP0GEAAxAP0GEAA5AP0GEABBAP0GEABJAP0GEABRAP0GEABZAP0G
EABhAP0GEABpAP0GBgDxAP0GBgARAf0GFQAhAf0GBgBxAEEIYwApAdYHaQAxARUFbwA5AQ8EdgDZ
AFcEegB5AP0GEAB5AOQHfgCRANcIhACRAFcEiQBBAVIIjgBJAcwIlABRAVkBegBBAVIImgBZAbMB
EABBAQkIogBBAb8ApwBBAVIIrQCZAP0GEABhATEFBgBpAc8HtACZAP0AuQBhAUQCBgBBAVIIwwDJ
AEkIyQCBAe8GzwChAJEIdgCpABUF1ACxAP0GBgApATEI2QCJARUF3wApAXYFdgCRAfIF5gCxAJ8A
6wCZAbwIEACZAWoGdgBBAWAE8ADBAP0GBgDBALgA9AChAf0G+gCpAf0GAQHJAP0GBgCxARAFCAHJ
ABIIDgG5ARUFFAHBAXsBegCBAZ0I8AC5AP0GGwGZAQAJ8ADRAP0GIgHRAGIBEADRAO0HKAHJAX4A
LgGhAKcINgHhAEoCBgDRANUGOgFZAbMBBgBJAR8EQAFZAUQCBgApAWwIAQDpAGsEegDpABIGRgFB
AVIISwHpAPEAegDpAOYAegDpAGcCUQHpAMcAegBxAP0GBgDZAP0GBgDhAUIBVwHhAecIYAH5AP0G
ZgEZAf0GBgApAHMA4AEuAAsAuAEuABMAwQEuABsA4AEuACMA6QEuACsAEgIuADMAEgIuADsAEgIu
AEMA6QEuAEsAGAIuAFMAEgIuAFsALwJDAGMAdwJJAHMA4AFhAHsAdwJjAGsAdwIcAAMAAQAEAAMA
AACKBqgBAADiAa0BAABkCLMBAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAABsGjWHAAAA
AAAAAQAAAAQAAAAAAAAAAAAAAG4BdQAAAAAADAAAAAAAAAAAAAAAdwF4BAAAAAAEAAAAAAAAAAAA
AABuAVcAAAAAAAQAAAAAAAAAAAAAAG4BHgUAAAAADAAAAAAAAAAAAAAAdwE4AAAAAAAAAAAAAQAA
AE4HAAAAAAAAAFNUXzIyZjY3ZjVmNGY2YTQ0MjU4Mzc2MGRiMWZkZmIzNmEwADxNb2R1bGU+AFN5
c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAU3lzdGVtLkRhdGEAU3lzdGVt
LkRhdGEuT2xlRGIAbXNjb3JsaWIAQWRkAE9sZURiU2NoZW1hR3VpZABPbGVEYkNvbW1hbmQAQ3Jl
YXRlQ29tbWFuZABTcWxDb21tYW5kAEFwcGVuZABSZXBsYWNlAGdldF9TdGFja1RyYWNlAGRlZmF1
bHRJbnN0YW5jZQBnZXRfU291cmNlAGdldF9NZXNzYWdlAEdldE9sZURiU2NoZW1hVGFibGUARGF0
YVRhYmxlAFZhcmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9t
SGFuZGxlAEZpbGUAZ2V0X05hbWUAc2V0X0Rlc3RpbmF0aW9uVGFibGVOYW1lAGdldF9Db2x1bW5O
YW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAV3JpdGVMaW5lAFR5
cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAE1ldGhvZEJhc2UAVlNU
QVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxp
Y2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAZ2V0
X1RhcmdldFNpdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29k
ZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBB
c3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZy
YW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlE
ZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2Vt
Ymx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0
VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVD
b21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBNb3ZlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nAFRvU3RyaW5nAGdldF9MZW5ndGgA
Z2V0X0hlbHBMaW5rAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21w
b25lbnRNb2RlbABTVF8yMmY2N2Y1ZjRmNmE0NDI1ODM3NjBkYjFmZGZiMzZhMC5kbGwARmlsbABn
ZXRfSXRlbQBTeXN0ZW0AcmVzb3VyY2VNYW4AT3BlbgBTY3JpcHRNYWluAERhdGFDb2x1bW4AU3lz
dGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AZ2V0X1RyYW5zYWN0aW9uAFN5
c3RlbS5SZWZsZWN0aW9uAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZ0NvbGxlY3Rpb24ARGF0YUNv
bHVtbkNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AT2xlRGJDb25uZWN0aW9uAEFjcXVpcmVD
b25uZWN0aW9uAFNxbENvbm5lY3Rpb24AZ2V0X0lubmVyRXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNv
bW1vbgBGaWxlSW5mbwBDdWx0dXJlSW5mbwBGaWxlU3lzdGVtSW5mbwBEaXJlY3RvcnlJbmZvAEV4
ZWN1dGVTY2FsYXIAU3RyaW5nQnVpbGRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25N
YW5hZ2VyAFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVyAE9sZURiRGF0YUFkYXB0ZXIAV3JpdGVUb1Nl
cnZlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25v
c3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNU
XzIyZjY3ZjVmNGY2YTQ0MjU4Mzc2MGRiMWZkZmIzNmEwLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJl
c291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF8yMmY2N2Y1ZjRmNmE0NDI1ODM3NjBkYjFmZGZiMzZh
MC5Qcm9wZXJ0aWVzAFRhYmxlcwBnZXRfVmFyaWFibGVzAEdldEZpbGVzAGdldF9Db2x1bW5NYXBw
aW5ncwBTZXR0aW5ncwBDb250YWlucwBnZXRfQ29sdW1ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0
X0Nvbm5lY3Rpb25zAGdldF9EdHMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVjdABnZXRfRGVmYXVsdABz
ZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50
AE1vdmVOZXh0AFN5c3RlbS5UZXh0AHNldF9Db21tYW5kVGV4dABDcmVhdGVUZXh0AGdldF9Ob3cA
RGF0YVJvdwBnZXRfQXNzZW1ibHkAU3FsQnVsa0NvcHkARXhlY3V0ZU5vblF1ZXJ5AAAtVQBzAGUA
cgA6ADoAUwBvAHUAcgBjAGUARgBvAGwAZABlAHIAUABhAHQAaAAAIVUAcwBlAHIAOgA6AFMAYwBo
AGUAbQBhAE4AYQBtAGUAAC1VAHMAZQByADoAOgBCAGEAYwBrAFUAcABTAGMAaABlAG0AYQBOAGEA
bQBlAAAhUwB5AHMAdABlAG0AOgA6AFUAcwBlAHIATgBhAG0AZQAAL1UAcwBlAHIAOgA6AEEAcgBj
AGgAaQB2AGUARgBvAGwAZABlAHIAUABhAHQAaAAAM1UAcwBlAHIAOgA6AFMAcQBsAEMAbwBuAG4A
ZQBjAHQAaQBvAG4AUwB0AHIAaQBuAGcAACdTAHkAcwB0AGUAbQA6ADoAUABhAGMAawBhAGcAZQBO
AGEAbQBlAAAnVQBzAGUAcgA6ADoATABvAGcARgBvAGwAZABlAHIAUABhAHQAaAAAAQAdeQB5AHkA
eQBNAE0AZABkAEgASABtAG0AcwBzAAADXAAABV8AJAAACS4AbABvAGcAAB1UAGgAZQAgAHAAYQBj
AGsAYQBnAGUAIAAtACAAATssACAAaQBzACAAdwBvAHIAawBpAG4AZwAgAG8AbgAgAHQAaABlACAA
ZgBvAGwAZABlAHIAIAAtACAAAQsuAHgAbABzAHgAAAkuAHgAbABzAABdUAByAG8AdgBpAGQAZQBy
AD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAuAE8ATABFAEQAQgAuADEAMgAuADAAOwBEAGEA
dABhACAAUwBvAHUAcgBjAGUAPQAAYTsARQB4AHQAZQBuAGQAZQBkACAAUAByAG8AcABlAHIAdABp
AGUAcwA9ACIARQB4AGMAZQBsACAAMQAyAC4AMAA7AEgARABSAD0AWQBFAFMAOwBJAE0ARQBYAD0A
MQAiAAArVABoAGUAIABjAHUAcgByAGUAbgB0ACAAZgBpAGwAZQAgAGkAcwA6ACAAABVUAEEAQgBM
AEUAXwBOAEEATQBFAAAjXwBmAGkAbAB0AGUAcgBlAGQARABhAHQAYQBiAGEAcwBlAAADJAAALVQA
aABlACAAYwB1AHIAcgBlAG4AdAAgAHMAaABlAGUAdAAgAGkAcwA6ACAAAHNTAEUATABFAEMAVAAg
ACoAIABGAFIATwBNACAAcwB5AHMALgBvAGIAagBlAGMAdABzACAAVwBIAEUAUgBFACAAbwBiAGoA
ZQBjAHQAXwBpAGQAIAA9ACAATwBCAEoARQBDAFQAXwBJAEQAKABOACcAWwABB10ALgBbAAAvXQAn
ACkAIAAgAEEATgBEACAAdAB5AHAAZQAgAGkAbgAgACgATgAnAFUAJwApAAEfLQAtAD4AIABUAGgA
ZQAgAHQAYQBiAGwAZQAgAFsAASNdACAAYQBsAHIAZQBhAGQAeQAgAGUAeABpAHMAdABzACEAAG1J
AEYAKABOAE8AVAAgAEUAWABJAFMAVABTACgAUwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAHMA
eQBzAC4AcwBjAGgAZQBtAGEAcwAgAFcASABFAFIARQAgAG4AYQBtAGUAIAA9ACAAJwABCScAKQAp
ACAAATdCAEUARwBJAE4AIABFAFgARQBDACgAJwBDAFIARQBBAFQARQAgAFMAQwBIAEUATQBBACAA
WwABI10AIABBAFUAVABIAE8AUgBJAFoAQQBUAEkATwBOACAAWwAAEV0AJwApACAARQBOAEQAIAAB
H1MARQBMAEUAQwBUACAAKgAgAEkATgBUAE8AIABbAAARXQAgAEYAUgBPAE0AIABbAAAHXQA7ACAA
ACtzAGUAbABlAGMAdAAgAHQAbwBwACAAMQAgACoAIABmAHIAbwBtACAAWwAABSQAXQAAAycAAQUn
ACwAAVViACkAIABBAGMAdAB1AGEAbAAgAGMAbwBsAHUAbQBuAHMAIABpAG4AIABjAHUAcgByAGUA
bgB0ACAAZQB4AGMAZQBsACAAcwBoAGUAZQB0ADoAIAAAgLtTAEUATABFAEMAVAAgAFMAVABVAEYA
RgAoACgAUwBFAEwARQBDAFQAIAAgACcALABbACcAKwBDAG8AbAB1AG0AbgBfAE4AYQBtAGUAKwAn
AF0AJwAgAEYAUgBPAE0AIABJAG4AZgBvAHIAbQBhAHQAaQBvAG4AXwBzAGMAaABlAG0AYQAuAEMA
bwBsAHUAbQBuAHMAIABXAEgARQBSAEUAIABUAGEAYgBsAGUAXwBOAGEAbQBlAD0AJwABKScAIABB
AE4ARAAgAFQAYQBiAGwAZQBfAFMAQwBoAGUAbQBhAD0AJwABKycAQQBOAEQAIABDAG8AbAB1AG0A
bgBfAE4AYQBtAGUAIABJAE4AIAAoAAFTKQAgAGYAbwByACAAeABtAGwAIABwAGEAdABoACgAJwAn
ACkAKQAsADEALAAxACwAJwAnACkAIABBAFMAIABDAG8AbAB1AG0AbgBMAGkAcwB0AAFbYwApACAA
TQBhAHQAYwBoAGkAbgBnACAAYwBvAGwAdQBtAG4AcwAgAHcAaQB0AGgAIAB0AGgAZQAgAGUAeABp
AHMAdABpAG4AZwAgAHQAYQBiAGwAZQA6ACAAAFstAC0APgAgAEUAeABpAHMAdABpAG4AZwAgAHQA
YQBiAGwAZQAgAGkAcwAgAGMAbwBwAGkAZQBkACAAdABvACAAdABoAGUAIABzAGMAaABlAG0AYQAg
AC0AIAABD3MAZQBsAGUAYwB0ACAAAA8gAGYAcgBvAG0AIABbAAADLgAAfy0ALQA+ACAAQQBsAGwA
IAB0AGgAZQAgAHIAbwB3AHMAIAB1AG4AZABlAHIAIABhAGIAbwB2AGUAIABtAGUAbgB0AGkAbwBu
AGUAZAAgAGMAbwBsAHUAbQBuAHMALAAgAGYAcgBvAG0AIAB0AGgAZQAgAHMAaABlAGUAdAAgAAE9
LAAgAHcAZQByAGUAIABhAHAAcABlAG4AZABlAGQAIAB0AG8AIAB0AGgAZQAgAHQAYQBiAGwAZQAg
AFsAAANdAABXYQApACAAVABoAGUAIAB0AGEAYgBsAGUAIABkAG8AZQBzAG4AJwB0ACAAZQB4AGkA
cwB0ACAAaQBuACAAdABoAGUAIABzAGMAaABlAG0AYQAgAC0AIAABH3MAZQBsAGUAYwB0ACAAKgAg
AGYAcgBvAG0AIABbAAAdQwByAGUAYQB0AGUAIAB0AGEAYgBsAGUAIABbAAADKAAAA1sAACFdACAA
bgB2AGEAcgBjAGgAYQByACgAbQBhAHgAKQAsAAAfXQAgAG4AdgBhAHIAYwBoAGEAcgAoAG0AYQB4
ACkAAAUpADsAAICLLQAtAD4AIABBACAAbgBlAHcAIAB0AGEAYgBsAGUAIABpAHMAIABjAHIAZQBh
AHQAZQBkACAAdwBpAHQAaAAgAGEAbABsACAAaQB0ACcAcwAgAGMAbwBsAHUAbQBuAHMAIABhAHMA
IABuAHYAYQByAGMAaABhAHIAKABtAGEAeAApACAALQAgAFsAAUUtAC0APgAgAEEAbABsACAAdABo
AGUAIAByAG8AdwBzACAAZgByAG8AbQAgAHQAaABlACAAcwBoAGUAZQB0ACAALQAgAAE7LAAgAGEA
cgBlACAAYwBvAHAAaQBlAGQAIAB0AG8AIAB0AGgAZQAgAHQAYQBiAGwAZQAgAC0AIABbAAExVQBz
AGUAcgA6ADoARQByAHIAbwByAEwAbwBnAEYAbwBsAGQAZQByAFAAYQB0AGgAABVcAEUAcgByAG8A
cgBMAG8AZwBfAAA9SABlAGwAcAAgAGwAaQBuAGsAIABmAG8AcgAgAHQAaABpAHMAIABlAHgAYwBl
AHAAdABpAG8AbgA6ACAAACdQAHIAaQBtAGEAcgB5ACAAZQB4AGMAZQBwAHQAaQBvAG4AOgAgAAAn
RQB4AGMAZQBwAHQAaQBvAG4AIABNAGUAcwBzAGEAZwBlADoAIAAAHUUAcgByAG8AcgAgAFMAbwB1
AHIAYwBlADoAIAAAT0MAdQByAHIAZQBuAHQAIABtAGUAdABoAG8AZAAgAHcAaABpAGMAaAAgAHQA
aAByAG8AdwBzACAAZQB4AGMAZQBwAHQAaQBvAG4AOgAgAAA/QwBvAGQAZQAgAHQAcgBhAGMAZQAg
AGEAdAAgAHQAaABlACAAZQByAHIAbwByACAAcABvAGkAbgB0ADoAIAAAcVMAVABfADIAMgBmADYA
NwBmADUAZgA0AGYANgBhADQANAAyADUAOAAzADcANgAwAGQAYgAxAGYAZABmAGIAMwA2AGEAMAAu
AFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAACqISjyJWgxFj53yELCW
+HkABCABAQgDIAABBSABARERBCABAQ4GIAEBEYCFRgcrDg4ODg4ODg4SPR0SQQ4ODhJFEUkdEkEI
EkESTQ4SURJVElkSXQ4OEmESZRJhCA4OEmUSaRJRHBJxEmUSYQgSaRJ1EkUFIAASgJUFIAASgJkG
IAESgJ0cAyAAHAMgAA4FIAAdEkEEAAARSQQgAQ4OBQABDh0OBQABEkUOBwAEDg4ODg4EIAECDgUg
Ag4ODgYAAw4ODg4EBhGAuQkgAhJlEYC5HRwFAAIODg4FIAASgL0EIAASUQQgARwOBSAAEoDFBiAB
EoDJHAQgARwcBCAAEl0DIAAIBSABEmEOBiACAQ4STQYgAQESgNEFIAEIEmUFIAASgN0GIAESgOEI
BiACAQ4SWQUgAQESWQUgABKA5QcgAhKA6Q4OAyAAAgUgAQESZQUAAgEODgQgABJ1BQACDhwcBSAA
EoDtCAABEoDxEYD1BSAAEoD5ByACAQ4SgPkIt3pcVhk04IkIiYRdzYCAzJEDBhJ9BAYSgIEDBhIQ
BAAAEn0FAAASgIEGAAEBEoCBBAAAEhADAAABBAgAEn0FCAASgIEECAASEAgBAAgAAAAAAB4BAAEA
VAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfMjJmNjdmNWY0ZjZhNDQy
NTgzNzYwZGIxZmRmYjM2YTAAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOAAARwEAGi5ORVRG
cmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1l
d29yayA0BAEAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFk
ZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5
VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNl
dAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAArEsAAAAAAAAAAAAAxksAAAAgAAAAAAAAAAAAAAAAAAAA
AAAAAAAAALhLAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAA
gAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAA
AAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAA
AAEANYdsGgAAAQA1h2waPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYA
aQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMA
AAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAA
GgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAA
AAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwAyADIA
ZgA2ADcAZgA1AGYANABmADYAYQA0ADQAMgA1ADgAMwA3ADYAMABkAGIAMQBmAGQAZgBiADMANgBh
ADAAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANgA3ADYANAAuADMA
NAA2ADEAMwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAyADIAZgA2
ADcAZgA1AGYANABmADYAYQA0ADQAMgA1ADgAMwA3ADYAMABkAGIAMQBmAGQAZgBiADMANgBhADAA
LgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgACAAMgAwADEAOAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIA
awBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABf
ADIAMgBmADYANwBmADUAZgA0AGYANgBhADQANAAyADUAOAAzADcANgAwAGQAYgAxAGYAZABmAGIA
MwA2AGEAMAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwAy
ADIAZgA2ADcAZgA1AGYANABmADYAYQA0ADQAMgA1ADgAMwA3ADYAMABkAGIAMQBmAGQAZgBiADMA
NgBhADAAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANwA2
ADQALgAzADQANgAxADMAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADYANwA2ADQALgAzADQANgAxADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAA2DsAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="578,112" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
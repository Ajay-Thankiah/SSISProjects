<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/30/2018 7:23:27 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="AJAY"
  DTS:CreatorName="AJAY\Ajay"
  DTS:DTSID="{62D03B8D-0D3A-4090-B0C8-F1741C4744BB}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3002.106"
  DTS:LocaleID="16393"
  DTS:ObjectName="CreatePopulateTablesFromExcelSheets"
  DTS:PackageType="5"
  DTS:VersionBuild="25"
  DTS:VersionGUID="{E49DD578-CAD1-44C5-93EC-F7A83FACDDE6}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[60By25Development]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{AD2B27E8-333A-45EC-B604-883A1BE14CA4}"
      DTS:ObjectName="60By25Development">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=131.156.33.147;User ID=Census;Initial Catalog=60by25Development;Persist Security Info=True;Application Name=SSIS-CreatePopulateTablesFromExcelSheets-{AD2B27E8-333A-45EC-B604-883A1BE14CA4}131.156.33.147.60by25Development.Census;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAlt5GeNGP60eViP7tOYSANgAAAAAIAAAARABUAFMAAAAQZgAAAAEAACAAAABThzpvFArAuODI2P+h15EbF5d7ywv6DAq4SMj9WmT4MwAAAAAOgAAAAAIAACAAAADBiDYTDu9Y6ikjXVbAS3Gd/P8ZXw8YMLr9JSeatXz7cSAAAAAEXKZYzsTQISj2PXeaA6J9e8fpCaAKwQY1DQ5IP9LVi0AAAAD3vkx+EmNjiy4AoMSNk9GC5zBpRxYknLSagXyWheUhQ5t26xcakpJ4G8y5RQ+sIzQRmyUwP+f1yiMVTTyBbNIn</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3BAD4C5B-07EE-497F-8A25-9B01F6708ECF}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{55145AE1-D08D-4E9D-8401-C0ECBC6617B6}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BackUpSchemaName">
      <DTS:VariableValue
        DTS:DataType="8">archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{05A949AE-592C-43A9-99BC-4026AEB8AA34}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorLogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\ErrorLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{18D0E5B8-06AA-4A16-9060-28AD7A297081}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{354B1FEA-09C7-4F46-B989-0158E83AC16F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D0F73045-2656-41A8-8EED-40ADF7121437}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\DummyFolderForSSIS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2AA71816-1929-4415-897E-5FB91CC4D2A9}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SqlConnectionString">
      <DTS:VariableValue
        DTS:DataType="8">60By25Development</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{D936A7CD-0634-4F94-8B90-1A45CC5AC1F6}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_c6e77ca524b04c1f9b35fd5ba4b271bf"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ArchiveFolderPath,User::BackUpSchemaName,User::ErrorLogFolderPath,User::LogFolderPath,System::PackageName,User::SchemaName,User::SourceFolderPath,User::SqlConnectionString,System::UserName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7710FA30-79AA-497B-AEA8-2565E87EFB31}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</RootNamespace>
    <AssemblyName>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Settings.get_Default():ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Sett" +
    "ings")]

namespace ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[ using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Text;

namespace ST_c6e77ca524b04c1f9b35fd5ba4b271bf
{
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
		public void Main()
		{
            try
            {
                String sourceFolderPath = Dts.Variables["User::SourceFolderPath"].Value.ToString();
                String schemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                String backUpSchemaName = Dts.Variables["User::BackUpSchemaName"].Value.ToString();
                String userName = Dts.Variables["System::UserName"].Value.ToString();
                String archiveFolderPath = Dts.Variables["User::ArchiveFolderPath"].Value.ToString();
                String sqlConnectionString = Dts.Variables["User::SqlConnectionString"].Value.ToString();
                String packageName = Dts.Variables["System::PackageName"].Value.ToString();
                String logFolderPath = Dts.Variables["User::LogFolderPath"].Value.ToString();

                var directory = new DirectoryInfo(sourceFolderPath);
                FileInfo[] files = directory.GetFiles();
                string fileFullPath = "", fileExtension = "", filename = "";
                string logTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                StreamWriter streamWriter = File.CreateText(logFolderPath + "\\" + packageName + "_$" + logTime + ".log");

                streamWriter.WriteLine("The package - " + packageName + ", is working on the folder - " + directory.Name);
                foreach (FileInfo file in files)
                {
                    if (file.Name.Contains(".xlsx")) { filename = file.Name.Replace(".xlsx", ""); fileExtension = ".xlsx"; }
                    else if (file.Name.Contains(".xls")) { filename = file.Name.Replace(".xls", ""); fileExtension = ".xls"; }
                    else continue;
                    
                    fileFullPath = sourceFolderPath + "\\" + file.Name;

                    string connectionStringWithoutExcelDataType = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
                    OleDbConnection oleDbConnectionWithoutExcelDataType = new OleDbConnection(connectionStringWithoutExcelDataType);

                    oleDbConnectionWithoutExcelDataType.Open();
                    DataTable dataTableWithEachSheetInfo = oleDbConnectionWithoutExcelDataType.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    oleDbConnectionWithoutExcelDataType.Close();

                    streamWriter.WriteLine("The current file is: " + file.Name);

                    string sheetname = "";
                    foreach (DataRow dataRowWithCurrentSheetInfo in dataTableWithEachSheetInfo.Rows)
                    {
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("_filteredDatabase")) continue;
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("$"))
                        {
                            sheetname = dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Replace("$", "");

                            streamWriter.WriteLine("The current sheet is: " + sheetname);

                            SqlConnection sqlConnection = new SqlConnection();
                            sqlConnection = (SqlConnection)(Dts.Connections[sqlConnectionString].AcquireConnection(Dts.Transaction) as SqlConnection);

                            SqlCommand sqlCommand = sqlConnection.CreateCommand();
                            string checkTableAvailabilityQuery = "SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[" + schemaName + "].[" + sheetname + "]')  AND type in (N'U')";
                            sqlCommand.CommandText = checkTableAvailabilityQuery;
                            string resultOfTableAvailabilityCheck = "";
                            resultOfTableAvailabilityCheck = (string)sqlCommand.ExecuteScalar();

                            if (resultOfTableAvailabilityCheck !=null && resultOfTableAvailabilityCheck.Length != 0)
                            {
                                streamWriter.WriteLine("--> The table [" + schemaName +"].[" + sheetname + "] already exists!");
                                StringBuilder clearExistingTableQuery = new StringBuilder();
                                clearExistingTableQuery.Append("IF(NOT EXISTS(SELECT * FROM sys.schemas WHERE name = '" + backUpSchemaName + "')) ");
                                clearExistingTableQuery.Append("BEGIN EXEC('CREATE SCHEMA [" + backUpSchemaName + "] AUTHORIZATION [" + userName + "]') END ");
                                clearExistingTableQuery.Append("SELECT * INTO [" + backUpSchemaName + "].[" + sheetname + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + "] FROM [" + schemaName + "].[" + sheetname + "]; ");
                                clearExistingTableQuery.Append("DELETE FROM [" + schemaName + "].[" + sheetname + "]; ");

                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForColumnNames = new OleDbCommand("select top 1 * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForColumnNames = new OleDbDataAdapter(oleDbCommandForColumnNames);
                                DataTable dataTableForColumnNames = new DataTable();
                                oleDbDataAdapterForColumnNames.Fill(dataTableForColumnNames);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder excelHeaderColumn = new StringBuilder();
                                int i;
                                for (i = 0; i < dataTableForColumnNames.Columns.Count - 1; i++)
                                    excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'" + ",");
                                excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'");

                                streamWriter.WriteLine("b) Actual columns in current excel sheet: " + excelHeaderColumn.ToString());

                                string queryToGetMatchingColumns = "SELECT STUFF((SELECT  ',['+Column_Name+']' FROM Information_schema.Columns WHERE Table_Name='" +
                                    sheetname + "' AND Table_SChema='" + schemaName + "'" +
                                    "AND Column_Name IN (" + @excelHeaderColumn.ToString() + ") for xml path('')),1,1,'') AS ColumnList";
                                sqlCommand.CommandText = queryToGetMatchingColumns;
                                string matchedColumnsList = (string)sqlCommand.ExecuteScalar();
                                streamWriter.WriteLine("c) Matching columns with the existing table: " + matchedColumnsList);

                                SqlCommand clearExistingTableCommand = new SqlCommand(clearExistingTableQuery.ToString(), sqlConnection);
                                clearExistingTableCommand.ExecuteNonQuery();
                                streamWriter.WriteLine("--> Existing table is copied to the schema - " + backUpSchemaName);
                                streamWriter.WriteLine("--> Existing table's data are deleted from the schema - " + schemaName);

                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForMatchedColumnsDataFromExcel = new OleDbCommand("select " + matchedColumnsList + " from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForMatchedColumnsData = new OleDbDataAdapter(oleDbCommandForMatchedColumnsDataFromExcel);
                                DataTable dataTableWithMatchedColumnsData = new DataTable();
                                oleDbDataAdapterForMatchedColumnsData.Fill(dataTableWithMatchedColumnsData);
                                oleDbConnectionWithoutExcelDataType.Close();

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = schemaName + "." + sheetname;
                                    foreach (var column in dataTableWithMatchedColumnsData.Columns)
                                        sqlBulkCopy.ColumnMappings.Add(column.ToString(), column.ToString());
                                    sqlBulkCopy.WriteToServer(dataTableWithMatchedColumnsData);
                                }
                                streamWriter.WriteLine("--> All the rows under above mentioned columns, from the sheet " + sheetname + ", were copied to the table " + "[" + schemaName + "].[" + sheetname + "]");
                            }
                            else
                            {
                                streamWriter.WriteLine("a) The table doesn't exist in the schema - " + schemaName);
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForAllDataFromExcel = new OleDbCommand("select * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForAllDataFromExcel = new OleDbDataAdapter(oleDbCommandForAllDataFromExcel);
                                DataTable dataTableForAllDataFromExcel = new DataTable();
                                oleDbDataAdapterForAllDataFromExcel.Fill(dataTableForAllDataFromExcel);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder createNewTableQuery = new StringBuilder();
                                createNewTableQuery.Append("Create table [" + schemaName + "].[" + sheetname + "]");
                                createNewTableQuery.Append("(");
                                int k = 0;
                                for (k = 0; k < dataTableForAllDataFromExcel.Columns.Count - 1; k++)
                                    createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max),");
                                createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max)");
                                createNewTableQuery.Append(");");

                                SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                                createNewTableCommand.ExecuteNonQuery();

                                streamWriter.WriteLine("--> A new table is created with all it's columns as nvarchar(max) - [" + schemaName + "].[" + sheetname + "]");

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[" + sheetname + "]";
                                    sqlBulkCopy.WriteToServer(dataTableForAllDataFromExcel);
                                }
                                streamWriter.WriteLine("--> All the rows from the sheet - " + sheetname + ", are copied to the table - [" + schemaName + "].[" + sheetname + "]");
                            }
                        }
                        streamWriter.WriteLine(); streamWriter.WriteLine();
                    }
                    streamWriter.WriteLine(); streamWriter.WriteLine(); 
                    File.Move(fileFullPath, archiveFolderPath + "\\" + (file.Name.Replace(sourceFolderPath, "")).Replace(fileExtension, "") + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + fileExtension);
                }
                streamWriter.Close();
                Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success;
            }

            catch (Exception exception)
            {
                using (StreamWriter sw = File.CreateText(Dts.Variables["User::ErrorLogFolderPath"].Value.ToString()
                    + "\\" + "ErrorLog_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".log"))
                {
                    sw.WriteLine("Help link for this exception: "+exception.HelpLink);
                    sw.WriteLine("Primary exception: " + exception.InnerException);
                    sw.WriteLine("Exception Message: " + exception.Message);
                    sw.WriteLine("Error Source: " + exception.Source);
                    sw.WriteLine("Current method which throws exception: " + exception.TargetSite);
                    sw.WriteLine("Code trace at the error point: ");
                    sw.WriteLine(exception.StackTrace);
                    Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure;
                }
            }
        }
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</msb:DisplayName>
		<msb:ProjectId>{24C320D1-95F8-4591-9A00-80B600AD38E7}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_c6e77ca524b04c1f9b35fd5ba4b271bf")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_c6e77ca524b04c1f9b35fd5ba4b271bf")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAEtMOVsAAAAAAAAAAOAAIiALATAAAC4AAAAIAAAAAAAAqkwA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFhMAABPAAAAAGAAAGwEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAsCwAAAAgAAAALgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAGwEAAAAYAAAAAYAAAAwAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAANgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACM
TAAAAAAAAEgAAAACAAUAYCwAAEAfAAABAAAAAAAAAKBLAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBwAFCwAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKAigQAAAKbxEAAApyLwAAcG8SAAAKbxMAAApvFAAACgsCKBAAAApvEQAACnJRAABw
bxIAAApvEwAACm8UAAAKDAIoEAAACm8RAAAKcn8AAHBvEgAACm8TAAAKbxQAAAoNAigQAAAKbxEA
AApyoQAAcG8SAAAKbxMAAApvFAAAChMEAigQAAAKbxEAAApy0QAAcG8SAAAKbxMAAApvFAAAChMF
AigQAAAKbxEAAApyBQEAcG8SAAAKbxMAAApvFAAAChMGAigQAAAKbxEAAApyLQEAcG8SAAAKbxMA
AApvFAAAChMHBnMVAAAKEwgRCG8WAAAKEwlyVQEAcBMKclUBAHATCygXAAAKEw4SDnJXAQBwKBgA
AAoTDByNKAAAASUWEQeiJRdydQEAcKIlGBEGoiUZcnkBAHCiJRoRDKIlG3J/AQBwoigZAAAKKBoA
AAoTDRENcokBAHARBnKnAQBwEQhvGwAACigcAAAKbx0AAAoRCRMPFhMQOE0IAAARDxEQmhMRERFv
GwAACnLjAQBwbx4AAAosIBERbxsAAApy4wEAcHJVAQBwbx8AAAomcuMBAHATCys0ERFvGwAACnLv
AQBwbx4AAAo59wcAABERbxsAAApy7wEAcHJVAQBwbx8AAAomcu8BAHATCwZydQEAcBERbxsAAAoo
IAAAChMKcvkBAHARCnJXAgBwKCAAAApzIQAAChMSERJvIgAAChESfiMAAAoUbyQAAAoREm8lAAAK
EQ1yuQIAcBERbxsAAAooJgAACm8dAAAKclUBAHATE28nAAAKbygAAAoTFDjOBgAAERRvKQAACnQV
AAABExURFXLlAgBwbyoAAApvFAAACnL7AgBwbx4AAAo6oAYAABEVcuUCAHBvKgAACm8UAAAKch8D
AHBvHgAACjlyBgAAERVy5QIAcG8qAAAKbxQAAApyHwMAcHJVAQBwbx8AAAoTExENciMDAHAREygm
AAAKbx0AAApzKwAAChMWAigQAAAKbywAAAoRBW8tAAAKAigQAAAKby4AAApvLwAACnUWAAABExYR
Fm8wAAAKExcbjSgAAAElFnJRAwBwoiUXB6IlGHLFAwBwoiUZEROiJRpyzQMAcKIoGQAAChMYERcR
GG8xAAAKclUBAHATGREXbzIAAAp0KAAAARMZERk5wgMAABEZbzMAAAo5tgMAABENG40oAAABJRZy
/QMAcKIlFweiJRhyxQMAcKIlGREToiUach0EAHCiKBkAAApvHQAACnM0AAAKExoRGnJBBABwCHKv
BABwKCAAAApvNQAACiYRGhuNKAAAASUWcrkEAHCiJRcIoiUYcvEEAHCiJRkJoiUachUFAHCiKBkA
AApvNQAACiYRGh8LjSgAAAElFnInBQBwoiUXCKIlGHLFAwBwoiUZEROiJRpyeQEAcKIlGygXAAAK
Ew4SDnJXAQBwKBgAAAqiJRxyRwUAcKIlHQeiJR5yxQMAcKIlHwkRE6IlHwpyWQUAcKIoGQAACm81
AAAKJhEaG40oAAABJRZyYQUAcKIlFweiJRhyxQMAcKIlGREToiUaclkFAHCiKBkAAApvNQAACiYR
Em8iAAAKcn0FAHARE3KpBQBwKCAAAAoREnM2AAAKczcAAApzOAAAChMbERtvOQAACiYREm8lAAAK
czQAAAoTHBYTHSswERxyrwUAcBEbbzoAAAoRHW87AAAKbzwAAApyswUAcCggAAAKbzUAAAomER0X
WBMdER0RG286AAAKbz0AAAoXWTK+ERxyrwUAcBEbbzoAAAoRHW87AAAKbzwAAApyrwUAcCggAAAK
bzUAAAomEQ1yuQUAcBEcbxQAAAooJgAACm8dAAAKHY0oAAABJRZyDwYAcKIlFxEToiUYcswGAHCi
JRkHoiUacvYGAHCiJRsRHG8UAAAKoiUcciIHAHCiKBkAAAoTHhEXER5vMQAAChEXbzIAAAp0KAAA
ARMfEQ1ydgcAcBEfKCYAAApvHQAAChEabxQAAAoRFnM+AAAKbz8AAAomEQ1y0gcAcAgoJgAACm8d
AAAKEQ1yLggAcAcoJgAACm8dAAAKERJvIgAAChuNKAAAASUWcqAIAHCiJRcRH6IlGHKwCABwoiUZ
EROiJRpyqQUAcKIoGQAAChESczYAAApzNwAACnM4AAAKEyARIG85AAAKJhESbyUAAAoRFnNAAAAK
EyERIQdywAgAcBETKCAAAApvQQAAChEgbzoAAApvKAAAChMiKyQRIm8pAAAKEyMRIW9CAAAKESNv
FAAAChEjbxQAAApvQwAACiYRIm9EAAAKLdPeFREidRwAAAETJBEkLAcRJG9FAAAK3BEhESBvRgAA
Ct4MESEsBxEhb0UAAArcEQ0djSgAAAElFnLECABwoiUXEROiJRhyRAkAcKIlGQeiJRpyxQMAcKIl
GxEToiUccn4JAHCiKBkAAApvHQAACjjvAQAAEQ1yggkAcAcoJgAACm8dAAAKERJvIgAACnLaCQBw
ERNyqQUAcCggAAAKERJzNgAACnM3AAAKczgAAAoTJRElbzkAAAomERJvJQAACnM0AAAKEyYRJhuN
KAAAASUWcvoJAHCiJRcHoiUYcsUDAHCiJRkRE6IlGnJ+CQBwoigZAAAKbzUAAAomESZyGAoAcG81
AAAKJhYTJxYTJyswESZyHAoAcBElbzoAAAoRJ287AAAKbzwAAApyIAoAcCggAAAKbzUAAAomEScX
WBMnEScRJW86AAAKbz0AAAoXWTK+ESZyHAoAcBElbzoAAAoRJ287AAAKbzwAAApyQgoAcCggAAAK
bzUAAAomESZyYgoAcG81AAAKJhEmbxQAAAoRFnM+AAAKbz8AAAomEQ0bjSgAAAElFnJoCgBwoiUX
B6IlGHLFAwBwoiUZEROiJRpyfgkAcKIoGQAACm8dAAAKERZzQAAAChMoESgbjSgAAAElFnIcCgBw
oiUXB6IlGHLFAwBwoiUZEROiJRpyfgkAcKIoGQAACm9BAAAKESgRJW9GAAAK3gwRKCwHEShvRQAA
CtwRDR2NKAAAASUWcvUKAHCiJRcRE6IlGHI7CwBwoiUZB6IlGnLFAwBwoiUbEROiJRxyfgkAcKIo
GQAACm8dAAAKEQ1vRwAAChENb0cAAAoRFG9EAAAKOib5///eFREUdRwAAAETJBEkLAcRJG9FAAAK
3BENb0cAAAoRDW9HAAAKEQocjSgAAAElFhEEoiUXcnUBAHCiJRgREW8bAAAKBnJVAQBwbx8AAAoR
C3JVAQBwbx8AAAqiJRlyeQEAcKIlGigXAAAKEw4SDnJXAQBwKBgAAAqiJRsRC6IoGQAACihIAAAK
ERAXWBMQERARD45pP6j3//8RDW9JAAAKAigQAAAKFm9KAAAK3fgAAAATKQIoEAAACm8RAAAKcncL
AHBvEgAACm8TAAAKbxQAAApyqQsAcCgXAAAKEw4SDnJXAQBwKBgAAApyfwEAcCgcAAAKKBoAAAoT
KhEqcr8LAHARKW9LAAAKKCYAAApvHQAAChEqcv0LAHARKW9MAAAKKE0AAApvHQAAChEqciUMAHAR
KW9OAAAKKCYAAApvHQAAChEqck0MAHARKW9PAAAKKCYAAApvHQAAChEqcmsMAHARKW9QAAAKKE0A
AApvHQAAChEqcrsMAHBvHQAAChEqESlvUQAACm8dAAAKAigQAAAKF29KAAAK3gwRKiwHESpvRQAA
CtzeACoAAABBlAAAAgAAALAGAAAxAAAA4QYAABUAAAAAAAAAAgAAAI4GAABzAAAAAQcAAAwAAAAA
AAAAAgAAALcIAAA+AAAA9QgAAAwAAAAAAAAAAgAAAHwCAADhBgAAXQkAABUAAAAAAAAAAgAAAFYK
AACgAAAA9goAAAwAAAAAAAAAAAAAAAAAAAAMCgAADAoAAPgAAAAdAAABHgIoUgAACioeAihTAAAK
Kq5+AQAABC0ecvsMAHDQAwAAAihUAAAKb1UAAApzVgAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIA
AAQqGn4DAAAEKh4CKFcAAAoqLnMIAAAGgAMAAAQqAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMx
OQAAAAAFAGwAAADIBQAAI34AADQGAAAQCQAAI1N0cmluZ3MAAAAARA8AAHANAAAjVVMAtBwAABAA
AAAjR1VJRAAAAMQcAAB8AgAAI0Jsb2IAAAAAAAAAAgAAAVcVogEJAQAAAPoBMwAWAAABAAAAPgAA
AAQAAAADAAAACQAAAAEAAABXAAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAAAAOgE
AQAAAAAABgA+Ax0HBgDNAx0HBgCKAgoHDwCRBwAABgC3AoYFBgAhA4YFBgACA4YFBgC0A4YFBgBe
A4YFBgB3A4YFBgDOAoYFBgDpAiQECgCSA5cECgDRAZcEBgBcBgoABgA4BgoABgCsBgoABgBmAR4F
DgDiBT8ABgDjBh4IDgDfCDMADgAEBnsIDgCJAHsIBgB4BrAIDgDtADMADgD0CHsIBgBZCB4FBgAA
AR4FBgAbBh4FBgBtAgoHBgCKBj0HBgBBBmEFEgAuAtIEEgCeAtIEEgAIAkwFBgBSAh0HCgDABJcE
FgDaB28BFgD3AG8BBgBZBB4FBgAwAQoABgBNBgoABgC5BgoADgDlBSUGDgBeAD8ABgBpAB4FDgDQ
BTMADgDtATMAFgA1CG8BFgCaBm8BDgBxACUGDgBuAD8ADgDEBj8ADgDHBiUGDgC7BTMADgBBBTMA
DgCYBXsIDgA+BHsIBgDGAYYFBgCZAR4FBgAMAR4FBgDrCIYFAAAAAAEAAAAAAAEAAQABABAANgUA
BDkAAQABAAAAEABEB6AHbQABAAMAAAEQAAAIoAeNAAMABwARACUFgAERALYBhAERALIAiQFQIAAA
AACGADwFBgABAPgrAAAAAIYY/QYGAAEAACwAAAAAgxj9BgYAAQAILAAAAACTCIYGjQEBADQsAAAA
AJMIngGSAQEAOywAAAAAkwiqAZgBAQBDLAAAAACWCGAInwECAEosAAAAAIYY/QYGAAIAUiwAAAAA
kRgDB6QBAgAAAAEA9QMJAP0GAQARAP0GBgAZAP0GCgApAP0GEAAxAP0GEAA5AP0GEABBAP0GEABJ
AP0GEABRAP0GEABZAP0GEABhAP0GEABpAP0GBgDxAP0GBgARAf0GFQAhAf0GBgBxAEEIYwApAdYH
aQAxARUFbwA5AesDdgDZAFcEegB5AP0GEAB5AOQHfgCRANcIhACRAFcEiQBBAVIIjgBJAcwIlABR
ATUBegBBAVIImgBZAY8BEABBAQkIogBBAZsApwBBAVIIrQCZAP0GEABhATEFBgBpAc8HtACZANkA
uQBhASACBgBBAVIIwwDJAEkIyQCBAe8GzwChAJEIdgCpABUF1ACxAP0GBgApATEI2QCJARUF3wAp
AXYFdgCRAfIF5gCxAHsA6wCZAbwIEACZAWoGdgBBAWAE8ADBAP0GBgDBAJQA9AChAf0G+gCpAf0G
AQHJAP0GBgCxARAFCAHJABIIDgG5ARUFFAHBAVcBegCBAZ0I8AC5AP0GGwGZAQAJ8ADRAP0GIgHR
AD4BEADRAO0HKAHJAVoALgGhAKcINgHhACYCBgDRANUGOgFZAY8BBgBJAfsDQAFZASACBgApAWwI
AQDpAGsEegDpABIGRgFBAVIISwHpAM0AegDpAMIAegDpAEMCUQHpAKMAegBxAP0GBgDZAP0GBgDh
AR4BVwHhAecIYAH5AP0GZgEZAf0GBgApAHMA4AEuAAsAuAEuABMAwQEuABsA4AEuACMA6QEuACsA
EgIuADMAEgIuADsAEgIuAEMA6QEuAEsAGAIuAFMAEgIuAFsALwJDAGMAdwJJAHMA4AFhAHsAdwJj
AGsAdwIcAAMAAQAEAAMAAACKBqgBAAC+Aa0BAABkCLMBAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcA
BIAAAAEAAABlGk8XAAAAAAAAAAQAAAQAAAAAAAAAAAAAAG4BUQAAAAAADAAAAAAAAAAAAAAAdwF4
BAAAAAAEAAAAAAAAAAAAAABuATMAAAAAAAQAAAAAAAAAAAAAAG4BHgUAAAAADAAAAAAAAAAAAAAA
dwEUAAAAAAAAAAAAAQAAAE4HAAAAAAAAADxNb2R1bGU+AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3Fs
U2VydmVyLk1hbmFnZWREVFMAU3lzdGVtLkRhdGEAU3lzdGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIA
QWRkAE9sZURiU2NoZW1hR3VpZABPbGVEYkNvbW1hbmQAQ3JlYXRlQ29tbWFuZABTcWxDb21tYW5k
AEFwcGVuZABSZXBsYWNlAGdldF9TdGFja1RyYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfU291cmNl
AGdldF9NZXNzYWdlAEdldE9sZURiU2NoZW1hVGFibGUARGF0YVRhYmxlAFZhcmlhYmxlAElEaXNw
b3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZpbGUAZ2V0X05hbWUA
c2V0X0Rlc3RpbmF0aW9uVGFibGVOYW1lAGdldF9Db2x1bW5OYW1lAERhdGVUaW1lAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAV3JpdGVMaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1
bHR1cmUAcmVzb3VyY2VDdWx0dXJlAE1ldGhvZEJhc2UAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxC
YXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENs
b3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAZ2V0X1RhcmdldFNpdGUAQ29tcGlsZXJH
ZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxl
QXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRl
AEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3Nl
bWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBD
b21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBB
c3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1
dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRl
AGdldF9WYWx1ZQB2YWx1ZQBNb3ZlAFNUX2M2ZTc3Y2E1MjRiMDRjMWY5YjM1ZmQ1YmE0YjI3MWJm
AFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nAFRvU3Ry
aW5nAGdldF9MZW5ndGgAZ2V0X0hlbHBMaW5rAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFz
awBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1v
ZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF9jNmU3N2NhNTI0YjA0YzFmOWIzNWZkNWJhNGIy
NzFiZi5kbGwARmlsbABnZXRfSXRlbQBTeXN0ZW0AcmVzb3VyY2VNYW4AT3BlbgBTY3JpcHRNYWlu
AERhdGFDb2x1bW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AZ2V0
X1RyYW5zYWN0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZ0Nv
bGxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AT2xlRGJDb25u
ZWN0aW9uAEFjcXVpcmVDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24AZ2V0X0lubmVyRXhjZXB0aW9u
AFN5c3RlbS5EYXRhLkNvbW1vbgBGaWxlSW5mbwBDdWx0dXJlSW5mbwBGaWxlU3lzdGVtSW5mbwBE
aXJlY3RvcnlJbmZvAEV4ZWN1dGVTY2FsYXIAU3RyaW5nQnVpbGRlcgBnZXRfUmVzb3VyY2VNYW5h
Z2VyAENvbm5lY3Rpb25NYW5hZ2VyAFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVyAE9sZURiRGF0YUFk
YXB0ZXIAV3JpdGVUb1NlcnZlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3Rv
cgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0
ZW0uUmVzb3VyY2VzAFNUX2M2ZTc3Y2E1MjRiMDRjMWY5YjM1ZmQ1YmE0YjI3MWJmLlByb3BlcnRp
ZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9jNmU3N2NhNTI0YjA0YzFm
OWIzNWZkNWJhNGIyNzFiZi5Qcm9wZXJ0aWVzAFRhYmxlcwBnZXRfVmFyaWFibGVzAEdldEZpbGVz
AGdldF9Db2x1bW5NYXBwaW5ncwBTZXR0aW5ncwBDb250YWlucwBnZXRfQ29sdW1ucwBTeXN0ZW0u
Q29sbGVjdGlvbnMAZ2V0X0Nvbm5lY3Rpb25zAGdldF9EdHMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVj
dABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1
cnJlbnQAZ2V0X0NvdW50AE1vdmVOZXh0AFN5c3RlbS5UZXh0AHNldF9Db21tYW5kVGV4dABDcmVh
dGVUZXh0AGdldF9Ob3cARGF0YVJvdwBnZXRfQXNzZW1ibHkAU3FsQnVsa0NvcHkARXhlY3V0ZU5v
blF1ZXJ5AAAtVQBzAGUAcgA6ADoAUwBvAHUAcgBjAGUARgBvAGwAZABlAHIAUABhAHQAaAAAIVUA
cwBlAHIAOgA6AFMAYwBoAGUAbQBhAE4AYQBtAGUAAC1VAHMAZQByADoAOgBCAGEAYwBrAFUAcABT
AGMAaABlAG0AYQBOAGEAbQBlAAAhUwB5AHMAdABlAG0AOgA6AFUAcwBlAHIATgBhAG0AZQAAL1UA
cwBlAHIAOgA6AEEAcgBjAGgAaQB2AGUARgBvAGwAZABlAHIAUABhAHQAaAAAM1UAcwBlAHIAOgA6
AFMAcQBsAEMAbwBuAG4AZQBjAHQAaQBvAG4AUwB0AHIAaQBuAGcAACdTAHkAcwB0AGUAbQA6ADoA
UABhAGMAawBhAGcAZQBOAGEAbQBlAAAnVQBzAGUAcgA6ADoATABvAGcARgBvAGwAZABlAHIAUABh
AHQAaAAAAQAdeQB5AHkAeQBNAE0AZABkAEgASABtAG0AcwBzAAADXAAABV8AJAAACS4AbABvAGcA
AB1UAGgAZQAgAHAAYQBjAGsAYQBnAGUAIAAtACAAATssACAAaQBzACAAdwBvAHIAawBpAG4AZwAg
AG8AbgAgAHQAaABlACAAZgBvAGwAZABlAHIAIAAtACAAAQsuAHgAbABzAHgAAAkuAHgAbABzAABd
UAByAG8AdgBpAGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAuAE8ATABFAEQAQgAu
ADEAMgAuADAAOwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAAYTsARQB4AHQAZQBuAGQAZQBkACAA
UAByAG8AcABlAHIAdABpAGUAcwA9ACIARQB4AGMAZQBsACAAMQAyAC4AMAA7AEgARABSAD0AWQBF
AFMAOwBJAE0ARQBYAD0AMQAiAAArVABoAGUAIABjAHUAcgByAGUAbgB0ACAAZgBpAGwAZQAgAGkA
cwA6ACAAABVUAEEAQgBMAEUAXwBOAEEATQBFAAAjXwBmAGkAbAB0AGUAcgBlAGQARABhAHQAYQBi
AGEAcwBlAAADJAAALVQAaABlACAAYwB1AHIAcgBlAG4AdAAgAHMAaABlAGUAdAAgAGkAcwA6ACAA
AHNTAEUATABFAEMAVAAgACoAIABGAFIATwBNACAAcwB5AHMALgBvAGIAagBlAGMAdABzACAAVwBI
AEUAUgBFACAAbwBiAGoAZQBjAHQAXwBpAGQAIAA9ACAATwBCAEoARQBDAFQAXwBJAEQAKABOACcA
WwABB10ALgBbAAAvXQAnACkAIAAgAEEATgBEACAAdAB5AHAAZQAgAGkAbgAgACgATgAnAFUAJwAp
AAEfLQAtAD4AIABUAGgAZQAgAHQAYQBiAGwAZQAgAFsAASNdACAAYQBsAHIAZQBhAGQAeQAgAGUA
eABpAHMAdABzACEAAG1JAEYAKABOAE8AVAAgAEUAWABJAFMAVABTACgAUwBFAEwARQBDAFQAIAAq
ACAARgBSAE8ATQAgAHMAeQBzAC4AcwBjAGgAZQBtAGEAcwAgAFcASABFAFIARQAgAG4AYQBtAGUA
IAA9ACAAJwABCScAKQApACAAATdCAEUARwBJAE4AIABFAFgARQBDACgAJwBDAFIARQBBAFQARQAg
AFMAQwBIAEUATQBBACAAWwABI10AIABBAFUAVABIAE8AUgBJAFoAQQBUAEkATwBOACAAWwAAEV0A
JwApACAARQBOAEQAIAABH1MARQBMAEUAQwBUACAAKgAgAEkATgBUAE8AIABbAAARXQAgAEYAUgBP
AE0AIABbAAAHXQA7ACAAABtEAEUATABFAFQARQAgAEYAUgBPAE0AIABbAAArcwBlAGwAZQBjAHQA
IAB0AG8AcAAgADEAIAAqACAAZgByAG8AbQAgAFsAAAUkAF0AAAMnAAEFJwAsAAFVYgApACAAQQBj
AHQAdQBhAGwAIABjAG8AbAB1AG0AbgBzACAAaQBuACAAYwB1AHIAcgBlAG4AdAAgAGUAeABjAGUA
bAAgAHMAaABlAGUAdAA6ACAAAIC7UwBFAEwARQBDAFQAIABTAFQAVQBGAEYAKAAoAFMARQBMAEUA
QwBUACAAIAAnACwAWwAnACsAQwBvAGwAdQBtAG4AXwBOAGEAbQBlACsAJwBdACcAIABGAFIATwBN
ACAASQBuAGYAbwByAG0AYQB0AGkAbwBuAF8AcwBjAGgAZQBtAGEALgBDAG8AbAB1AG0AbgBzACAA
VwBIAEUAUgBFACAAVABhAGIAbABlAF8ATgBhAG0AZQA9ACcAASknACAAQQBOAEQAIABUAGEAYgBs
AGUAXwBTAEMAaABlAG0AYQA9ACcAASsnAEEATgBEACAAQwBvAGwAdQBtAG4AXwBOAGEAbQBlACAA
SQBOACAAKAABUykAIABmAG8AcgAgAHgAbQBsACAAcABhAHQAaAAoACcAJwApACkALAAxACwAMQAs
ACcAJwApACAAQQBTACAAQwBvAGwAdQBtAG4ATABpAHMAdAABW2MAKQAgAE0AYQB0AGMAaABpAG4A
ZwAgAGMAbwBsAHUAbQBuAHMAIAB3AGkAdABoACAAdABoAGUAIABlAHgAaQBzAHQAaQBuAGcAIAB0
AGEAYgBsAGUAOgAgAABbLQAtAD4AIABFAHgAaQBzAHQAaQBuAGcAIAB0AGEAYgBsAGUAIABpAHMA
IABjAG8AcABpAGUAZAAgAHQAbwAgAHQAaABlACAAcwBjAGgAZQBtAGEAIAAtACAAAXEtAC0APgAg
AEUAeABpAHMAdABpAG4AZwAgAHQAYQBiAGwAZQAnAHMAIABkAGEAdABhACAAYQByAGUAIABkAGUA
bABlAHQAZQBkACAAZgByAG8AbQAgAHQAaABlACAAcwBjAGgAZQBtAGEAIAAtACAAAQ9zAGUAbABl
AGMAdAAgAAAPIABmAHIAbwBtACAAWwAAAy4AAH8tAC0APgAgAEEAbABsACAAdABoAGUAIAByAG8A
dwBzACAAdQBuAGQAZQByACAAYQBiAG8AdgBlACAAbQBlAG4AdABpAG8AbgBlAGQAIABjAG8AbAB1
AG0AbgBzACwAIABmAHIAbwBtACAAdABoAGUAIABzAGgAZQBlAHQAIAABOSwAIAB3AGUAcgBlACAA
YwBvAHAAaQBlAGQAIAB0AG8AIAB0AGgAZQAgAHQAYQBiAGwAZQAgAFsAAANdAABXYQApACAAVABo
AGUAIAB0AGEAYgBsAGUAIABkAG8AZQBzAG4AJwB0ACAAZQB4AGkAcwB0ACAAaQBuACAAdABoAGUA
IABzAGMAaABlAG0AYQAgAC0AIAABH3MAZQBsAGUAYwB0ACAAKgAgAGYAcgBvAG0AIABbAAAdQwBy
AGUAYQB0AGUAIAB0AGEAYgBsAGUAIABbAAADKAAAA1sAACFdACAAbgB2AGEAcgBjAGgAYQByACgA
bQBhAHgAKQAsAAAfXQAgAG4AdgBhAHIAYwBoAGEAcgAoAG0AYQB4ACkAAAUpADsAAICLLQAtAD4A
IABBACAAbgBlAHcAIAB0AGEAYgBsAGUAIABpAHMAIABjAHIAZQBhAHQAZQBkACAAdwBpAHQAaAAg
AGEAbABsACAAaQB0ACcAcwAgAGMAbwBsAHUAbQBuAHMAIABhAHMAIABuAHYAYQByAGMAaABhAHIA
KABtAGEAeAApACAALQAgAFsAAUUtAC0APgAgAEEAbABsACAAdABoAGUAIAByAG8AdwBzACAAZgBy
AG8AbQAgAHQAaABlACAAcwBoAGUAZQB0ACAALQAgAAE7LAAgAGEAcgBlACAAYwBvAHAAaQBlAGQA
IAB0AG8AIAB0AGgAZQAgAHQAYQBiAGwAZQAgAC0AIABbAAExVQBzAGUAcgA6ADoARQByAHIAbwBy
AEwAbwBnAEYAbwBsAGQAZQByAFAAYQB0AGgAABVcAEUAcgByAG8AcgBMAG8AZwBfAAA9SABlAGwA
cAAgAGwAaQBuAGsAIABmAG8AcgAgAHQAaABpAHMAIABlAHgAYwBlAHAAdABpAG8AbgA6ACAAACdQ
AHIAaQBtAGEAcgB5ACAAZQB4AGMAZQBwAHQAaQBvAG4AOgAgAAAnRQB4AGMAZQBwAHQAaQBvAG4A
IABNAGUAcwBzAGEAZwBlADoAIAAAHUUAcgByAG8AcgAgAFMAbwB1AHIAYwBlADoAIAAAT0MAdQBy
AHIAZQBuAHQAIABtAGUAdABoAG8AZAAgAHcAaABpAGMAaAAgAHQAaAByAG8AdwBzACAAZQB4AGMA
ZQBwAHQAaQBvAG4AOgAgAAA/QwBvAGQAZQAgAHQAcgBhAGMAZQAgAGEAdAAgAHQAaABlACAAZQBy
AHIAbwByACAAcABvAGkAbgB0ADoAIAAAcVMAVABfAGMANgBlADcANwBjAGEANQAyADQAYgAwADQA
YwAxAGYAOQBiADMANQBmAGQANQBiAGEANABiADIANwAxAGIAZgAuAFAAcgBvAHAAZQByAHQAaQBl
AHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAAyJiIy0xv/kqJSW935xxZGAAEIAEBCAMgAAEFIAEB
EREEIAEBDgYgAQERgIVGBysODg4ODg4ODhI9HRJBDg4OEkURSR0SQQgSQRJNDhJRElUSWRJdDg4S
YRJlEmEIDg4SZRJpElEcEnESZRJhCBJpEnUSRQUgABKAlQUgABKAmQYgARKAnRwDIAAcAyAADgUg
AB0SQQQAABFJBCABDg4FAAEOHQ4FAAESRQ4HAAQODg4ODgQgAQIOBSACDg4OBgADDg4ODgQGEYC5
CSACEmURgLkdHAUAAg4ODgUgABKAvQQgABJRBCABHA4FIAASgMUGIAESgMkcBCABHBwEIAASXQMg
AAgFIAESYQ4GIAIBDhJNBiABARKA0QUgAQgSZQUgABKA3QYgARKA4QgGIAIBDhJZBSABARJZBSAA
EoDlByACEoDpDg4DIAACBSABARJlBQACAQ4OBCAAEnUFAAIOHBwFIAASgO0IAAESgPERgPUFIAAS
gPkHIAIBDhKA+Qi3elxWGTTgiQiJhF3NgIDMkQMGEn0EBhKAgQMGEhAEAAASfQUAABKAgQYAAQES
gIEEAAASEAMAAAEECAASfQUIABKAgQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0
aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF9jNmU3N2NhNTI0YjA0YzFmOWIzNWZkNWJhNGIyNzFi
ZgAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE4AABHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9u
PXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQEAQAAALQAAADO
yu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZl
cnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5
MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFE
UEFEULQAAACATAAAAAAAAAAAAACaTAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjEwAAAAAAAAA
AAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACA
AAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAABAEAAAA
AAAAAAAAABAENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAA
AQBPF2UaAAABAE8XZRo/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBp
AGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARwAwAA
AQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABMAwAAAQAwADAAMAAwADAANABiADAAAAAa
AAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAA
AAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfAGMANgBl
ADcANwBjAGEANQAyADQAYgAwADQAYwAxAGYAOQBiADMANQBmAGQANQBiAGEANABiADIANwAxAGIA
ZgAAADwADgABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA2ADcANQA3AC4ANQA5
ADYANwAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYwA2AGUANwA3AGMA
YQA1ADIANABiADAANABjADEAZgA5AGIAMwA1AGYAZAA1AGIAYQA0AGIAMgA3ADEAYgBmAC4AZABs
AGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgA
dAAgAEAAIAAgADIAMAAxADgAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAA
AAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBjADYA
ZQA3ADcAYwBhADUAMgA0AGIAMAA0AGMAMQBmADkAYgAzADUAZgBkADUAYgBhADQAYgAyADcAMQBi
AGYALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AYwA2AGUA
NwA3AGMAYQA1ADIANABiADAANABjADEAZgA5AGIAMwA1AGYAZAA1AGIAYQA0AGIAMgA3ADEAYgBm
AAAAQAAOAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADcANQA3AC4A
NQA5ADYANwAAAEQADgABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADYANwA1ADcALgA1ADkANgA3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAACsPAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="326,90" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
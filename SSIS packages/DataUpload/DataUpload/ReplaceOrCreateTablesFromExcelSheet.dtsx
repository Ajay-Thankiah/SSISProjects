<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/10/2018 1:37:16 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CGSUDAY"
  DTS:CreatorName="NIUNT\A1809750"
  DTS:DTSID="{A548331E-AD3B-4940-8500-A24D351296D5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3008.28"
  DTS:LocaleID="1033"
  DTS:ObjectName="ReplaceOrCreateTablesFromExcelSheet"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="32"
  DTS:VersionGUID="{8761BBBD-5B60-4378-812A-0D2EE198C7B4}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLEDBConnection]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{D0EFC7AE-20C9-49A1-AC62-7CFFF36B610E}"
      DTS:ObjectName="OLEDBConnection">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">"Data Source="+@[User::ServerName]+";User ID="+@[User::LoginName]+";Password="+@[User::LoginPassword]+";Initial Catalog="+@[User::DatabaseName]+";Application Name=SSIS-AppendToTablesFromExcelSheets-{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}"+@[User::ServerName]+"."+@[User::DatabaseName]+"."+@[User::LoginName]+";"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=131.156.33.147;User ID=sa;Initial Catalog=60by25Development;Application Name=SSIS-AppendToTablesFromExcelSheets-{96242ECF-A3CB-4AC0-9D82-3804AC5834C8}131.156.33.147.60by25Development.sa;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F24C92AB-45FD-49BC-9D8C-A2FC63465394}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ArchiveFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0743432E-FDE4-4676-9DE4-914C5EFF2DC4}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::BackUpSchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BackUpSchemaName">
      <DTS:VariableValue
        DTS:DataType="8">archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BAD74B5A-3C63-43DE-BC78-F96EC12D87D8}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::DatabaseName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DatabaseName">
      <DTS:VariableValue
        DTS:DataType="8">60by25Development</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{04EE4A19-D911-4684-9524-4A66C7A67686}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ErrorLogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorLogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\ErrorLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B8A45730-92B5-41BD-B997-44DB7560D972}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A9C62471-F24D-4E95-9F24-164175B2A498}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginName">
      <DTS:VariableValue
        DTS:DataType="8">sa</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EBDCE415-870A-48C8-85B8-845E3F0DBCEC}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginPassword]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginPassword">
      <DTS:VariableValue
        DTS:DataType="8">cgstestSQL2013</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{96FDB670-704E-442A-A08D-FEEB9124CADA}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ReplaceSourceFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ReplaceSourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\DummyFolderForSSIS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5E3BB2B3-5409-4C51-89DE-06F625357A19}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::SchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{99F6CF52-BC48-42C9-9C0E-261DA5D08105}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ServerName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ServerName">
      <DTS:VariableValue
        DTS:DataType="8">131.156.33.147</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{22367A18-73B2-4ACA-8E56-5F87009F327A}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_7b826b4e4bcc43aabef520aa583ce374"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ArchiveFolderPath,User::BackUpSchemaName,User::ErrorLogFolderPath,User::LogFolderPath,System::PackageName,User::ReplaceSourceFolderPath,User::SchemaName,System::UserName">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;
using System.Data.OleDb;
using System.Text;
#endregion

namespace ST_7b826b4e4bcc43aabef520aa583ce374
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                String sourceFolderPath = Dts.Variables["User::ReplaceSourceFolderPath"].Value.ToString();
                String schemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                String backUpSchemaName = Dts.Variables["User::BackUpSchemaName"].Value.ToString();
                String userName = Dts.Variables["System::UserName"].Value.ToString();
                String archiveFolderPath = Dts.Variables["User::ArchiveFolderPath"].Value.ToString();
                String packageName = Dts.Variables["System::PackageName"].Value.ToString();
                String logFolderPath = Dts.Variables["User::LogFolderPath"].Value.ToString();

                var directory = new DirectoryInfo(sourceFolderPath);
                FileInfo[] files = directory.GetFiles();
                string fileFullPath = "", fileExtension = "", filename = "";
                string logTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                StreamWriter streamWriter = File.CreateText(logFolderPath + "\\" + packageName + "_$" + logTime + ".log");

                streamWriter.WriteLine("The package - " + packageName + ", is working on the folder - " + directory.Name);
                foreach (FileInfo file in files)
                {
                    if (file.Name.Contains(".xlsx")) { filename = file.Name.Replace(".xlsx", ""); fileExtension = ".xlsx"; }
                    else if (file.Name.Contains(".xls")) { filename = file.Name.Replace(".xls", ""); fileExtension = ".xls"; }
                    else continue;

                    fileFullPath = sourceFolderPath + "\\" + file.Name;

                    string connectionStringWithoutExcelDataType = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
                    OleDbConnection oleDbConnectionWithoutExcelDataType = new OleDbConnection(connectionStringWithoutExcelDataType);

                    oleDbConnectionWithoutExcelDataType.Open();
                    DataTable dataTableWithEachSheetInfo = oleDbConnectionWithoutExcelDataType.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    oleDbConnectionWithoutExcelDataType.Close();

                    streamWriter.WriteLine("The current file is: " + file.Name);

                    string sheetname = "";
                    foreach (DataRow dataRowWithCurrentSheetInfo in dataTableWithEachSheetInfo.Rows)
                    {
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("_FilterDatabase")) continue;
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("$"))
                        {
                            sheetname = dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Replace("$", "");

                            streamWriter.WriteLine("The current sheet is: " + sheetname);

                            SqlConnection sqlConnection = new SqlConnection();
                            sqlConnection = (SqlConnection)(Dts.Connections["OLEDBConnection"].AcquireConnection(Dts.Transaction) as SqlConnection);

                            SqlCommand sqlCommand = sqlConnection.CreateCommand();
                            string checkTableAvailabilityQuery = "SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[" + schemaName + "].[" + sheetname + "]')  AND type in (N'U')";
                            sqlCommand.CommandText = checkTableAvailabilityQuery;
                            string resultOfTableAvailabilityCheck = "";
                            resultOfTableAvailabilityCheck = (string)sqlCommand.ExecuteScalar();

                            if (resultOfTableAvailabilityCheck != null && resultOfTableAvailabilityCheck.Length != 0)
                            {
                                streamWriter.WriteLine("--> The table [" + schemaName + "].[" + sheetname + "] already exists!");
                                StringBuilder clearExistingTableQuery = new StringBuilder();
                                clearExistingTableQuery.Append("IF(NOT EXISTS(SELECT * FROM sys.schemas WHERE name = '" + backUpSchemaName + "')) ");
                                clearExistingTableQuery.Append("BEGIN EXEC('CREATE SCHEMA [" + backUpSchemaName + "] AUTHORIZATION [" + userName + "]') END ");
                                clearExistingTableQuery.Append("SELECT * INTO [" + backUpSchemaName + "].[" + sheetname + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + "] FROM [" + schemaName + "].[" + sheetname + "]; ");
                                clearExistingTableQuery.Append("DROP TABLE [" + schemaName + "].[" + sheetname + "]; ");

                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForColumnNames = new OleDbCommand("select top 1 * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForColumnNames = new OleDbDataAdapter(oleDbCommandForColumnNames);
                                DataTable dataTableForColumnNames = new DataTable();
                                oleDbDataAdapterForColumnNames.Fill(dataTableForColumnNames);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder excelHeaderColumn = new StringBuilder();
                                int i;
                                for (i = 0; i < dataTableForColumnNames.Columns.Count - 1; i++)
                                    excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'" + ",");
                                excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'");

                                streamWriter.WriteLine("b) Actual columns in current excel sheet: " + excelHeaderColumn.ToString());

                                string queryToGetMatchingColumns = "SELECT STUFF((SELECT  ',['+Column_Name+']' FROM Information_schema.Columns WHERE Table_Name='" +
                                    sheetname + "' AND Table_SChema='" + schemaName + "'" +
                                    "AND Column_Name IN (" + @excelHeaderColumn.ToString() + ") for xml path('')),1,1,'') AS ColumnList";
                                sqlCommand.CommandText = queryToGetMatchingColumns;
                                string matchedColumnsList = (string)sqlCommand.ExecuteScalar();
                                streamWriter.WriteLine("c) Matching columns with the existing table: " + matchedColumnsList);

                                SqlCommand clearExistingTableCommand = new SqlCommand(clearExistingTableQuery.ToString(), sqlConnection);
                                clearExistingTableCommand.ExecuteNonQuery();
                                streamWriter.WriteLine("--> Existing table is copied to the schema - " + backUpSchemaName);
                                streamWriter.WriteLine("--> Existing table " + sheetname + ",  is dropped from the schema - " + schemaName);
                            }
                            else
                            {
                                streamWriter.WriteLine("a) The table doesn't exist in the schema - " + schemaName);
                            }
                            oleDbConnectionWithoutExcelDataType.Open();
                            OleDbCommand oleDbCommandForAllDataFromExcel = new OleDbCommand("select * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                            OleDbDataAdapter oleDbDataAdapterForAllDataFromExcel = new OleDbDataAdapter(oleDbCommandForAllDataFromExcel);
                            DataTable dataTableForAllDataFromExcel = new DataTable();
                            oleDbDataAdapterForAllDataFromExcel.Fill(dataTableForAllDataFromExcel);
                            oleDbConnectionWithoutExcelDataType.Close();

                            StringBuilder createNewTableQuery = new StringBuilder();
                            createNewTableQuery.Append("Create table [" + schemaName + "].[" + sheetname + "]");
                            createNewTableQuery.Append("(");
                            int k = 0;
                            for (k = 0; k < dataTableForAllDataFromExcel.Columns.Count - 1; k++)
                                createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max),");
                            createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max)");
                            createNewTableQuery.Append(");");

                            SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                            createNewTableCommand.ExecuteNonQuery();

                            streamWriter.WriteLine("--> A new table is created with all it's columns as nvarchar(max) - [" + schemaName + "].[" + sheetname + "]");

                            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                            {
                                sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[" + sheetname + "]";
                                sqlBulkCopy.WriteToServer(dataTableForAllDataFromExcel);
                            }
                            streamWriter.WriteLine("--> All the rows from the sheet - " + sheetname + ", are copied to the newly created table - [" + schemaName + "].[" + sheetname + "]");
                        }
                        streamWriter.WriteLine(); streamWriter.WriteLine();
                    }
                    streamWriter.WriteLine(); streamWriter.WriteLine();
                    File.Move(fileFullPath, archiveFolderPath + "\\" + (file.Name.Replace(sourceFolderPath, "")).Replace(fileExtension, "") + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + fileExtension);
                }
                streamWriter.Close();
                Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success;
            }

            catch (Exception exception)
            {
                using (StreamWriter sw = File.CreateText(Dts.Variables["User::ErrorLogFolderPath"].Value.ToString()
                    + "\\" + "ErrorLog_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".log"))
                {
                    sw.WriteLine("Help link for this exception: " + exception.HelpLink);
                    sw.WriteLine("Primary exception: " + exception.InnerException);
                    sw.WriteLine("Exception Message: " + exception.Message);
                    sw.WriteLine("Error Source: " + exception.Source);
                    sw.WriteLine("Current method which throws exception: " + exception.TargetSite);
                    sw.WriteLine("Code trace at the error point: ");
                    sw.WriteLine(exception.StackTrace);
                    Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure;
                }
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_7b826b4e4bcc43aabef520aa583ce374.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{9ed306ae-3293-42bc-aa2b-b96125176e53}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_7b826b4e4bcc43aabef520aa583ce374</RootNamespace>
    <AssemblyName>ST_7b826b4e4bcc43aabef520aa583ce374</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_7b826b4e4bcc43aabef520aa583ce374</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_7b826b4e4bcc43aabef520aa583ce374</msb:DisplayName>
		<msb:ProjectId>{5B5C6542-A8FD-410F-B696-EA7EC9590C8C}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7b826b4e4bcc43aabef520aa583ce374.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Settings.get_Default():ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Sett" +
    "ings")]

namespace ST_7b826b4e4bcc43aabef520aa583ce374.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_7b826b4e4bcc43aabef520aa583ce374")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_7b826b4e4bcc43aabef520aa583ce374")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_7b826b4e4bcc43aabef520aa583ce374.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_7b826b4e4bcc43aabef520aa583ce374.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_7b826b4e4bcc43aabef520aa583ce374.dll">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
4AcOALcIXwAOANkFUwgOALEAUwgOABUBXwAGAE0GiAgOAMwIUwgGACgBEQUGAPAFEQUGABgFEQUG
AJ0C3wYGADEIEQUGAF8GEgcGABYGWQUSAF4CxQQSAM4CxQQSADgCRAUGAIIC8gYKALMEigQWAK8H
lwEWAB8BlwEGAEwEEQUGAFgBLgAGACIGLgAGAI4GLgAOALoF+gUOAIYAawAGAJEAEQUOAKUFXwAO
AB0CXwAWAPcHlwEWAG8GlwEOAJkA+gUOAJYAawAOAJkGawAOAJwG+gUOAJAFXwAOADkFXwAGAPYB
fgUGAMEBEQUGADQBEQUGAMMIfgUAAAAAJQAAAAAAAQABAAEAEAAuBQEAOQABAAEAAAAQABkHdQd9
AAEAAwAAARAAwgd1B5EAAwAHAAMBAAATCAAAdQAEAAoAEQAdBXQBEQDmAXkBEQDaAH4BBgZXAIIB
VoADCIUBVoDGAYUBUCAAAAAAhgA0BQYAAQCQKgAAAACGGNIGBgABAJgqAAAAAIMY0gYGAAEAoCoA
AAAAkwhbBokBAQDMKgAAAACTCM4BjwEBANMqAAAAAJMI2gGVAQEA2yoAAAAAlgg4CJwBAgDiKgAA
AACGGNIGBgACAOoqAAAAAJEY2AahAQIAAAABACUECQDSBgEAEQDSBgYAGQDSBgoAKQDSBhAAMQDS
BhAAOQDSBhAAQQDSBhAASQDSBhAAUQDSBhAAWQDSBhAAYQDSBhAAaQDSBgYA8QDSBgYAGQHSBhUA
KQHSBgYAcQALCFsAMQGrB2EAOQEIBWcAQQEbBG4A+QBKBHIAeQDSBhAAeQC5B3YAkQCvCHwAkQBK
BIEASQEqCIYAUQGkCIwAWQFdAXIASQEqCJIAYQG3ARAASQHLB5oASQHDAJ8ASQEqCKUAmQDSBhAA
aQEpBQYAcQGkB6wAmQABAbEAaQFQAgYASQEqCLsAwQAhCMEAiQHEBscAoQBpCG4AqQAIBcwAsQDS
BgYAMQHzB9EAkQEIBdcAMQFuBW4AmQHHBd4AsQCjAOMAoQGUCBAAoQE/Bm4ASQFTBOgAyQDSBgYA
yQC8AOwAqQHSBvIAsQHSBvkAwQDSBgYAuQEDBQABwQDUBwYBwQEIBQwByQF/AXIAiQF1COgAuQDS
BhMBoQHYCOgA0QDSBhoB0QBmARAA0QCqBiAB2QBWAgYAYQG3AQYAoQB/CCYBUQErBCoBYQFQAgYA
MQFECAEA4QBeBHIA4QDnBTABSQEqCDUB4QD1AHIA4QDqAHIA4QBzAjsB4QDLAHIAcQDSBgYA+QDS
BgYA2QFGAUEB2QG/CEoBAQHSBlABIQHSBgYACAAUAGoBCAAYAG8BKQBzAN4BLgALALYBLgATAL8B
LgAbAN4BLgAjAOcBLgArABACLgAzABACLgA7ABACLgBDAOcBLgBLABYCLgBTABACLgBbAC0CQwBj
AG8BSQBzAN4BYQB7AG8BYwBrAG8BHAADAAEABAADAAAAXwalAQAA7gGrAQAAPAixAQIABAADAAIA
BQAFAAEABgAFAAIABwAHAASAAAABAAAAgRppWAAAAAAAAAEAAAAEAAAAAAAAAAAAAABYAX0AAAAA
AAwAAAAAAAAAAAAAAGEBawQAAAAABAAAAAAAAAAAAAAAWAFfAAAAAAAEAAAAAAAAAAAAAABYAREF
AAAAAAwAAAAAAAAAAAAAAGEBOAAAAAAAAAAAAAEAAAAjBwAABQACAAAAAFNUXzdiODI2YjRlNGJj
YzQzYWFiZWY1MjBhYTU4M2NlMzc0ADxNb2R1bGU+AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2Vy
dmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBTeXN0ZW0uRGF0YS5PbGVEYgBtc2Nv
cmxpYgBPbGVEYlNjaGVtYUd1aWQAT2xlRGJDb21tYW5kAENyZWF0ZUNvbW1hbmQAU3FsQ29tbWFu
ZABBcHBlbmQAUmVwbGFjZQBnZXRfU3RhY2tUcmFjZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X1NvdXJj
ZQBnZXRfTWVzc2FnZQBHZXRPbGVEYlNjaGVtYVRhYmxlAERhdGFUYWJsZQBWYXJpYWJsZQBJRGlz
cG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAGdldF9OYW1l
AHNldF9EZXN0aW5hdGlvblRhYmxlTmFtZQBnZXRfQ29sdW1uTmFtZQBEYXRlVGltZQBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFdyaXRlTGluZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1
cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAE1ldGhvZEJhc2UAVlNUQVJUU2NyaXB0T2Jq
ZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGlu
Z3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAZ2V0X1RhcmdldFNpdGUA
Q29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBE
ZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0
dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0
dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9p
bnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5
QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBNb3ZlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcA
VG9TdHJpbmcAZ2V0X0xlbmd0aABnZXRfSGVscExpbmsATWljcm9zb2Z0LlNxbFNlcnZlci5TY3Jp
cHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2Jq
ZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzdiODI2YjRlNGJjYzQzYWFiZWY1MjBh
YTU4M2NlMzc0LmRsbABGaWxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAE9wZW4A
U2NyaXB0TWFpbgBEYXRhQ29sdW1uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxp
emF0aW9uAGdldF9UcmFuc2FjdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBEYXRhQ29sdW1uQ29sbGVj
dGlvbgBEYXRhUm93Q29sbGVjdGlvbgBPbGVEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24A
U3FsQ29ubmVjdGlvbgBnZXRfSW5uZXJFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAEZpbGVJ
bmZvAEN1bHR1cmVJbmZvAEZpbGVTeXN0ZW1JbmZvAERpcmVjdG9yeUluZm8ARXhlY3V0ZVNjYWxh
cgBTdHJpbmdCdWlsZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIAU3Ry
ZWFtV3JpdGVyAFRleHRXcml0ZXIAT2xlRGJEYXRhQWRhcHRlcgBXcml0ZVRvU2VydmVyAElFbnVt
ZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0
ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfN2I4MjZiNGU0
YmNjNDNhYWJlZjUyMGFhNTgzY2UzNzQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERl
YnVnZ2luZ01vZGVzAFNUXzdiODI2YjRlNGJjYzQzYWFiZWY1MjBhYTU4M2NlMzc0LlByb3BlcnRp
ZXMAVGFibGVzAGdldF9WYXJpYWJsZXMAR2V0RmlsZXMAU2V0dGluZ3MAQ29udGFpbnMAZ2V0X0Nv
bHVtbnMAU3lzdGVtLkNvbGxlY3Rpb25zAGdldF9Db25uZWN0aW9ucwBTdWNjZXNzAGdldF9EdHMA
U2NyaXB0UmVzdWx0cwBnZXRfUm93cwBDb25jYXQAT2JqZWN0AGdldF9EZWZhdWx0AHNldF9UYXNr
UmVzdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ3VycmVudABnZXRfQ291bnQATW92ZU5l
eHQAU3lzdGVtLlRleHQAc2V0X0NvbW1hbmRUZXh0AENyZWF0ZVRleHQAZ2V0X05vdwBEYXRhUm93
AGdldF9Bc3NlbWJseQBTcWxCdWxrQ29weQBFeGVjdXRlTm9uUXVlcnkAADtVAHMAZQByADoAOgBS
AGUAcABsAGEAYwBlAFMAbwB1AHIAYwBlAEYAbwBsAGQAZQByAFAAYQB0AGgAACFVAHMAZQByADoA
OgBTAGMAaABlAG0AYQBOAGEAbQBlAAAtVQBzAGUAcgA6ADoAQgBhAGMAawBVAHAAUwBjAGgAZQBt
AGEATgBhAG0AZQAAIVMAeQBzAHQAZQBtADoAOgBVAHMAZQByAE4AYQBtAGUAAC9VAHMAZQByADoA
OgBBAHIAYwBoAGkAdgBlAEYAbwBsAGQAZQByAFAAYQB0AGgAACdTAHkAcwB0AGUAbQA6ADoAUABh
AGMAawBhAGcAZQBOAGEAbQBlAAAnVQBzAGUAcgA6ADoATABvAGcARgBvAGwAZABlAHIAUABhAHQA
aAAAAQAdeQB5AHkAeQBNAE0AZABkAEgASABtAG0AcwBzAAADXAAABV8AJAAACS4AbABvAGcAAB1U
AGgAZQAgAHAAYQBjAGsAYQBnAGUAIAAtACAAATssACAAaQBzACAAdwBvAHIAawBpAG4AZwAgAG8A
bgAgAHQAaABlACAAZgBvAGwAZABlAHIAIAAtACAAAQsuAHgAbABzAHgAAAkuAHgAbABzAABdUABy
AG8AdgBpAGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAuAE8ATABFAEQAQgAuADEA
MgAuADAAOwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAAYTsARQB4AHQAZQBuAGQAZQBkACAAUABy
AG8AcABlAHIAdABpAGUAcwA9ACIARQB4AGMAZQBsACAAMQAyAC4AMAA7AEgARABSAD0AWQBFAFMA
OwBJAE0ARQBYAD0AMQAiAAArVABoAGUAIABjAHUAcgByAGUAbgB0ACAAZgBpAGwAZQAgAGkAcwA6
ACAAABVUAEEAQgBMAEUAXwBOAEEATQBFAAAfXwBGAGkAbAB0AGUAcgBEAGEAdABhAGIAYQBzAGUA
AAMkAAAtVABoAGUAIABjAHUAcgByAGUAbgB0ACAAcwBoAGUAZQB0ACAAaQBzADoAIAAAH08ATABF
AEQAQgBDAG8AbgBuAGUAYwB0AGkAbwBuAABzUwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAHMA
eQBzAC4AbwBiAGoAZQBjAHQAcwAgAFcASABFAFIARQAgAG8AYgBqAGUAYwB0AF8AaQBkACAAPQAg
AE8AQgBKAEUAQwBUAF8ASQBEACgATgAnAFsAAQddAC4AWwAAL10AJwApACAAIABBAE4ARAAgAHQA
eQBwAGUAIABpAG4AIAAoAE4AJwBVACcAKQABHy0ALQA+ACAAVABoAGUAIAB0AGEAYgBsAGUAIABb
AAEjXQAgAGEAbAByAGUAYQBkAHkAIABlAHgAaQBzAHQAcwAhAABtSQBGACgATgBPAFQAIABFAFgA
SQBTAFQAUwAoAFMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABzAHkAcwAuAHMAYwBoAGUAbQBh
AHMAIABXAEgARQBSAEUAIABuAGEAbQBlACAAPQAgACcAAQknACkAKQAgAAE3QgBFAEcASQBOACAA
RQBYAEUAQwAoACcAQwBSAEUAQQBUAEUAIABTAEMASABFAE0AQQAgAFsAASNdACAAQQBVAFQASABP
AFIASQBaAEEAVABJAE8ATgAgAFsAABFdACcAKQAgAEUATgBEACAAAR9TAEUATABFAEMAVAAgACoA
IABJAE4AVABPACAAWwAAEV0AIABGAFIATwBNACAAWwAAB10AOwAgAAAZRABSAE8AUAAgAFQAQQBC
AEwARQAgAFsAACtzAGUAbABlAGMAdAAgAHQAbwBwACAAMQAgACoAIABmAHIAbwBtACAAWwAABSQA
XQAAAycAAQUnACwAAVViACkAIABBAGMAdAB1AGEAbAAgAGMAbwBsAHUAbQBuAHMAIABpAG4AIABj
AHUAcgByAGUAbgB0ACAAZQB4AGMAZQBsACAAcwBoAGUAZQB0ADoAIAAAgLtTAEUATABFAEMAVAAg
AFMAVABVAEYARgAoACgAUwBFAEwARQBDAFQAIAAgACcALABbACcAKwBDAG8AbAB1AG0AbgBfAE4A
YQBtAGUAKwAnAF0AJwAgAEYAUgBPAE0AIABJAG4AZgBvAHIAbQBhAHQAaQBvAG4AXwBzAGMAaABl
AG0AYQAuAEMAbwBsAHUAbQBuAHMAIABXAEgARQBSAEUAIABUAGEAYgBsAGUAXwBOAGEAbQBlAD0A
JwABKScAIABBAE4ARAAgAFQAYQBiAGwAZQBfAFMAQwBoAGUAbQBhAD0AJwABKycAQQBOAEQAIABD
AG8AbAB1AG0AbgBfAE4AYQBtAGUAIABJAE4AIAAoAAFTKQAgAGYAbwByACAAeABtAGwAIABwAGEA
dABoACgAJwAnACkAKQAsADEALAAxACwAJwAnACkAIABBAFMAIABDAG8AbAB1AG0AbgBMAGkAcwB0
AAFbYwApACAATQBhAHQAYwBoAGkAbgBnACAAYwBvAGwAdQBtAG4AcwAgAHcAaQB0AGgAIAB0AGgA
ZQAgAGUAeABpAHMAdABpAG4AZwAgAHQAYQBiAGwAZQA6ACAAAFstAC0APgAgAEUAeABpAHMAdABp
AG4AZwAgAHQAYQBiAGwAZQAgAGkAcwAgAGMAbwBwAGkAZQBkACAAdABvACAAdABoAGUAIABzAGMA
aABlAG0AYQAgAC0AIAABJy0ALQA+ACAARQB4AGkAcwB0AGkAbgBnACAAdABhAGIAbABlACAAAUEs
ACAAIABpAHMAIABkAHIAbwBwAHAAZQBkACAAZgByAG8AbQAgAHQAaABlACAAcwBjAGgAZQBtAGEA
IAAtACAAAVdhACkAIABUAGgAZQAgAHQAYQBiAGwAZQAgAGQAbwBlAHMAbgAnAHQAIABlAHgAaQBz
AHQAIABpAG4AIAB0AGgAZQAgAHMAYwBoAGUAbQBhACAALQAgAAEfcwBlAGwAZQBjAHQAIAAqACAA
ZgByAG8AbQAgAFsAAB1DAHIAZQBhAHQAZQAgAHQAYQBiAGwAZQAgAFsAAANdAAADKAAAA1sAACFd
ACAAbgB2AGEAcgBjAGgAYQByACgAbQBhAHgAKQAsAAAfXQAgAG4AdgBhAHIAYwBoAGEAcgAoAG0A
YQB4ACkAAAUpADsAAICLLQAtAD4AIABBACAAbgBlAHcAIAB0AGEAYgBsAGUAIABpAHMAIABjAHIA
ZQBhAHQAZQBkACAAdwBpAHQAaAAgAGEAbABsACAAaQB0ACcAcwAgAGMAbwBsAHUAbQBuAHMAIABh
AHMAIABuAHYAYQByAGMAaABhAHIAKABtAGEAeAApACAALQAgAFsAAUUtAC0APgAgAEEAbABsACAA
dABoAGUAIAByAG8AdwBzACAAZgByAG8AbQAgAHQAaABlACAAcwBoAGUAZQB0ACAALQAgAAFXLAAg
AGEAcgBlACAAYwBvAHAAaQBlAGQAIAB0AG8AIAB0AGgAZQAgAG4AZQB3AGwAeQAgAGMAcgBlAGEA
dABlAGQAIAB0AGEAYgBsAGUAIAAtACAAWwABMVUAcwBlAHIAOgA6AEUAcgByAG8AcgBMAG8AZwBG
AG8AbABkAGUAcgBQAGEAdABoAAAVXABFAHIAcgBvAHIATABvAGcAXwAAPUgAZQBsAHAAIABsAGkA
bgBrACAAZgBvAHIAIAB0AGgAaQBzACAAZQB4AGMAZQBwAHQAaQBvAG4AOgAgAAAnUAByAGkAbQBh
AHIAeQAgAGUAeABjAGUAcAB0AGkAbwBuADoAIAAAJ0UAeABjAGUAcAB0AGkAbwBuACAATQBlAHMA
cwBhAGcAZQA6ACAAAB1FAHIAcgBvAHIAIABTAG8AdQByAGMAZQA6ACAAAE9DAHUAcgByAGUAbgB0
ACAAbQBlAHQAaABvAGQAIAB3AGgAaQBjAGgAIAB0AGgAcgBvAHcAcwAgAGUAeABjAGUAcAB0AGkA
bwBuADoAIAAAP0MAbwBkAGUAIAB0AHIAYQBjAGUAIABhAHQAIAB0AGgAZQAgAGUAcgByAG8AcgAg
AHAAbwBpAG4AdAA6ACAAAHFTAFQAXwA3AGIAOAAyADYAYgA0AGUANABiAGMAYwA0ADMAYQBhAGIA
ZQBmADUAMgAwAGEAYQA1ADgAMwBjAGUAMwA3ADQALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBl
AHMAbwB1AHIAYwBlAHMAAAAu2fREwW1wRZFUG6p6s6c8AAQgAQEIAyAAAQUgAQEREQQgAQEOBiAB
ARGAiT4HJg4ODg4ODg4SPR0SQQ4ODhJFEUkdEkEIEkESTQ4SURJVElkSXQ4OEmESZQgSZRJhEmUI
Dg4SaRJtEnESRQUgABKAmQUgABKAnQYgARKAoRwDIAAcAyAADgUgAB0SQQQAABFJBCABDg4FAAEO
HQ4FAAESRQ4HAAQODg4ODgQgAQIOBSACDg4OBgADDg4ODgQGEYC9CSACEmERgL0dHAUAAg4ODgUg
ABKAwQQgABJRBCABHA4FIAASgMkGIAESgM0cBCABHBwEIAASXQMgAAgFIAESZQ4GIAIBDhJNBiAB
ARKA1QUgAQgSYQUgABKA4QYgARKA5QgGIAIBDhJZBSABARJZBSABARJhAyAAAgUAAgEODgQgABJx
BQACDhwcBSAAEoDpCAABEoDtEYDxBSAAEoD1ByACAQ4SgPUIt3pcVhk04IkIiYRdzYCAzJEEAAAA
AAQBAAAABAYSgIEEBhKAhQMGEhACBggDBhEUBQAAEoCBBQAAEoCFBgABARKAhQQAABIQAwAAAQUI
ABKAgQUIABKAhQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgB
AAIAAAAAACgBACNTVF83YjgyNmI0ZTRiY2M0M2FhYmVmNTIwYWE1ODNjZTM3NAAABQEAAAAAFgEA
EUNvcHlyaWdodCBAICAyMDE4AABHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjABAFQOFEZy
YW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQAAAC0AAAAzsrvvgEAAACRAAAAbFN5
c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAs
IEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0u
UmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAOEoAAAAA
AAAAAAAAUkoAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAERKAAAAAAAAAAAAAAAAX0NvckRsbE1h
aW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAA
gAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAA
AAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAA
AAEAaViBGgAAAQBpWIEaPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYA
aQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMA
AAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAA
GgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAA
AAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA3AGIA
OAAyADYAYgA0AGUANABiAGMAYwA0ADMAYQBhAGIAZQBmADUAMgAwAGEAYQA1ADgAMwBjAGUAMwA3
ADQAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANgA3ADgANQAuADIA
MgA2ADMAMwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA3AGIAOAAy
ADYAYgA0AGUANABiAGMAYwA0ADMAYQBhAGIAZQBmADUAMgAwAGEAYQA1ADgAMwBjAGUAMwA3ADQA
LgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgACAAMgAwADEAOAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIA
awBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABf
ADcAYgA4ADIANgBiADQAZQA0AGIAYwBjADQAMwBhAGEAYgBlAGYANQAyADAAYQBhADUAOAAzAGMA
ZQAzADcANAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA3
AGIAOAAyADYAYgA0AGUANABiAGMAYwA0ADMAYQBhAGIAZQBmADUAMgAwAGEAYQA1ADgAMwBjAGUA
MwA3ADQAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANwA4
ADUALgAyADIANgAzADMAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADYANwA4ADUALgAyADIANgAzADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAZDoAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="358,145" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
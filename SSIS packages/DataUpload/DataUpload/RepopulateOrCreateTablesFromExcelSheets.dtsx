<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/30/2018 7:23:27 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="AJAY"
  DTS:CreatorName="AJAY\Ajay"
  DTS:DTSID="{FA82856E-495A-4E56-9EC4-A6AB68BC0BB9}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3008.28"
  DTS:LocaleID="16393"
  DTS:ObjectName="RepopulateOrCreateTablesFromExcelSheets"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="57"
  DTS:VersionGUID="{425DD7FB-2C04-438C-BFCA-23C1E37939A4}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLEDBConnection]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{AD2B27E8-333A-45EC-B604-883A1BE14CA4}"
      DTS:ObjectName="OLEDBConnection">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">"Data Source="+@[User::ServerName]+";User ID="+@[User::LoginName]+";Password="+@[User::LoginPassword]+";Initial Catalog="+@[User::DatabaseName]+";Application Name=SSIS-CreatePopulateTablesFromExcelSheets-{AD2B27E8-333A-45EC-B604-883A1BE14CA4}"+@[User::ServerName]+"."+@[User::DatabaseName]+"."+@[User::LoginName]+";"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=131.156.33.147;User ID=sa;Initial Catalog=60by25Development;Application Name=SSIS-CreatePopulateTablesFromExcelSheets-{AD2B27E8-333A-45EC-B604-883A1BE14CA4}131.156.33.147.60by25Development.sa;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3BAD4C5B-07EE-497F-8A25-9B01F6708ECF}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ArchiveFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\Y13SJT1\Desktop\SSIS Folder\Sindi\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{55145AE1-D08D-4E9D-8401-C0ECBC6617B6}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::BackUpSchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BackUpSchemaName">
      <DTS:VariableValue
        DTS:DataType="8">archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5CCB07E6-CB32-4560-90DD-A6903DAA837D}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::DatabaseName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DatabaseName">
      <DTS:VariableValue
        DTS:DataType="8">60by25Development</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{098CC228-4252-4F0D-BB3C-EDD7BB39013E}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailFrom]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailFrom">
      <DTS:VariableValue
        DTS:DataType="8">cgs.niu@gmail.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5643FCA4-13F1-407D-8563-EDC588CCDEE0}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailFromPassword]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailFromPassword">
      <DTS:VariableValue
        DTS:DataType="8">CgsNiu@1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{42BCF3DB-DE73-42FD-8E6C-AD01DE43B527}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailTo]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailTo">
      <DTS:VariableValue
        DTS:DataType="8">taylor@niu.edu, asaraswathyperumal1@niu.edu, hdonapati1@niu.edu, kthakkar3@niu.edu, sshingade1@niu.edu, jflores13@niu.edu</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{05A949AE-592C-43A9-99BC-4026AEB8AA34}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ErrorLogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorLogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\Y13SJT1\Desktop\SSIS Folder\Sindi\ErrorLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{18D0E5B8-06AA-4A16-9060-28AD7A297081}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\Y13SJT1\Desktop\SSIS Folder\Sindi\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9AB8E85D-3564-475D-8962-D10E53447EA5}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginName">
      <DTS:VariableValue
        DTS:DataType="8">sa</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8CCC32EF-7E5F-492E-9233-88E00C6750B7}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginPassword]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginPassword">
      <DTS:VariableValue
        DTS:DataType="8">cgstestSQL2013</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D0F73045-2656-41A8-8EED-40ADF7121437}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::RepopulateSourceFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RepopulateSourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\Y13SJT1\Desktop\SSIS Folder\Sindi\RepopulateOrCreate</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{354B1FEA-09C7-4F46-B989-0158E83AC16F}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::SchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EC35CA3C-0DD5-4DA5-9997-8D2C69E288F7}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ServerName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ServerName">
      <DTS:VariableValue
        DTS:DataType="8">131.156.33.147</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{D936A7CD-0634-4F94-8B90-1A45CC5AC1F6}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_c6e77ca524b04c1f9b35fd5ba4b271bf"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ArchiveFolderPath,User::BackUpSchemaName,User::EmailFrom,User::EmailFromPassword,User::EmailTo,User::ErrorLogFolderPath,User::LogFolderPath,System::PackageName,User::RepopulateSourceFolderPath,User::SchemaName,System::UserName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7710FA30-79AA-497B-AEA8-2565E87EFB31}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</RootNamespace>
    <AssemblyName>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Settings.get_Default():ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Sett" +
    "ings")]

namespace ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Text;
using System.Net.Mail;

namespace ST_c6e77ca524b04c1f9b35fd5ba4b271bf
{
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
		public void Main()
		{
            bool notEmptyFlag = false;
            string logFileName = "";
            string errorLogFileName = "";
            try
            {
                String sourceFolderPath = Dts.Variables["User::RepopulateSourceFolderPath"].Value.ToString();
                String schemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                String backUpSchemaName = Dts.Variables["User::BackUpSchemaName"].Value.ToString();
                String userName = Dts.Variables["System::UserName"].Value.ToString();
                String archiveFolderPath = Dts.Variables["User::ArchiveFolderPath"].Value.ToString();
                String packageName = Dts.Variables["System::PackageName"].Value.ToString();
                String logFolderPath = Dts.Variables["User::LogFolderPath"].Value.ToString();

                var directory = new DirectoryInfo(sourceFolderPath);
                FileInfo[] files = directory.GetFiles();
                string fileFullPath = "", fileExtension = "", filename = "";
                string logTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                StreamWriter streamWriter = null;
                logFileName = logFolderPath + "\\" + packageName + "_$" + logTime + ".log";

                bool isFirstFile = true;

                
                foreach (FileInfo file in files)
                {
                    if (isFirstFile)
                    {
                        streamWriter = File.CreateText(logFileName);
                        isFirstFile = false;
                        notEmptyFlag = true;
                    }
                    if (file.Name.Contains(".xlsx")) { filename = file.Name.Replace(".xlsx", ""); fileExtension = ".xlsx"; }
                    else if (file.Name.Contains(".xls")) { filename = file.Name.Replace(".xls", ""); fileExtension = ".xls"; }
                    else continue;
                    
                    fileFullPath = sourceFolderPath + "\\" + file.Name;

                    string connectionStringWithoutExcelDataType = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
                    OleDbConnection oleDbConnectionWithoutExcelDataType = new OleDbConnection(connectionStringWithoutExcelDataType);

                    oleDbConnectionWithoutExcelDataType.Open();
                    DataTable dataTableWithEachSheetInfo = oleDbConnectionWithoutExcelDataType.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    oleDbConnectionWithoutExcelDataType.Close();

                    streamWriter.WriteLine("The current file is: " + file.Name);

                    string sheetname = "";
                    foreach (DataRow dataRowWithCurrentSheetInfo in dataTableWithEachSheetInfo.Rows)
                    {
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("_FilterDatabase")) continue;
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("$"))
                        {
                            sheetname = dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Replace("$", "");

                            streamWriter.WriteLine("The current sheet is: " + sheetname);

                            SqlConnection sqlConnection = new SqlConnection();
                            sqlConnection = (SqlConnection)(Dts.Connections["OLEDBConnection"].AcquireConnection(Dts.Transaction) as SqlConnection);

                            SqlCommand sqlCommand = sqlConnection.CreateCommand();
                            string checkTableAvailabilityQuery = "SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[" + schemaName + "].[" + sheetname + "]')  AND type in (N'U')";
                            sqlCommand.CommandText = checkTableAvailabilityQuery;
                            string resultOfTableAvailabilityCheck = "";
                            resultOfTableAvailabilityCheck = (string)sqlCommand.ExecuteScalar();

                            if (resultOfTableAvailabilityCheck !=null && resultOfTableAvailabilityCheck.Length != 0)
                            {
                                streamWriter.WriteLine("--> The table [" + schemaName +"].[" + sheetname + "] already exists!");
                                StringBuilder clearExistingTableQuery = new StringBuilder();
                                clearExistingTableQuery.Append("IF(NOT EXISTS(SELECT * FROM sys.schemas WHERE name = '" + backUpSchemaName + "')) ");
                                clearExistingTableQuery.Append("BEGIN EXEC('CREATE SCHEMA [" + backUpSchemaName + "] AUTHORIZATION [" + userName + "]') END ");
                                clearExistingTableQuery.Append("SELECT * INTO [" + backUpSchemaName + "].[" + sheetname + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + "] FROM [" + schemaName + "].[" + sheetname + "]; ");
                                clearExistingTableQuery.Append("DELETE FROM [" + schemaName + "].[" + sheetname + "]; ");

                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForColumnNames = new OleDbCommand("select top 1 * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForColumnNames = new OleDbDataAdapter(oleDbCommandForColumnNames);
                                DataTable dataTableForColumnNames = new DataTable();
                                oleDbDataAdapterForColumnNames.Fill(dataTableForColumnNames);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder excelHeaderColumn = new StringBuilder();
                                int i;
                                for (i = 0; i < dataTableForColumnNames.Columns.Count - 1; i++)
                                    excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'" + ",");
                                excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'");

                                streamWriter.WriteLine("b) Actual columns in current excel sheet: " + excelHeaderColumn.ToString());

                                string queryToGetMatchingColumns = "SELECT STUFF((SELECT  ',['+Column_Name+']' FROM Information_schema.Columns WHERE Table_Name='" +
                                    sheetname + "' AND Table_SChema='" + schemaName + "'" +
                                    "AND Column_Name IN (" + @excelHeaderColumn.ToString() + ") for xml path('')),1,1,'') AS ColumnList";
                                sqlCommand.CommandText = queryToGetMatchingColumns;
                                string matchedColumnsList = (string)sqlCommand.ExecuteScalar();
                                streamWriter.WriteLine("c) Matching columns with the existing table: " + matchedColumnsList);

                                SqlCommand clearExistingTableCommand = new SqlCommand(clearExistingTableQuery.ToString(), sqlConnection);
                                clearExistingTableCommand.ExecuteNonQuery();
                                streamWriter.WriteLine("--> Existing table is copied to the schema - " + backUpSchemaName);
                                streamWriter.WriteLine("--> Existing table's data are deleted from the schema - " + schemaName);

                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForMatchedColumnsDataFromExcel = new OleDbCommand("select " + matchedColumnsList + " from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForMatchedColumnsData = new OleDbDataAdapter(oleDbCommandForMatchedColumnsDataFromExcel);
                                DataTable dataTableWithMatchedColumnsData = new DataTable();
                                oleDbDataAdapterForMatchedColumnsData.Fill(dataTableWithMatchedColumnsData);
                                oleDbConnectionWithoutExcelDataType.Close();

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = schemaName + "." + sheetname;
                                    foreach (var column in dataTableWithMatchedColumnsData.Columns)
                                        sqlBulkCopy.ColumnMappings.Add(column.ToString(), column.ToString());
                                    sqlBulkCopy.WriteToServer(dataTableWithMatchedColumnsData);
                                }
                                streamWriter.WriteLine("--> All the rows under above mentioned columns, from the sheet " + sheetname + ", were copied to the table " + "[" + schemaName + "].[" + sheetname + "]");
                            }
                            else
                            {
                                streamWriter.WriteLine("a) The table doesn't exist in the schema - " + schemaName);
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForAllDataFromExcel = new OleDbCommand("select * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForAllDataFromExcel = new OleDbDataAdapter(oleDbCommandForAllDataFromExcel);
                                DataTable dataTableForAllDataFromExcel = new DataTable();
                                oleDbDataAdapterForAllDataFromExcel.Fill(dataTableForAllDataFromExcel);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder createNewTableQuery = new StringBuilder();
                                createNewTableQuery.Append("Create table [" + schemaName + "].[" + sheetname + "]");
                                createNewTableQuery.Append("(");
                                int k = 0;
                                for (k = 0; k < dataTableForAllDataFromExcel.Columns.Count - 1; k++)
                                    createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max),");
                                createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max)");
                                createNewTableQuery.Append(");");

                                SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                                createNewTableCommand.ExecuteNonQuery();

                                streamWriter.WriteLine("--> A new table is created with all it's columns as nvarchar(max) - [" + schemaName + "].[" + sheetname + "]");

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[" + sheetname + "]";
                                    sqlBulkCopy.WriteToServer(dataTableForAllDataFromExcel);
                                }
                                streamWriter.WriteLine("--> All the rows from the sheet - " + sheetname + ", are copied to the table - [" + schemaName + "].[" + sheetname + "]");
                            }
                        }
                        streamWriter.WriteLine(); streamWriter.WriteLine();
                    }
                    streamWriter.WriteLine(); streamWriter.WriteLine(); 
                    File.Move(fileFullPath, archiveFolderPath + "\\" + (file.Name.Replace(sourceFolderPath, "")).Replace(fileExtension, "") + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + fileExtension);
                }
                if (streamWriter != null) streamWriter.Close();
                Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success;
            }

            catch (Exception exception)
            {
                errorLogFileName = Dts.Variables["User::ErrorLogFolderPath"].Value.ToString()
                    + "\\" + "ErrorLog_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".log";
                using (StreamWriter sw = File.CreateText(errorLogFileName))
                {
                    sw.WriteLine("Help link for this exception: "+exception.HelpLink);
                    sw.WriteLine("Primary exception: " + exception.InnerException);
                    sw.WriteLine("Exception Message: " + exception.Message);
                    sw.WriteLine("Error Source: " + exception.Source);
                    sw.WriteLine("Current method which throws exception: " + exception.TargetSite);
                    sw.WriteLine("Code trace at the error point: ");
                    sw.WriteLine(exception.StackTrace);
                    Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure;
                }
            }

            String SendMailFrom = Dts.Variables["User::EmailFrom"].Value.ToString();
            String SendMailFromPassword = Dts.Variables["User::EmailFromPassword"].Value.ToString();
            String SendMailTo = Dts.Variables["User::EmailTo"].Value.ToString();
            String[] SendMailToArray = SendMailTo.Split(',');
            try
            {
                MailMessage email = new MailMessage();
                email.From = new MailAddress(SendMailFrom);
                email.To.Add(SendMailToArray[0]);
                for (int i = 1; i < SendMailToArray.Length; i++)
                {
                    email.CC.Add(SendMailToArray[i]);
                }
                SmtpClient SmtpServer = new SmtpClient("smtp.gmail.com");
                SmtpServer.Port = 587;
                SmtpServer.Credentials = new System.Net.NetworkCredential(SendMailFrom, SendMailFromPassword);
                SmtpServer.EnableSsl = true;

                if (Dts.TaskResult == 0 && notEmptyFlag)
                {
                    //send email of success log - logFileName
                    email.Subject = "Success: package - " + Dts.Variables["System::PackageName"].Value.ToString();
                    email.Body = "Team, \n\t\tThe package - " + Dts.Variables["System::PackageName"].Value.ToString() + ", has been executed successful. Attached is the log file with all the SQL steps it has taken.\n\nCenter for Governmental Studies";

                   email.Attachments.Add(new System.Net.Mail.Attachment(logFileName));
                }
                else if (Dts.TaskResult == 1)
                {
                    //send email of failure log - errorLogFileName
                    email.Subject = "Failed: package - " + Dts.Variables["System::PackageName"].Value.ToString();
                    email.Body = "Team, \n\t\tThe package - " + Dts.Variables["System::PackageName"].Value.ToString() + ", has failed. Attached is the error-log file with the details of the error. Also, check the other complete log file to find the point at which the error was triggered. \n\nCenter for Governmental Studies";
                    email.Attachments.Add(new System.Net.Mail.Attachment(errorLogFileName));
                }

                SmtpServer.Send(email);
            }
            catch (Exception)
            {
                //
            }
        }
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</msb:DisplayName>
		<msb:ProjectId>{24C320D1-95F8-4591-9A00-80B600AD38E7}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_c6e77ca524b04c1f9b35fd5ba4b271bf")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_c6e77ca524b04c1f9b35fd5ba4b271bf")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAEVba1sAAAAAAAAAAOAAIiALATAAADYAAAAIAAAAAAAARlQA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPRTAABPAAAAAGAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAATDQAAAAgAAAANgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAYAAAAAYAAAA4AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAPgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAo
VAAAAAAAAEgAAAACAAUAeC4AAMQkAAABAAAAAAAAADxTAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBwAFDQAAAQAAERYKcgEAAHALcgEAAHAMAigQAAAKbxEA
AApyAwAAcG8SAAAKbxMAAApvFAAAChMGAigQAAAKbxEAAApyRQAAcG8SAAAKbxMAAApvFAAAChMH
AigQAAAKbxEAAApyZwAAcG8SAAAKbxMAAApvFAAAChMIAigQAAAKbxEAAApylQAAcG8SAAAKbxMA
AApvFAAAChMJAigQAAAKbxEAAApytwAAcG8SAAAKbxMAAApvFAAAChMKAigQAAAKbxEAAApy5wAA
cG8SAAAKbxMAAApvFAAAChMLAigQAAAKbxEAAApyDwEAcG8SAAAKbxMAAApvFAAAChMMEQZzFQAA
Cm8WAAAKEw1yAQAAcBMOcgEAAHATDygXAAAKExMSE3I3AQBwKBgAAAoTEBQTERyNKQAAASUWEQyi
JRdyVQEAcKIlGBELoiUZclkBAHCiJRoREKIlG3JfAQBwoigZAAAKCxcTEhENExQWExU4dQgAABEU
ERWaExYREiwNBygaAAAKExEWExIXChEWbxsAAApyaQEAcG8cAAAKLCARFm8bAAAKcmkBAHByAQAA
cG8dAAAKJnJpAQBwEw8rNBEWbxsAAApydQEAcG8cAAAKOQ4IAAARFm8bAAAKcnUBAHByAQAAcG8d
AAAKJnJ1AQBwEw8RBnJVAQBwERZvGwAACigeAAAKEw5yfwEAcBEOct0BAHAoHgAACnMfAAAKExcR
F28gAAAKERd+IQAAChRvIgAAChEXbyMAAAoREXI/AgBwERZvGwAACigkAAAKbyUAAApyAQAAcBMY
byYAAApvJwAAChMZOOMGAAARGW8oAAAKdBQAAAETGhEacmsCAHBvKQAACm8UAAAKcoECAHBvHAAA
Cjq1BgAAERpyawIAcG8pAAAKbxQAAApyoQIAcG8cAAAKOYcGAAARGnJrAgBwbykAAApvFAAACnKh
AgBwcgEAAHBvHQAAChMYERFypQIAcBEYKCQAAApvJQAACnMqAAAKExsCKBAAAApvKwAACnLTAgBw
bywAAAoCKBAAAApvLQAACm8uAAAKdRUAAAETGxEbby8AAAoTHBuNKQAAASUWcvMCAHCiJRcRB6Il
GHJnAwBwoiUZERiiJRpybwMAcKIoGQAAChMdERwRHW8wAAAKcgEAAHATHhEcbzEAAAp0KQAAARMe
ER45zgMAABEebzIAAAo5wgMAABERG40pAAABJRZynwMAcKIlFxEHoiUYcmcDAHCiJRkRGKIlGnK/
AwBwoigZAAAKbyUAAApzMwAAChMfER9y4wMAcBEIclEEAHAoHgAACm80AAAKJhEfG40pAAABJRZy
WwQAcKIlFxEIoiUYcpMEAHCiJRkRCaIlGnK3BABwoigZAAAKbzQAAAomER8fC40pAAABJRZyyQQA
cKIlFxEIoiUYcmcDAHCiJRkRGKIlGnJZAQBwoiUbKBcAAAoTExITcjcBAHAoGAAACqIlHHLpBABw
oiUdEQeiJR5yZwMAcKIlHwkRGKIlHwpy+wQAcKIoGQAACm80AAAKJhEfG40pAAABJRZyAwUAcKIl
FxEHoiUYcmcDAHCiJRkRGKIlGnL7BABwoigZAAAKbzQAAAomERdvIAAACnIfBQBwERhySwUAcCge
AAAKERdzNQAACnM2AAAKczcAAAoTIBEgbzgAAAomERdvIwAACnMzAAAKEyEWEyIrMBEhclEFAHAR
IG85AAAKESJvOgAACm87AAAKclUFAHAoHgAACm80AAAKJhEiF1gTIhEiESBvOQAACm88AAAKF1ky
vhEhclEFAHARIG85AAAKESJvOgAACm87AAAKclEFAHAoHgAACm80AAAKJhERclsFAHARIW8UAAAK
KCQAAApvJQAACh2NKQAAASUWcrEFAHCiJRcRGKIlGHJuBgBwoiUZEQeiJRpymAYAcKIlGxEhbxQA
AAqiJRxyxAYAcKIoGQAAChMjERwRI28wAAAKERxvMQAACnQpAAABEyQREXIYBwBwESQoJAAACm8l
AAAKER9vFAAAChEbcz0AAApvPgAACiYREXJ0BwBwEQgoJAAACm8lAAAKERFy0AcAcBEHKCQAAApv
JQAAChEXbyAAAAobjSkAAAElFnJCCABwoiUXESSiJRhyUggAcKIlGREYoiUacksFAHCiKBkAAAoR
F3M1AAAKczYAAApzNwAAChMlESVvOAAACiYRF28jAAAKERtzPwAAChMmESYRB3JiCABwERgoHgAA
Cm9AAAAKESVvOQAACm8nAAAKEycrJBEnbygAAAoTKBEmb0EAAAoRKG8UAAAKEShvFAAACm9CAAAK
JhEnb0MAAAot094VESd1GwAAARMpESksBxEpb0QAAArcESYRJW9FAAAK3gwRJiwHESZvRAAACtwR
ER2NKQAAASUWcmYIAHCiJRcRGKIlGHLmCABwoiUZEQeiJRpyZwMAcKIlGxEYoiUcciAJAHCiKBkA
AApvJQAACjj0AQAAERFyJAkAcBEHKCQAAApvJQAAChEXbyAAAApyfAkAcBEYcksFAHAoHgAAChEX
czUAAApzNgAACnM3AAAKEyoRKm84AAAKJhEXbyMAAApzMwAAChMrESsbjSkAAAElFnKcCQBwoiUX
EQeiJRhyZwMAcKIlGREYoiUaciAJAHCiKBkAAApvNAAACiYRK3K6CQBwbzQAAAomFhMsFhMsKzAR
K3K+CQBwESpvOQAAChEsbzoAAApvOwAACnLCCQBwKB4AAApvNAAACiYRLBdYEywRLBEqbzkAAApv
PAAAChdZMr4RK3K+CQBwESpvOQAAChEsbzoAAApvOwAACnLkCQBwKB4AAApvNAAACiYRK3IECgBw
bzQAAAomEStvFAAAChEbcz0AAApvPgAACiYRERuNKQAAASUWcgoKAHCiJRcRB6IlGHJnAwBwoiUZ
ERiiJRpyIAkAcKIoGQAACm8lAAAKERtzPwAAChMtES0bjSkAAAElFnK+CQBwoiUXEQeiJRhyZwMA
cKIlGREYoiUaciAJAHCiKBkAAApvQAAAChEtESpvRQAACt4MES0sBxEtb0QAAArcEREdjSkAAAEl
FnKXCgBwoiUXERiiJRhy3QoAcKIlGREHoiUacmcDAHCiJRsRGKIlHHIgCQBwoigZAAAKbyUAAAoR
EW9GAAAKERFvRgAAChEZb0MAAAo6Efn//94VERl1GwAAARMpESksBxEpb0QAAArcERFvRgAAChER
b0YAAAoRDhyNKQAAASUWEQqiJRdyVQEAcKIlGBEWbxsAAAoRBnIBAABwbx0AAAoRD3IBAABwbx0A
AAqiJRlyWQEAcKIlGigXAAAKExMSE3I3AQBwKBgAAAqiJRsRD6IoGQAACihHAAAKERUXWBMVERUR
FI5pP4D3//8RESwHERFvSAAACgIoEAAAChZvSQAACt36AAAAEy4CKBAAAApvEQAACnIZCwBwbxIA
AApvEwAACm8UAAAKcksLAHAoFwAAChMTEhNyNwEAcCgYAAAKcl8BAHAoSgAACgwIKBoAAAoTLxEv
cmELAHARLm9LAAAKKCQAAApvJQAAChEvcp8LAHARLm9MAAAKKE0AAApvJQAAChEvcscLAHARLm9O
AAAKKCQAAApvJQAAChEvcu8LAHARLm9PAAAKKCQAAApvJQAAChEvcg0MAHARLm9QAAAKKE0AAApv
JQAAChEvcl0MAHBvJQAAChEvES5vUQAACm8lAAAKAigQAAAKF29JAAAK3gwRLywHES9vRAAACtze
AAIoEAAACm8RAAAKcp0MAHBvEgAACm8TAAAKbxQAAAoNAigQAAAKbxEAAApyvQwAcG8SAAAKbxMA
AApvFAAAChMEAigQAAAKbxEAAApy7QwAcG8SAAAKbxMAAApvFAAACheNPQAAASUWHyydb1IAAAoT
BXNTAAAKEzARMAlzVAAACm9VAAAKETBvVgAAChEFFppvVwAAChcTMSsXETBvWAAAChEFETGab1cA
AAoRMRdYEzERMREFjmky4XIJDQBwc1kAAAolIEsCAABvWgAACiUJEQRzWwAACm9cAAAKJRdvXQAA
CgIoEAAACm9eAAAKFv4BBl8sfBEwcicNAHACKBAAAApvEQAACnLnAABwbxIAAApvEwAACm8UAAAK
KCQAAApvXwAAChEwck8NAHACKBAAAApvEQAACnLnAABwbxIAAApvEwAACm8UAAAKcn8NAHAoHgAA
Cm9gAAAKETBvYQAACgdzYgAACm9jAAAKOIUAAAACKBAAAApvXgAAChczdxEwcn4OAHACKBAAAApv
EQAACnLnAABwbxIAAApvEwAACm8UAAAKKCQAAApvXwAAChEwck8NAHACKBAAAApvEQAACnLnAABw
bxIAAApvEwAACm8UAAAKcqQOAHAoHgAACm9gAAAKETBvYQAACghzYgAACm9jAAAKETBvZAAACt4D
Jt4AKgAAAEGsAAACAAAAoAYAADEAAADRBgAAFQAAAAAAAAACAAAAfQYAAHQAAADxBgAADAAAAAAA
AAACAAAAqwgAAD8AAADqCAAADAAAAAAAAAACAAAAXQIAAPYGAABTCQAAFQAAAAAAAAACAAAAUwoA
AKAAAADzCgAADAAAAAAAAAAAAAAADgAAAPkJAAAHCgAA+gAAABwAAAEAAAAAcwsAAI4BAAABDQAA
AwAAABwAAAEeAihlAAAKKh4CKGYAAAoqrn4BAAAELR5yORAAcNADAAACKGcAAApvaAAACnNpAAAK
gAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQqHgIoagAACioucwgAAAaAAwAABCoAAEJT
SkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAHwGAAAjfgAA6AYAAFgKAAAjU3RyaW5n
cwAAAABAEQAArBAAACNVUwDsIQAAEAAAACNHVUlEAAAA/CEAAMgCAAAjQmxvYgAAAAAAAAACAAAB
VxWiCQkBAAAA+gEzABYAAAEAAABIAAAABAAAAAMAAAAJAAAAAQAAAGoAAAAQAAAAAQAAAAIAAAAD
AAAABAAAAAEAAAABAAAABQAAAAEAAAAAAE4FAQAAAAAABgBjA9EHBgDyA9EHBgCvAr4HDwBFCAAA
BgDcAgMGBgBGAwMGBgAnAwMGBgDZAwMGBgCDAwMGBgCcAwMGBgDzAgMGBgAOA0kECgC3A7wECgD2
AbwEBgDnBh4ABgBgBx4ABgCLAZIFDgCKBlMABgCXB+IIDgAdCkcADgCsBocJDgCdAIcJBgAsB+4J
DgASAUcADgA7CocJBgA5CZIFBgAlAZIFBgDDBpIFEgDyAD4FBgCSAr4HBgA+B/EHBgDwBt4FEgBT
AigFEgDDAigFEgAtAskFBgB3AtEHCgAWBbwEFgCOCJQBFgAcAZQBBgALBx4ABgB+BJIFBgBVAR4A
BgD8Bh4ADgCNBs0GDgByAFMABgB9AJIFBgBtBx4ADgB4BkcADgASAkcAFgD5CJQBFgBOB5QBDgCF
AM0GDgCCAFMADgB4B1MADgB7B80GDgA4BkcADgC+BUcADgAVBocJDgBjBIcJBgDrAQMGBgAZB5IF
EgAFCT4FEgBNBj4FEgCdCT4FEgDlBEwJEgDSCUwJEgBjBj4FEgCoCT4FBgABAPcEBgC+AZIFBgAx
AZIFBgAyCgMGAAAAAA4AAAAAAAEAAQABABAAswUlBDkAAQABAAAAEAD4B1QIaQABAAMAAAEQALQI
VAiNAAMABwARAKIFyQERANsBzQERAMsA0gFQIAAAAACGALkFBgABABAuAAAAAIYYsQcGAAEAGC4A
AAAAgxixBwYAAQAgLgAAAACTCDoH1gEBAEwuAAAAAJMIwwHbAQEAUy4AAAAAkwjPAeEBAQBbLgAA
AACWCF0J6AECAGIuAAAAAIYYsQcGAAIAai4AAAAAkRi3B+0BAgAAAAEAGgQJALEHAQARALEHBgAZ
ALEHCgApALEHEAAxALEHEAA5ALEHEABBALEHEABJALEHEABRALEHEABZALEHEABhALEHEABpALEH
BgDxALEHBgARAbEHFQAhAbEHBgBxABEJawApAYoIcQAxAYkFdwA5ARAEfgDRAHwEggBBAbEHEABB
AZgIhgCJABUKjACJAHwEkQBJATIJlgBRAQoKnABZAVoBggBJAc0IogBJAbQApwBJATIJrQCRALEH
EABhAa4FBgBpAYMItACRAP4AuQBhAUUCBgBJATIJwwB5AbQBEADBACkJyQCJAaMHzwCZALMJfgCh
AIkF1ACpALEHBgApAfUI2QCRAYkF3wApAfMFfgCZAZoG5gCpAI8A6wChAfoJEAChAR4HfgBJAYUE
8AC5ALEHBgC5AK0A9ACpAbEH+gCxAbEHAQHBALEHBgC5AXYFCAHBANYIDgHBAYkFFAHJAXwBggCJ
Ab8J8ACxALEHGwGhAUcK8ADJALEHIgHJAGMBEADJAKEIKAHRAW4ALgGZAOUJNgHZAEsCBgDJAIkH
OgF5AbQBBgBRASAEQAF5AUUCBgApAXgJAQBJATIJRgHhAJAEggDhALoGTgFJATIJUwHhAOYAggDh
ANsAggDhAGgCWQHhALwAggBJAVcJXwHpALEHBgDxAbEHEADpAJkFZgHpAOAGbQH5AW4AEADpABcA
bQEBArEHEAABAskJAQAJArEHcwEBAr0IeQEBAnsFgAEpAWkJ8ADpAEAJEADpACUKEADpABkJhQEh
ArEHEAAMAG4AlAEBAqgAmgFxALEHBgDRALEHBgAxAkMBoAExAi4KqQH5ALEHrwEZAbEHBgApAHMA
KQIuAAsAAQIuABMACgIuABsAKQIuACMAMgIuACsAWwIuADMAWwIuADsAWwIuAEMAMgIuAEsAYQIu
AFMAWwIuAFsAeAJDAGMAwAJJAHMAKQJhAHsAwAJjAGsAwAIcAAMAAQAEAAMAAAA+B/EBAADjAfYB
AABhCfwBAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcAiwEEgAAAAQAAAIoaOnEAAAAAAAAlBAAABAAA
AAAAAAAAAAAAtwFlAAAAAAAMAAAAAAAAAAAAAADAAZ0EAAAAAAQAAAAAAAAAAAAAALcBRwAAAAAA
BAAAAAAAAAAAAAAAtwGSBQAAAAAMAAAAAAAAAAAAAADAASgAAAAAAAAAAAABAAAAAggAAAAAAAAA
Q29sbGVjdGlvbmAxADxNb2R1bGU+AGdldF9DQwBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZl
ci5NYW5hZ2VkRFRTAFN5c3RlbS5EYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAEFkZABP
bGVEYlNjaGVtYUd1aWQAT2xlRGJDb21tYW5kAENyZWF0ZUNvbW1hbmQAU3FsQ29tbWFuZABTZW5k
AEFwcGVuZABSZXBsYWNlAGdldF9TdGFja1RyYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfU291cmNl
AGdldF9NZXNzYWdlAE1haWxNZXNzYWdlAEdldE9sZURiU2NoZW1hVGFibGUARGF0YVRhYmxlAFZh
cmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZp
bGUAZ2V0X05hbWUAc2V0X0Rlc3RpbmF0aW9uVGFibGVOYW1lAGdldF9Db2x1bW5OYW1lAERhdGVU
aW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAV3JpdGVMaW5lAFR5cGUAZ2V0X0N1
bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAE1ldGhvZEJhc2UAVlNUQVJUU2NyaXB0
T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0
dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAZ2V0X1RhcmdldFNp
dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0
ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRp
dGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0
dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlv
bkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVj
dEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5
UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmls
aXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBNb3ZlAFNUX2M2ZTc3Y2E1MjRiMDRjMWY5YjM1
ZmQ1YmE0YjI3MWJmAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAU3FsQnVsa0NvcHlDb2x1bW5N
YXBwaW5nAFRvU3RyaW5nAGdldF9MZW5ndGgAZ2V0X0hlbHBMaW5rAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAE5l
dHdvcmtDcmVkZW50aWFsAFN5c3RlbS5Db2xsZWN0aW9ucy5PYmplY3RNb2RlbABTY3JpcHRPYmpl
Y3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU3lzdGVtLk5ldC5NYWlsAFNUX2M2ZTc3Y2E1
MjRiMDRjMWY5YjM1ZmQ1YmE0YjI3MWJmLmRsbABGaWxsAHNldF9FbmFibGVTc2wAZ2V0X0l0ZW0A
U3lzdGVtAHNldF9Gcm9tAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBEYXRhQ29sdW1uAFN5
c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAGdldF9UcmFuc2FjdGlvbgBT
eXN0ZW0uUmVmbGVjdGlvbgBTcWxCdWxrQ29weUNvbHVtbk1hcHBpbmdDb2xsZWN0aW9uAERhdGFD
b2x1bW5Db2xsZWN0aW9uAE1haWxBZGRyZXNzQ29sbGVjdGlvbgBBdHRhY2htZW50Q29sbGVjdGlv
bgBEYXRhUm93Q29sbGVjdGlvbgBPbGVEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3Fs
Q29ubmVjdGlvbgBnZXRfSW5uZXJFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAGdldF9UbwBG
aWxlSW5mbwBDdWx0dXJlSW5mbwBGaWxlU3lzdGVtSW5mbwBEaXJlY3RvcnlJbmZvAENoYXIARXhl
Y3V0ZVNjYWxhcgBTdHJpbmdCdWlsZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1h
bmFnZXIAU3RyZWFtV3JpdGVyAFRleHRXcml0ZXIAT2xlRGJEYXRhQWRhcHRlcgBXcml0ZVRvU2Vy
dmVyAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9z
dGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1Rf
YzZlNzdjYTUyNGIwNGMxZjliMzVmZDViYTRiMjcxYmYuUHJvcGVydGllcy5SZXNvdXJjZXMucmVz
b3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2M2ZTc3Y2E1MjRiMDRjMWY5YjM1ZmQ1YmE0YjI3MWJm
LlByb3BlcnRpZXMAVGFibGVzAGdldF9WYXJpYWJsZXMAR2V0RmlsZXMAZ2V0X0NvbHVtbk1hcHBp
bmdzAFNldHRpbmdzAHNldF9DcmVkZW50aWFscwBDb250YWlucwBnZXRfQ29sdW1ucwBTeXN0ZW0u
Q29sbGVjdGlvbnMAZ2V0X0Nvbm5lY3Rpb25zAE1haWxBZGRyZXNzAGdldF9EdHMAZ2V0X0F0dGFj
aG1lbnRzAGdldF9Sb3dzAENvbmNhdABPYmplY3QAc2V0X1N1YmplY3QAU3lzdGVtLk5ldABTcGxp
dABnZXRfRGVmYXVsdABnZXRfVGFza1Jlc3VsdABzZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5T
cWxDbGllbnQAU210cENsaWVudABBdHRhY2htZW50AGdldF9DdXJyZW50AGdldF9Db3VudABzZXRf
UG9ydABJQ3JlZGVudGlhbHNCeUhvc3QATW92ZU5leHQAU3lzdGVtLlRleHQAc2V0X0NvbW1hbmRU
ZXh0AENyZWF0ZVRleHQAZ2V0X05vdwBEYXRhUm93AHNldF9Cb2R5AGdldF9Bc3NlbWJseQBTcWxC
dWxrQ29weQBFeGVjdXRlTm9uUXVlcnkAAAABAEFVAHMAZQByADoAOgBSAGUAcABvAHAAdQBsAGEA
dABlAFMAbwB1AHIAYwBlAEYAbwBsAGQAZQByAFAAYQB0AGgAACFVAHMAZQByADoAOgBTAGMAaABl
AG0AYQBOAGEAbQBlAAAtVQBzAGUAcgA6ADoAQgBhAGMAawBVAHAAUwBjAGgAZQBtAGEATgBhAG0A
ZQAAIVMAeQBzAHQAZQBtADoAOgBVAHMAZQByAE4AYQBtAGUAAC9VAHMAZQByADoAOgBBAHIAYwBo
AGkAdgBlAEYAbwBsAGQAZQByAFAAYQB0AGgAACdTAHkAcwB0AGUAbQA6ADoAUABhAGMAawBhAGcA
ZQBOAGEAbQBlAAAnVQBzAGUAcgA6ADoATABvAGcARgBvAGwAZABlAHIAUABhAHQAaAAAHXkAeQB5
AHkATQBNAGQAZABIAEgAbQBtAHMAcwAAA1wAAAVfACQAAAkuAGwAbwBnAAALLgB4AGwAcwB4AAAJ
LgB4AGwAcwAAXVAAcgBvAHYAaQBkAGUAcgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4AQQBDAEUALgBP
AEwARQBEAEIALgAxADIALgAwADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AAGE7AEUAeAB0AGUA
bgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAiAEUAeABjAGUAbAAgADEAMgAuADAAOwBI
AEQAUgA9AFkARQBTADsASQBNAEUAWAA9ADEAIgAAK1QAaABlACAAYwB1AHIAcgBlAG4AdAAgAGYA
aQBsAGUAIABpAHMAOgAgAAAVVABBAEIATABFAF8ATgBBAE0ARQAAH18ARgBpAGwAdABlAHIARABh
AHQAYQBiAGEAcwBlAAADJAAALVQAaABlACAAYwB1AHIAcgBlAG4AdAAgAHMAaABlAGUAdAAgAGkA
cwA6ACAAAB9PAEwARQBEAEIAQwBvAG4AbgBlAGMAdABpAG8AbgAAc1MARQBMAEUAQwBUACAAKgAg
AEYAUgBPAE0AIABzAHkAcwAuAG8AYgBqAGUAYwB0AHMAIABXAEgARQBSAEUAIABvAGIAagBlAGMA
dABfAGkAZAAgAD0AIABPAEIASgBFAEMAVABfAEkARAAoAE4AJwBbAAEHXQAuAFsAAC9dACcAKQAg
ACAAQQBOAEQAIAB0AHkAcABlACAAaQBuACAAKABOACcAVQAnACkAAR8tAC0APgAgAFQAaABlACAA
dABhAGIAbABlACAAWwABI10AIABhAGwAcgBlAGEAZAB5ACAAZQB4AGkAcwB0AHMAIQAAbUkARgAo
AE4ATwBUACAARQBYAEkAUwBUAFMAKABTAEUATABFAEMAVAAgACoAIABGAFIATwBNACAAcwB5AHMA
LgBzAGMAaABlAG0AYQBzACAAVwBIAEUAUgBFACAAbgBhAG0AZQAgAD0AIAAnAAEJJwApACkAIAAB
N0IARQBHAEkATgAgAEUAWABFAEMAKAAnAEMAUgBFAEEAVABFACAAUwBDAEgARQBNAEEAIABbAAEj
XQAgAEEAVQBUAEgATwBSAEkAWgBBAFQASQBPAE4AIABbAAARXQAnACkAIABFAE4ARAAgAAEfUwBF
AEwARQBDAFQAIAAqACAASQBOAFQATwAgAFsAABFdACAARgBSAE8ATQAgAFsAAAddADsAIAAAG0QA
RQBMAEUAVABFACAARgBSAE8ATQAgAFsAACtzAGUAbABlAGMAdAAgAHQAbwBwACAAMQAgACoAIABm
AHIAbwBtACAAWwAABSQAXQAAAycAAQUnACwAAVViACkAIABBAGMAdAB1AGEAbAAgAGMAbwBsAHUA
bQBuAHMAIABpAG4AIABjAHUAcgByAGUAbgB0ACAAZQB4AGMAZQBsACAAcwBoAGUAZQB0ADoAIAAA
gLtTAEUATABFAEMAVAAgAFMAVABVAEYARgAoACgAUwBFAEwARQBDAFQAIAAgACcALABbACcAKwBD
AG8AbAB1AG0AbgBfAE4AYQBtAGUAKwAnAF0AJwAgAEYAUgBPAE0AIABJAG4AZgBvAHIAbQBhAHQA
aQBvAG4AXwBzAGMAaABlAG0AYQAuAEMAbwBsAHUAbQBuAHMAIABXAEgARQBSAEUAIABUAGEAYgBs
AGUAXwBOAGEAbQBlAD0AJwABKScAIABBAE4ARAAgAFQAYQBiAGwAZQBfAFMAQwBoAGUAbQBhAD0A
JwABKycAQQBOAEQAIABDAG8AbAB1AG0AbgBfAE4AYQBtAGUAIABJAE4AIAAoAAFTKQAgAGYAbwBy
ACAAeABtAGwAIABwAGEAdABoACgAJwAnACkAKQAsADEALAAxACwAJwAnACkAIABBAFMAIABDAG8A
bAB1AG0AbgBMAGkAcwB0AAFbYwApACAATQBhAHQAYwBoAGkAbgBnACAAYwBvAGwAdQBtAG4AcwAg
AHcAaQB0AGgAIAB0AGgAZQAgAGUAeABpAHMAdABpAG4AZwAgAHQAYQBiAGwAZQA6ACAAAFstAC0A
PgAgAEUAeABpAHMAdABpAG4AZwAgAHQAYQBiAGwAZQAgAGkAcwAgAGMAbwBwAGkAZQBkACAAdABv
ACAAdABoAGUAIABzAGMAaABlAG0AYQAgAC0AIAABcS0ALQA+ACAARQB4AGkAcwB0AGkAbgBnACAA
dABhAGIAbABlACcAcwAgAGQAYQB0AGEAIABhAHIAZQAgAGQAZQBsAGUAdABlAGQAIABmAHIAbwBt
ACAAdABoAGUAIABzAGMAaABlAG0AYQAgAC0AIAABD3MAZQBsAGUAYwB0ACAAAA8gAGYAcgBvAG0A
IABbAAADLgAAfy0ALQA+ACAAQQBsAGwAIAB0AGgAZQAgAHIAbwB3AHMAIAB1AG4AZABlAHIAIABh
AGIAbwB2AGUAIABtAGUAbgB0AGkAbwBuAGUAZAAgAGMAbwBsAHUAbQBuAHMALAAgAGYAcgBvAG0A
IAB0AGgAZQAgAHMAaABlAGUAdAAgAAE5LAAgAHcAZQByAGUAIABjAG8AcABpAGUAZAAgAHQAbwAg
AHQAaABlACAAdABhAGIAbABlACAAWwAAA10AAFdhACkAIABUAGgAZQAgAHQAYQBiAGwAZQAgAGQA
bwBlAHMAbgAnAHQAIABlAHgAaQBzAHQAIABpAG4AIAB0AGgAZQAgAHMAYwBoAGUAbQBhACAALQAg
AAEfcwBlAGwAZQBjAHQAIAAqACAAZgByAG8AbQAgAFsAAB1DAHIAZQBhAHQAZQAgAHQAYQBiAGwA
ZQAgAFsAAAMoAAADWwAAIV0AIABuAHYAYQByAGMAaABhAHIAKABtAGEAeAApACwAAB9dACAAbgB2
AGEAcgBjAGgAYQByACgAbQBhAHgAKQAABSkAOwAAgIstAC0APgAgAEEAIABuAGUAdwAgAHQAYQBi
AGwAZQAgAGkAcwAgAGMAcgBlAGEAdABlAGQAIAB3AGkAdABoACAAYQBsAGwAIABpAHQAJwBzACAA
YwBvAGwAdQBtAG4AcwAgAGEAcwAgAG4AdgBhAHIAYwBoAGEAcgAoAG0AYQB4ACkAIAAtACAAWwAB
RS0ALQA+ACAAQQBsAGwAIAB0AGgAZQAgAHIAbwB3AHMAIABmAHIAbwBtACAAdABoAGUAIABzAGgA
ZQBlAHQAIAAtACAAATssACAAYQByAGUAIABjAG8AcABpAGUAZAAgAHQAbwAgAHQAaABlACAAdABh
AGIAbABlACAALQAgAFsAATFVAHMAZQByADoAOgBFAHIAcgBvAHIATABvAGcARgBvAGwAZABlAHIA
UABhAHQAaAAAFVwARQByAHIAbwByAEwAbwBnAF8AAD1IAGUAbABwACAAbABpAG4AawAgAGYAbwBy
ACAAdABoAGkAcwAgAGUAeABjAGUAcAB0AGkAbwBuADoAIAAAJ1AAcgBpAG0AYQByAHkAIABlAHgA
YwBlAHAAdABpAG8AbgA6ACAAACdFAHgAYwBlAHAAdABpAG8AbgAgAE0AZQBzAHMAYQBnAGUAOgAg
AAAdRQByAHIAbwByACAAUwBvAHUAcgBjAGUAOgAgAABPQwB1AHIAcgBlAG4AdAAgAG0AZQB0AGgA
bwBkACAAdwBoAGkAYwBoACAAdABoAHIAbwB3AHMAIABlAHgAYwBlAHAAdABpAG8AbgA6ACAAAD9D
AG8AZABlACAAdAByAGEAYwBlACAAYQB0ACAAdABoAGUAIABlAHIAcgBvAHIAIABwAG8AaQBuAHQA
OgAgAAAfVQBzAGUAcgA6ADoARQBtAGEAaQBsAEYAcgBvAG0AAC9VAHMAZQByADoAOgBFAG0AYQBp
AGwARgByAG8AbQBQAGEAcwBzAHcAbwByAGQAABtVAHMAZQByADoAOgBFAG0AYQBpAGwAVABvAAAd
cwBtAHQAcAAuAGcAbQBhAGkAbAAuAGMAbwBtAAAnUwB1AGMAYwBlAHMAcwA6ACAAcABhAGMAawBh
AGcAZQAgAC0AIAABL1QAZQBhAG0ALAAgAAoACQAJAFQAaABlACAAcABhAGMAawBhAGcAZQAgAC0A
IAABgP0sACAAaABhAHMAIABiAGUAZQBuACAAZQB4AGUAYwB1AHQAZQBkACAAcwB1AGMAYwBlAHMA
cwBmAHUAbAAuACAAQQB0AHQAYQBjAGgAZQBkACAAaQBzACAAdABoAGUAIABsAG8AZwAgAGYAaQBs
AGUAIAB3AGkAdABoACAAYQBsAGwAIAB0AGgAZQAgAFMAUQBMACAAcwB0AGUAcABzACAAaQB0ACAA
aABhAHMAIAB0AGEAawBlAG4ALgAKAAoAQwBlAG4AdABlAHIAIABmAG8AcgAgAEcAbwB2AGUAcgBu
AG0AZQBuAHQAYQBsACAAUwB0AHUAZABpAGUAcwAAJUYAYQBpAGwAZQBkADoAIABwAGEAYwBrAGEA
ZwBlACAALQAgAAGBkywAIABoAGEAcwAgAGYAYQBpAGwAZQBkAC4AIABBAHQAdABhAGMAaABlAGQA
IABpAHMAIAB0AGgAZQAgAGUAcgByAG8AcgAtAGwAbwBnACAAZgBpAGwAZQAgAHcAaQB0AGgAIAB0
AGgAZQAgAGQAZQB0AGEAaQBsAHMAIABvAGYAIAB0AGgAZQAgAGUAcgByAG8AcgAuACAAQQBsAHMA
bwAsACAAYwBoAGUAYwBrACAAdABoAGUAIABvAHQAaABlAHIAIABjAG8AbQBwAGwAZQB0AGUAIABs
AG8AZwAgAGYAaQBsAGUAIAB0AG8AIABmAGkAbgBkACAAdABoAGUAIABwAG8AaQBuAHQAIABhAHQA
IAB3AGgAaQBjAGgAIAB0AGgAZQAgAGUAcgByAG8AcgAgAHcAYQBzACAAdAByAGkAZwBnAGUAcgBl
AGQALgAgAAoACgBDAGUAbgB0AGUAcgAgAGYAbwByACAARwBvAHYAZQByAG4AbQBlAG4AdABhAGwA
IABTAHQAdQBkAGkAZQBzAAFxUwBUAF8AYwA2AGUANwA3AGMAYQA1ADIANABiADAANABjADEAZgA5
AGIAMwA1AGYAZAA1AGIAYQA0AGIAMgA3ADEAYgBmAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIA
ZQBzAG8AdQByAGMAZQBzAAAASqmf2KDg7kiYd+ZSa2vGOAAEIAEBCAMgAAEFIAEBEREEIAEBDgYg
AQERgIVOBzICDg4ODh0ODg4ODg4ODh0SPQ4ODhJBAhFFHRI9CBI9EkkOEk0SURJVElkODhJdEmES
XQgODhJhEmUSTRwSbRJhEl0IEmUScRJBEnUIBSAAEoCVBSAAEoCZBiABEoCdHAMgABwDIAAOBSAA
HRI9BAAAEUUEIAEODgUAAQ4dDgUAARJBDgQgAQIOBSACDg4OBgADDg4ODgQGEYC5CSACEmERgLkd
HAUAAg4ODgUgABKAwQQgABJNBCABHA4FIAASgMkGIAESgM0cBCABHBwEIAASWQMgAAgFIAESXQ4G
IAIBDhJJBiABARKA1QUgAQgSYQUgABKA4QYgARKA5QgGIAIBDhJVBSABARJVBSAAEoDpByACEoDt
Dg4DIAACBSABARJhBQACAQ4OBwAEDg4ODg4EIAAScQUAAg4cHAUgABKA8QYgAR0OHQMGIAEBEoD5
BSAAEoD9BSACAQ4OBiABARKBCQQgAQECBSAAEoENCBUSgRUBEoERBSABARMABSABARJ1CAABEoEZ
EYEdBSAAEoEhByACAQ4SgSEIt3pcVhk04IkIiYRdzYCAzJEDBhJ9BAYSgIEDBhIQBAAAEn0FAAAS
gIEGAAEBEoCBBAAAEhADAAABBAgAEn0FCAASgIEECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5v
bkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfYzZlNzdjYTUyNGIwNGMxZjliMzVmZDVi
YTRiMjcxYmYAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOAAARwEAGi5ORVRGcmFtZXdvcmss
VmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0BAEA
AAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1z
Y29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49
Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAA
AAAAAAAAAFBBRFBBRFC0AAAAHFQAAAAAAAAAAAAANlQAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AChUAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAA
AAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQAAAAAAAAA
AAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABADpx
ihoAAAEAOnGKGj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABl
AEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoDAAABAFMA
dAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAAABoAAQAB
AEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAA
AABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AYwA2AGUANwA3
AGMAYQA1ADIANABiADAANABjADEAZgA5AGIAMwA1AGYAZAA1AGIAYQA0AGIAMgA3ADEAYgBmAAAA
PgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADYANwA5ADQALgAyADgAOQA4
ADYAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYwA2AGUANwA3AGMA
YQA1ADIANABiADAANABjADEAZgA5AGIAMwA1AGYAZAA1AGIAYQA0AGIAMgA3ADEAYgBmAC4AZABs
AGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgA
dAAgAEAAIAAgADIAMAAxADgAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAA
AAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBjADYA
ZQA3ADcAYwBhADUAMgA0AGIAMAA0AGMAMQBmADkAYgAzADUAZgBkADUAYgBhADQAYgAyADcAMQBi
AGYALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AYwA2AGUA
NwA3AGMAYQA1ADIANABiADAANABjADEAZgA5AGIAMwA1AGYAZAA1AGIAYQA0AGIAMgA3ADEAYgBm
AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADcAOQA0AC4A
MgA4ADkAOAA2AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA2ADcAOQA0AC4AMgA4ADkAOAA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAADAAAAEg0AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="326,90" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
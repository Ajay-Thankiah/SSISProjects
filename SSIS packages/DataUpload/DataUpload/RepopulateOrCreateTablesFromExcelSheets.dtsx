<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/30/2018 7:23:27 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="AJAY"
  DTS:CreatorName="AJAY\Ajay"
  DTS:DTSID="{FA82856E-495A-4E56-9EC4-A6AB68BC0BB9}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3008.28"
  DTS:LocaleID="16393"
  DTS:ObjectName="RepopulateOrCreateTablesFromExcelSheets"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="50"
  DTS:VersionGUID="{6DCB5097-BC3F-4018-B303-A90D4C27773A}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLEDBConnection]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{AD2B27E8-333A-45EC-B604-883A1BE14CA4}"
      DTS:ObjectName="OLEDBConnection">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">"Data Source="+@[User::ServerName]+";User ID="+@[User::LoginName]+";Password="+@[User::LoginPassword]+";Initial Catalog="+@[User::DatabaseName]+";Application Name=SSIS-CreatePopulateTablesFromExcelSheets-{AD2B27E8-333A-45EC-B604-883A1BE14CA4}"+@[User::ServerName]+"."+@[User::DatabaseName]+"."+@[User::LoginName]+";"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=131.156.33.147;User ID=sa;Initial Catalog=60by25Development;Application Name=SSIS-CreatePopulateTablesFromExcelSheets-{AD2B27E8-333A-45EC-B604-883A1BE14CA4}131.156.33.147.60by25Development.sa;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3BAD4C5B-07EE-497F-8A25-9B01F6708ECF}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ArchiveFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{55145AE1-D08D-4E9D-8401-C0ECBC6617B6}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::BackUpSchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BackUpSchemaName">
      <DTS:VariableValue
        DTS:DataType="8">archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5CCB07E6-CB32-4560-90DD-A6903DAA837D}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::DatabaseName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DatabaseName">
      <DTS:VariableValue
        DTS:DataType="8">60by25Development</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{098CC228-4252-4F0D-BB3C-EDD7BB39013E}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailFrom]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailFrom">
      <DTS:VariableValue
        DTS:DataType="8">cgs.niu@gmail.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5643FCA4-13F1-407D-8563-EDC588CCDEE0}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailFromPassword]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailFromPassword">
      <DTS:VariableValue
        DTS:DataType="8">CgsNiu@1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{42BCF3DB-DE73-42FD-8E6C-AD01DE43B527}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailTo]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailTo">
      <DTS:VariableValue
        DTS:DataType="8">asaraswathyperumal1@niu.edu</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{05A949AE-592C-43A9-99BC-4026AEB8AA34}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ErrorLogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ErrorLogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\ErrorLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{18D0E5B8-06AA-4A16-9060-28AD7A297081}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LogFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9AB8E85D-3564-475D-8962-D10E53447EA5}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginName">
      <DTS:VariableValue
        DTS:DataType="8">sa</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8CCC32EF-7E5F-492E-9233-88E00C6750B7}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LoginPassword]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LoginPassword">
      <DTS:VariableValue
        DTS:DataType="8">cgstestSQL2013</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D0F73045-2656-41A8-8EED-40ADF7121437}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::RepopulateSourceFolderPath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RepopulateSourceFolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\CSCI course docs\CGS\DummyFolderForSSIS</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{354B1FEA-09C7-4F46-B989-0158E83AC16F}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::SchemaName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EC35CA3C-0DD5-4DA5-9997-8D2C69E288F7}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ServerName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ServerName">
      <DTS:VariableValue
        DTS:DataType="8">131.156.33.147</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{D936A7CD-0634-4F94-8B90-1A45CC5AC1F6}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_c6e77ca524b04c1f9b35fd5ba4b271bf"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ArchiveFolderPath,User::BackUpSchemaName,User::EmailFrom,User::EmailFromPassword,User::EmailTo,User::ErrorLogFolderPath,User::LogFolderPath,System::PackageName,User::RepopulateSourceFolderPath,User::SchemaName,System::UserName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7710FA30-79AA-497B-AEA8-2565E87EFB31}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</RootNamespace>
    <AssemblyName>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Settings.get_Default():ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Sett" +
    "ings")]

namespace ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Text;
using System.Net.Mail;

namespace ST_c6e77ca524b04c1f9b35fd5ba4b271bf
{
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
		public void Main()
		{
            bool notEmptyFlag = false;
            string logFileName = "";
            string errorLogFileName = "";
            try
            {
                String sourceFolderPath = Dts.Variables["User::RepopulateSourceFolderPath"].Value.ToString();
                String schemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                String backUpSchemaName = Dts.Variables["User::BackUpSchemaName"].Value.ToString();
                String userName = Dts.Variables["System::UserName"].Value.ToString();
                String archiveFolderPath = Dts.Variables["User::ArchiveFolderPath"].Value.ToString();
                String packageName = Dts.Variables["System::PackageName"].Value.ToString();
                String logFolderPath = Dts.Variables["User::LogFolderPath"].Value.ToString();

                var directory = new DirectoryInfo(sourceFolderPath);
                FileInfo[] files = directory.GetFiles();
                string fileFullPath = "", fileExtension = "", filename = "";
                string logTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                StreamWriter streamWriter = null;
                logFileName = logFolderPath + "\\" + packageName + "_$" + logTime + ".log";

                bool isFirstFile = true;

                streamWriter.WriteLine("The package - " + packageName + ", is working on the folder - " + directory.Name);
                foreach (FileInfo file in files)
                {
                    if (isFirstFile)
                    {
                        streamWriter = File.CreateText(logFileName);
                        isFirstFile = false;
                        notEmptyFlag = true;
                    }
                    if (file.Name.Contains(".xlsx")) { filename = file.Name.Replace(".xlsx", ""); fileExtension = ".xlsx"; }
                    else if (file.Name.Contains(".xls")) { filename = file.Name.Replace(".xls", ""); fileExtension = ".xls"; }
                    else continue;
                    
                    fileFullPath = sourceFolderPath + "\\" + file.Name;

                    string connectionStringWithoutExcelDataType = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
                    OleDbConnection oleDbConnectionWithoutExcelDataType = new OleDbConnection(connectionStringWithoutExcelDataType);

                    oleDbConnectionWithoutExcelDataType.Open();
                    DataTable dataTableWithEachSheetInfo = oleDbConnectionWithoutExcelDataType.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    oleDbConnectionWithoutExcelDataType.Close();

                    streamWriter.WriteLine("The current file is: " + file.Name);

                    string sheetname = "";
                    foreach (DataRow dataRowWithCurrentSheetInfo in dataTableWithEachSheetInfo.Rows)
                    {
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("_FilterDatabase")) continue;
                        if (dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Contains("$"))
                        {
                            sheetname = dataRowWithCurrentSheetInfo["TABLE_NAME"].ToString().Replace("$", "");

                            streamWriter.WriteLine("The current sheet is: " + sheetname);

                            SqlConnection sqlConnection = new SqlConnection();
                            sqlConnection = (SqlConnection)(Dts.Connections["OLEDBConnection"].AcquireConnection(Dts.Transaction) as SqlConnection);

                            SqlCommand sqlCommand = sqlConnection.CreateCommand();
                            string checkTableAvailabilityQuery = "SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[" + schemaName + "].[" + sheetname + "]')  AND type in (N'U')";
                            sqlCommand.CommandText = checkTableAvailabilityQuery;
                            string resultOfTableAvailabilityCheck = "";
                            resultOfTableAvailabilityCheck = (string)sqlCommand.ExecuteScalar();

                            if (resultOfTableAvailabilityCheck !=null && resultOfTableAvailabilityCheck.Length != 0)
                            {
                                streamWriter.WriteLine("--> The table [" + schemaName +"].[" + sheetname + "] already exists!");
                                StringBuilder clearExistingTableQuery = new StringBuilder();
                                clearExistingTableQuery.Append("IF(NOT EXISTS(SELECT * FROM sys.schemas WHERE name = '" + backUpSchemaName + "')) ");
                                clearExistingTableQuery.Append("BEGIN EXEC('CREATE SCHEMA [" + backUpSchemaName + "] AUTHORIZATION [" + userName + "]') END ");
                                clearExistingTableQuery.Append("SELECT * INTO [" + backUpSchemaName + "].[" + sheetname + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + "] FROM [" + schemaName + "].[" + sheetname + "]; ");
                                clearExistingTableQuery.Append("DELETE FROM [" + schemaName + "].[" + sheetname + "]; ");

                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForColumnNames = new OleDbCommand("select top 1 * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForColumnNames = new OleDbDataAdapter(oleDbCommandForColumnNames);
                                DataTable dataTableForColumnNames = new DataTable();
                                oleDbDataAdapterForColumnNames.Fill(dataTableForColumnNames);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder excelHeaderColumn = new StringBuilder();
                                int i;
                                for (i = 0; i < dataTableForColumnNames.Columns.Count - 1; i++)
                                    excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'" + ",");
                                excelHeaderColumn.Append("'" + dataTableForColumnNames.Columns[i].ColumnName + "'");

                                streamWriter.WriteLine("b) Actual columns in current excel sheet: " + excelHeaderColumn.ToString());

                                string queryToGetMatchingColumns = "SELECT STUFF((SELECT  ',['+Column_Name+']' FROM Information_schema.Columns WHERE Table_Name='" +
                                    sheetname + "' AND Table_SChema='" + schemaName + "'" +
                                    "AND Column_Name IN (" + @excelHeaderColumn.ToString() + ") for xml path('')),1,1,'') AS ColumnList";
                                sqlCommand.CommandText = queryToGetMatchingColumns;
                                string matchedColumnsList = (string)sqlCommand.ExecuteScalar();
                                streamWriter.WriteLine("c) Matching columns with the existing table: " + matchedColumnsList);

                                SqlCommand clearExistingTableCommand = new SqlCommand(clearExistingTableQuery.ToString(), sqlConnection);
                                clearExistingTableCommand.ExecuteNonQuery();
                                streamWriter.WriteLine("--> Existing table is copied to the schema - " + backUpSchemaName);
                                streamWriter.WriteLine("--> Existing table's data are deleted from the schema - " + schemaName);

                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForMatchedColumnsDataFromExcel = new OleDbCommand("select " + matchedColumnsList + " from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForMatchedColumnsData = new OleDbDataAdapter(oleDbCommandForMatchedColumnsDataFromExcel);
                                DataTable dataTableWithMatchedColumnsData = new DataTable();
                                oleDbDataAdapterForMatchedColumnsData.Fill(dataTableWithMatchedColumnsData);
                                oleDbConnectionWithoutExcelDataType.Close();

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = schemaName + "." + sheetname;
                                    foreach (var column in dataTableWithMatchedColumnsData.Columns)
                                        sqlBulkCopy.ColumnMappings.Add(column.ToString(), column.ToString());
                                    sqlBulkCopy.WriteToServer(dataTableWithMatchedColumnsData);
                                }
                                streamWriter.WriteLine("--> All the rows under above mentioned columns, from the sheet " + sheetname + ", were copied to the table " + "[" + schemaName + "].[" + sheetname + "]");
                            }
                            else
                            {
                                streamWriter.WriteLine("a) The table doesn't exist in the schema - " + schemaName);
                                oleDbConnectionWithoutExcelDataType.Open();
                                OleDbCommand oleDbCommandForAllDataFromExcel = new OleDbCommand("select * from [" + sheetname + "$]", oleDbConnectionWithoutExcelDataType);
                                OleDbDataAdapter oleDbDataAdapterForAllDataFromExcel = new OleDbDataAdapter(oleDbCommandForAllDataFromExcel);
                                DataTable dataTableForAllDataFromExcel = new DataTable();
                                oleDbDataAdapterForAllDataFromExcel.Fill(dataTableForAllDataFromExcel);
                                oleDbConnectionWithoutExcelDataType.Close();

                                StringBuilder createNewTableQuery = new StringBuilder();
                                createNewTableQuery.Append("Create table [" + schemaName + "].[" + sheetname + "]");
                                createNewTableQuery.Append("(");
                                int k = 0;
                                for (k = 0; k < dataTableForAllDataFromExcel.Columns.Count - 1; k++)
                                    createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max),");
                                createNewTableQuery.Append("[" + dataTableForAllDataFromExcel.Columns[k].ColumnName + "] nvarchar(max)");
                                createNewTableQuery.Append(");");

                                SqlCommand createNewTableCommand = new SqlCommand(createNewTableQuery.ToString(), sqlConnection);
                                createNewTableCommand.ExecuteNonQuery();

                                streamWriter.WriteLine("--> A new table is created with all it's columns as nvarchar(max) - [" + schemaName + "].[" + sheetname + "]");

                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = "[" + schemaName + "].[" + sheetname + "]";
                                    sqlBulkCopy.WriteToServer(dataTableForAllDataFromExcel);
                                }
                                streamWriter.WriteLine("--> All the rows from the sheet - " + sheetname + ", are copied to the table - [" + schemaName + "].[" + sheetname + "]");
                            }
                        }
                        streamWriter.WriteLine(); streamWriter.WriteLine();
                    }
                    streamWriter.WriteLine(); streamWriter.WriteLine(); 
                    File.Move(fileFullPath, archiveFolderPath + "\\" + (file.Name.Replace(sourceFolderPath, "")).Replace(fileExtension, "") + "_$" + DateTime.Now.ToString("yyyyMMddHHmmss") + fileExtension);
                }
                if (streamWriter != null) streamWriter.Close();
                Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success;
            }

            catch (Exception exception)
            {
                errorLogFileName = Dts.Variables["User::ErrorLogFolderPath"].Value.ToString()
                    + "\\" + "ErrorLog_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".log";
                using (StreamWriter sw = File.CreateText(errorLogFileName))
                {
                    sw.WriteLine("Help link for this exception: "+exception.HelpLink);
                    sw.WriteLine("Primary exception: " + exception.InnerException);
                    sw.WriteLine("Exception Message: " + exception.Message);
                    sw.WriteLine("Error Source: " + exception.Source);
                    sw.WriteLine("Current method which throws exception: " + exception.TargetSite);
                    sw.WriteLine("Code trace at the error point: ");
                    sw.WriteLine(exception.StackTrace);
                    Dts.TaskResult = (int)Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure;
                }
            }

            String SendMailFrom = Dts.Variables["EmailFrom"].Value.ToString();
            String SendMailFromPassword = Dts.Variables["EmailFromPassword"].Value.ToString();
            String SendMailTo = Dts.Variables["EmailTo"].Value.ToString();
            String[] SendMailToArray = SendMailTo.Split(',');
            try
            {
                MailMessage email = new MailMessage();
                email.From = new MailAddress(SendMailFrom);
                email.To.Add(SendMailToArray[0]);
                for (int i = 1; i < SendMailToArray.Length; i++)
                {
                    email.CC.Add(SendMailToArray[i]);
                }
                SmtpClient SmtpServer = new SmtpClient("smtp.gmail.com");
                SmtpServer.Port = 587;
                SmtpServer.Credentials = new System.Net.NetworkCredential(SendMailFrom, SendMailFromPassword);
                SmtpServer.EnableSsl = true;

                if (Dts.TaskResult == 0 && notEmptyFlag)
                {
                    //send email of success log - logFileName
                    email.Subject = "Success: package - " + Dts.Variables["System::PackageName"].Value.ToString();
                    email.Body = "Team, \n  The package - " + Dts.Variables["System::PackageName"].Value.ToString() + ", was successful. Attached is the log file about all the steps it has taken.\n\nCenter for Governmental Studies";
                    email.Attachments.Add(new System.Net.Mail.Attachment(logFileName));
                }
                else if (Dts.TaskResult == 1)
                {
                    //send email of failure log - errorLogFileName
                    email.Subject = "Failed: package - " + Dts.Variables["System::PackageName"].Value.ToString();
                    email.Body = "Team, \n  The package - " + Dts.Variables["System::PackageName"].Value.ToString() + ", has been failed. Attached is the error log file with the details of the error. Also, check the log file to find the point at which the error has triggered. \n\nCenter for Governmental Studies";
                    email.Attachments.Add(new System.Net.Mail.Attachment(errorLogFileName));
                }

                SmtpServer.Send(email);
            }
            catch (Exception)
            {
                //
            }
        }
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</msb:CodeName>
		<msb:DisplayName>ST_c6e77ca524b04c1f9b35fd5ba4b271bf</msb:DisplayName>
		<msb:ProjectId>{24C320D1-95F8-4591-9A00-80B600AD38E7}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_c6e77ca524b04c1f9b35fd5ba4b271bf")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_c6e77ca524b04c1f9b35fd5ba4b271bf")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_c6e77ca524b04c1f9b35fd5ba4b271bf.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_c6e77ca524b04c1f9b35fd5ba4b271bf.dll">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
AHCiKBkAAApvNQAACiYRGG8iAAAKcnkFAHARGXKlBQBwKCAAAAoRGHM2AAAKczcAAApzOAAAChMh
ESFvOQAACiYRGG8lAAAKczQAAAoTIhYTIyswESJyqwUAcBEhbzoAAAoRI287AAAKbzwAAApyrwUA
cCggAAAKbzUAAAomESMXWBMjESMRIW86AAAKbz0AAAoXWTK+ESJyqwUAcBEhbzoAAAoRI287AAAK
bzwAAApyqwUAcCggAAAKbzUAAAomERJytQUAcBEibxQAAAooJgAACm8cAAAKHY0pAAABJRZyCwYA
cKIlFxEZoiUYcsgGAHCiJRkRB6IlGnLyBgBwoiUbESJvFAAACqIlHHIeBwBwoigZAAAKEyQRHREk
bzEAAAoRHW8yAAAKdCkAAAETJREScnIHAHARJSgmAAAKbxwAAAoRIG8UAAAKERxzPgAACm8/AAAK
JhEScs4HAHARCCgmAAAKbxwAAAoREnIqCABwEQcoJgAACm8cAAAKERhvIgAAChuNKQAAASUWcpwI
AHCiJRcRJaIlGHKsCABwoiUZERmiJRpypQUAcKIoGQAAChEYczYAAApzNwAACnM4AAAKEyYRJm85
AAAKJhEYbyUAAAoRHHNAAAAKEycRJxEHcrwIAHARGSggAAAKb0EAAAoRJm86AAAKbygAAAoTKCsk
EShvKQAAChMpESdvQgAAChEpbxQAAAoRKW8UAAAKb0MAAAomEShvRAAACi3T3hURKHUcAAABEyoR
KiwHESpvRQAACtwRJxEmb0YAAAreDBEnLAcRJ29FAAAK3BESHY0pAAABJRZywAgAcKIlFxEZoiUY
ckAJAHCiJRkRB6IlGnLBAwBwoiUbERmiJRxyegkAcKIoGQAACm8cAAAKOPQBAAAREnJ+CQBwEQco
JgAACm8cAAAKERhvIgAACnLWCQBwERlypQUAcCggAAAKERhzNgAACnM3AAAKczgAAAoTKxErbzkA
AAomERhvJQAACnM0AAAKEywRLBuNKQAAASUWcvYJAHCiJRcRB6IlGHLBAwBwoiUZERmiJRpyegkA
cKIoGQAACm81AAAKJhEschQKAHBvNQAACiYWEy0WEy0rMBEschgKAHARK286AAAKES1vOwAACm88
AAAKchwKAHAoIAAACm81AAAKJhEtF1gTLREtEStvOgAACm89AAAKF1kyvhEschgKAHARK286AAAK
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
kgUOAIoGUwAGAJcH4ggOAB0KRwAOAKwGhwkOAJ0AhwkGACwH7gkOABIBRwAOADsKhwkGADkJkgUG
ACUBkgUGAMMGkgUSAPIAPgUGAJICvgcGAD4H8QcGAPAG3gUSAFMCKAUSAMMCKAUSAC0CyQUGAHcC
0QcKABYFvAQWAI4IlAEWABwBlAEGAH4EkgUGAPwGHgAGAG0HHgAGAFUBHgAOAI0GzQYOAHIAUwAG
AH0AkgUOAHgGRwAOABICRwAWAPkIlAEWAE4HlAEOAIUAzQYOAIIAUwAOAHgHUwAOAHsHzQYOADgG
RwAOAL4FRwAOABUGhwkOAGMEhwkGAOsBAwYGABkHkgUSAAUJPgUSAE0GPgUSAJ0JPgUSAOUETAkS
ANIJTAkSAGMGPgUSAKgJPgUGAAEA9wQGAL4BkgUGADEBkgUGADIKAwYAAAAADgAAAAAAAQABAAEA
EACzBSUEOQABAAEAAAAQAPgHVAhtAAEAAwAAARAAtAhUCJEAAwAHABEAogXLAREA2wHQAREAywDV
AVAgAAAAAIYAuQUGAAEAMC4AAAAAhhixBwYAAQA4LgAAAACDGLEHBgABAEAuAAAAAJMIOgfZAQEA
bC4AAAAAkwjDAd8BAQBzLgAAAACTCM8B5QEBAHsuAAAAAJYIXQnsAQIAgi4AAAAAhhixBwYAAgCK
LgAAAACRGLcH8QECAAAAAQAaBAkAsQcBABEAsQcGABkAsQcKACkAsQcQADEAsQcQADkAsQcQAEEA
sQcQAEkAsQcQAFEAsQcQAFkAsQcQAGEAsQcQAGkAsQcGAPkAsQcGABkBsQcVACkBsQcGAHEAEQlt
ADEBighzADkBiQV5AEEBEASAANkAfASEAHkAsQcQAHkAmAiIAJEAFQqOAJEAfASTAEkBMgmYAFEB
WgGEAEkBMgmeAFkBtAEQAGEBCgqmAEkBzQisAEkBtACxAEkBMgm3AJkAsQcQAGkBrgUGAHEBgwi+
AJkA/gDDAGkBRQIGAEkBMgnNAMkAKQnTAIkBowfZAKEAswmAAKkAiQXeALEAsQcGADEB9QjjAJEB
iQXpADEB8wWAAJkBmgbwALEAjwD1AKEB+gkQAKEBHgeAAEkBhQT6AMEAsQcGAMEArQD+AKkBsQcE
AbEBsQcLAckAsQcGALkBdgUSAckA1ggYAcEBiQUeAckBfAGEAIkBvwn6ALkAsQclAaEBRwr6ANEA
sQcsAdEAYwEQANEAoQgyAdEBbgA4AaEA5QlAAeEASwIGANEAiQdEAVkBtAEGAGEBIARKAVkBRQIG
ADEBeAkBAOkAkASEAOkAugZQAUkBMglVAekA5gCEAOkA2wCEAOkAaAJbAekAvACEAEkBVwlhAfEA
sQcGAPEBsQcQAPEAmQVoAfEA4AZvAfkBbgAQAPEAFwBvAQECsQcQAAECyQkBAAkCsQd1AQECvQh7
AQECewWCATEBaQn6APEAQAkQAPEAJQoQAPEAGQmHASECsQcQAAwAbgCWAQECqACcAXEAsQcGANkA
sQcGADECQwGiATECLgqrAQEBsQexASEBsQcGACkAcwAuAi4ACwAGAi4AEwAPAi4AGwAuAi4AIwA3
Ai4AKwBgAi4AMwBgAi4AOwBgAi4AQwA3Ai4ASwBmAi4AUwBgAi4AWwB9AkMAYwDFAkkAcwAuAmEA
ewDFAmMAawDFAhwAAwABAAQAAwAAAD4H9QEAAOMB+wEAAGEJAQICAAQAAwACAAUABQABAAYABQAC
AAcABwCNAQSAAAABAAAAiRrjigAAAAAAACUEAAAEAAAAAAAAAAAAAAC5AWUAAAAAAAwAAAAAAAAA
AAAAAMIBnQQAAAAABAAAAAAAAAAAAAAAuQFHAAAAAAAEAAAAAAAAAAAAAAC5AZIFAAAAAAwAAAAA
AAAAAAAAAMIBKAAAAAAAAAAAAAEAAAACCAAAAAAAAABDb2xsZWN0aW9uYDEAPE1vZHVsZT4AZ2V0
X0NDAFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAU3lzdGVtLkRhdGEA
U3lzdGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIAQWRkAE9sZURiU2NoZW1hR3VpZABPbGVEYkNvbW1h
bmQAQ3JlYXRlQ29tbWFuZABTcWxDb21tYW5kAFNlbmQAQXBwZW5kAFJlcGxhY2UAZ2V0X1N0YWNr
VHJhY2UAZGVmYXVsdEluc3RhbmNlAGdldF9Tb3VyY2UAZ2V0X01lc3NhZ2UATWFpbE1lc3NhZ2UA
R2V0T2xlRGJTY2hlbWFUYWJsZQBEYXRhVGFibGUAVmFyaWFibGUASURpc3Bvc2FibGUAUnVudGlt
ZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARmlsZQBnZXRfTmFtZQBzZXRfRGVzdGluYXRp
b25UYWJsZU5hbWUAZ2V0X0NvbHVtbk5hbWUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuUnVudGltZQBXcml0ZUxpbmUAVHlwZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJj
ZUN1bHR1cmUATWV0aG9kQmFzZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxE
YXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBF
ZGl0b3JCcm93c2FibGVTdGF0ZQBnZXRfVGFyZ2V0U2l0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJp
YnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRp
dG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFk
ZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJh
dGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVs
YXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJp
Z2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNv
bXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHZh
bHVlAE1vdmUAU1RfYzZlNzdjYTUyNGIwNGMxZjliMzVmZDViYTRiMjcxYmYAU3lzdGVtLlJ1bnRp
bWUuVmVyc2lvbmluZwBTcWxCdWxrQ29weUNvbHVtbk1hcHBpbmcAVG9TdHJpbmcAZ2V0X0xlbmd0
aABnZXRfSGVscExpbmsATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sATmV0d29ya0NyZWRlbnRpYWwAU3lzdGVtLkNv
bGxlY3Rpb25zLk9iamVjdE1vZGVsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRN
b2RlbABTeXN0ZW0uTmV0Lk1haWwAU1RfYzZlNzdjYTUyNGIwNGMxZjliMzVmZDViYTRiMjcxYmYu
ZGxsAEZpbGwAc2V0X0VuYWJsZVNzbABnZXRfSXRlbQBTeXN0ZW0Ac2V0X0Zyb20AcmVzb3VyY2VN
YW4AT3BlbgBTY3JpcHRNYWluAERhdGFDb2x1bW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVt
Lkdsb2JhbGl6YXRpb24AZ2V0X1RyYW5zYWN0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAFNxbEJ1bGtD
b3B5Q29sdW1uTWFwcGluZ0NvbGxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rpb24ATWFpbEFkZHJl
c3NDb2xsZWN0aW9uAEF0dGFjaG1lbnRDb2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAE9sZURi
Q29ubmVjdGlvbgBBY3F1aXJlQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAGdldF9Jbm5lckV4Y2Vw
dGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AZ2V0X1RvAEZpbGVJbmZvAEN1bHR1cmVJbmZvAEZpbGVT
eXN0ZW1JbmZvAERpcmVjdG9yeUluZm8AQ2hhcgBFeGVjdXRlU2NhbGFyAFN0cmluZ0J1aWxkZXIA
Z2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBTdHJlYW1Xcml0ZXIAVGV4dFdy
aXRlcgBPbGVEYkRhdGFBZGFwdGVyAFdyaXRlVG9TZXJ2ZXIASUVudW1lcmF0b3IAR2V0RW51bWVy
YXRvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBp
bGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF9jNmU3N2NhNTI0YjA0YzFmOWIzNWZkNWJh
NGIyNzFiZi5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1Rf
YzZlNzdjYTUyNGIwNGMxZjliMzVmZDViYTRiMjcxYmYuUHJvcGVydGllcwBUYWJsZXMAZ2V0X1Zh
cmlhYmxlcwBHZXRGaWxlcwBnZXRfQ29sdW1uTWFwcGluZ3MAU2V0dGluZ3MAc2V0X0NyZWRlbnRp
YWxzAENvbnRhaW5zAGdldF9Db2x1bW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlv
bnMATWFpbEFkZHJlc3MAZ2V0X0R0cwBnZXRfQXR0YWNobWVudHMAZ2V0X1Jvd3MAQ29uY2F0AE9i
amVjdABzZXRfU3ViamVjdABTeXN0ZW0uTmV0AFNwbGl0AGdldF9EZWZhdWx0AGdldF9UYXNrUmVz
dWx0AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABTbXRwQ2xpZW50AEF0dGFj
aG1lbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50AHNldF9Qb3J0AElDcmVkZW50aWFsc0J5SG9zdABN
b3ZlTmV4dABTeXN0ZW0uVGV4dABzZXRfQ29tbWFuZFRleHQAQ3JlYXRlVGV4dABnZXRfTm93AERh
dGFSb3cAc2V0X0JvZHkAZ2V0X0Fzc2VtYmx5AFNxbEJ1bGtDb3B5AEV4ZWN1dGVOb25RdWVyeQAA
AAEAQVUAcwBlAHIAOgA6AFIAZQBwAG8AcAB1AGwAYQB0AGUAUwBvAHUAcgBjAGUARgBvAGwAZABl
AHIAUABhAHQAaAAAIVUAcwBlAHIAOgA6AFMAYwBoAGUAbQBhAE4AYQBtAGUAAC1VAHMAZQByADoA
OgBCAGEAYwBrAFUAcABTAGMAaABlAG0AYQBOAGEAbQBlAAAhUwB5AHMAdABlAG0AOgA6AFUAcwBl
AHIATgBhAG0AZQAAL1UAcwBlAHIAOgA6AEEAcgBjAGgAaQB2AGUARgBvAGwAZABlAHIAUABhAHQA
aAAAJ1MAeQBzAHQAZQBtADoAOgBQAGEAYwBrAGEAZwBlAE4AYQBtAGUAACdVAHMAZQByADoAOgBM
AG8AZwBGAG8AbABkAGUAcgBQAGEAdABoAAAdeQB5AHkAeQBNAE0AZABkAEgASABtAG0AcwBzAAAD
XAAABV8AJAAACS4AbABvAGcAAB1UAGgAZQAgAHAAYQBjAGsAYQBnAGUAIAAtACAAATssACAAaQBz
ACAAdwBvAHIAawBpAG4AZwAgAG8AbgAgAHQAaABlACAAZgBvAGwAZABlAHIAIAAtACAAAQsuAHgA
bABzAHgAAAkuAHgAbABzAABdUAByAG8AdgBpAGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBB
AEMARQAuAE8ATABFAEQAQgAuADEAMgAuADAAOwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAAYTsA
RQB4AHQAZQBuAGQAZQBkACAAUAByAG8AcABlAHIAdABpAGUAcwA9ACIARQB4AGMAZQBsACAAMQAy
AC4AMAA7AEgARABSAD0AWQBFAFMAOwBJAE0ARQBYAD0AMQAiAAArVABoAGUAIABjAHUAcgByAGUA
bgB0ACAAZgBpAGwAZQAgAGkAcwA6ACAAABVUAEEAQgBMAEUAXwBOAEEATQBFAAAfXwBGAGkAbAB0
AGUAcgBEAGEAdABhAGIAYQBzAGUAAAMkAAAtVABoAGUAIABjAHUAcgByAGUAbgB0ACAAcwBoAGUA
ZQB0ACAAaQBzADoAIAAAH08ATABFAEQAQgBDAG8AbgBuAGUAYwB0AGkAbwBuAABzUwBFAEwARQBD
AFQAIAAqACAARgBSAE8ATQAgAHMAeQBzAC4AbwBiAGoAZQBjAHQAcwAgAFcASABFAFIARQAgAG8A
YgBqAGUAYwB0AF8AaQBkACAAPQAgAE8AQgBKAEUAQwBUAF8ASQBEACgATgAnAFsAAQddAC4AWwAA
L10AJwApACAAIABBAE4ARAAgAHQAeQBwAGUAIABpAG4AIAAoAE4AJwBVACcAKQABHy0ALQA+ACAA
VABoAGUAIAB0AGEAYgBsAGUAIABbAAEjXQAgAGEAbAByAGUAYQBkAHkAIABlAHgAaQBzAHQAcwAh
AABtSQBGACgATgBPAFQAIABFAFgASQBTAFQAUwAoAFMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0A
IABzAHkAcwAuAHMAYwBoAGUAbQBhAHMAIABXAEgARQBSAEUAIABuAGEAbQBlACAAPQAgACcAAQkn
ACkAKQAgAAE3QgBFAEcASQBOACAARQBYAEUAQwAoACcAQwBSAEUAQQBUAEUAIABTAEMASABFAE0A
QQAgAFsAASNdACAAQQBVAFQASABPAFIASQBaAEEAVABJAE8ATgAgAFsAABFdACcAKQAgAEUATgBE
ACAAAR9TAEUATABFAEMAVAAgACoAIABJAE4AVABPACAAWwAAEV0AIABGAFIATwBNACAAWwAAB10A
OwAgAAAbRABFAEwARQBUAEUAIABGAFIATwBNACAAWwAAK3MAZQBsAGUAYwB0ACAAdABvAHAAIAAx
ACAAKgAgAGYAcgBvAG0AIABbAAAFJABdAAADJwABBScALAABVWIAKQAgAEEAYwB0AHUAYQBsACAA
YwBvAGwAdQBtAG4AcwAgAGkAbgAgAGMAdQByAHIAZQBuAHQAIABlAHgAYwBlAGwAIABzAGgAZQBl
AHQAOgAgAACAu1MARQBMAEUAQwBUACAAUwBUAFUARgBGACgAKABTAEUATABFAEMAVAAgACAAJwAs
AFsAJwArAEMAbwBsAHUAbQBuAF8ATgBhAG0AZQArACcAXQAnACAARgBSAE8ATQAgAEkAbgBmAG8A
cgBtAGEAdABpAG8AbgBfAHMAYwBoAGUAbQBhAC4AQwBvAGwAdQBtAG4AcwAgAFcASABFAFIARQAg
AFQAYQBiAGwAZQBfAE4AYQBtAGUAPQAnAAEpJwAgAEEATgBEACAAVABhAGIAbABlAF8AUwBDAGgA
ZQBtAGEAPQAnAAErJwBBAE4ARAAgAEMAbwBsAHUAbQBuAF8ATgBhAG0AZQAgAEkATgAgACgAAVMp
ACAAZgBvAHIAIAB4AG0AbAAgAHAAYQB0AGgAKAAnACcAKQApACwAMQAsADEALAAnACcAKQAgAEEA
UwAgAEMAbwBsAHUAbQBuAEwAaQBzAHQAAVtjACkAIABNAGEAdABjAGgAaQBuAGcAIABjAG8AbAB1
AG0AbgBzACAAdwBpAHQAaAAgAHQAaABlACAAZQB4AGkAcwB0AGkAbgBnACAAdABhAGIAbABlADoA
IAAAWy0ALQA+ACAARQB4AGkAcwB0AGkAbgBnACAAdABhAGIAbABlACAAaQBzACAAYwBvAHAAaQBl
AGQAIAB0AG8AIAB0AGgAZQAgAHMAYwBoAGUAbQBhACAALQAgAAFxLQAtAD4AIABFAHgAaQBzAHQA
aQBuAGcAIAB0AGEAYgBsAGUAJwBzACAAZABhAHQAYQAgAGEAcgBlACAAZABlAGwAZQB0AGUAZAAg
AGYAcgBvAG0AIAB0AGgAZQAgAHMAYwBoAGUAbQBhACAALQAgAAEPcwBlAGwAZQBjAHQAIAAADyAA
ZgByAG8AbQAgAFsAAAMuAAB/LQAtAD4AIABBAGwAbAAgAHQAaABlACAAcgBvAHcAcwAgAHUAbgBk
AGUAcgAgAGEAYgBvAHYAZQAgAG0AZQBuAHQAaQBvAG4AZQBkACAAYwBvAGwAdQBtAG4AcwAsACAA
ZgByAG8AbQAgAHQAaABlACAAcwBoAGUAZQB0ACAAATksACAAdwBlAHIAZQAgAGMAbwBwAGkAZQBk
ACAAdABvACAAdABoAGUAIAB0AGEAYgBsAGUAIABbAAADXQAAV2EAKQAgAFQAaABlACAAdABhAGIA
bABlACAAZABvAGUAcwBuACcAdAAgAGUAeABpAHMAdAAgAGkAbgAgAHQAaABlACAAcwBjAGgAZQBt
AGEAIAAtACAAAR9zAGUAbABlAGMAdAAgACoAIABmAHIAbwBtACAAWwAAHUMAcgBlAGEAdABlACAA
dABhAGIAbABlACAAWwAAAygAAANbAAAhXQAgAG4AdgBhAHIAYwBoAGEAcgAoAG0AYQB4ACkALAAA
H10AIABuAHYAYQByAGMAaABhAHIAKABtAGEAeAApAAAFKQA7AACAiy0ALQA+ACAAQQAgAG4AZQB3
ACAAdABhAGIAbABlACAAaQBzACAAYwByAGUAYQB0AGUAZAAgAHcAaQB0AGgAIABhAGwAbAAgAGkA
dAAnAHMAIABjAG8AbAB1AG0AbgBzACAAYQBzACAAbgB2AGEAcgBjAGgAYQByACgAbQBhAHgAKQAg
AC0AIABbAAFFLQAtAD4AIABBAGwAbAAgAHQAaABlACAAcgBvAHcAcwAgAGYAcgBvAG0AIAB0AGgA
ZQAgAHMAaABlAGUAdAAgAC0AIAABOywAIABhAHIAZQAgAGMAbwBwAGkAZQBkACAAdABvACAAdABo
AGUAIAB0AGEAYgBsAGUAIAAtACAAWwABMVUAcwBlAHIAOgA6AEUAcgByAG8AcgBMAG8AZwBGAG8A
bABkAGUAcgBQAGEAdABoAAAVXABFAHIAcgBvAHIATABvAGcAXwAAPUgAZQBsAHAAIABsAGkAbgBr
ACAAZgBvAHIAIAB0AGgAaQBzACAAZQB4AGMAZQBwAHQAaQBvAG4AOgAgAAAnUAByAGkAbQBhAHIA
eQAgAGUAeABjAGUAcAB0AGkAbwBuADoAIAAAJ0UAeABjAGUAcAB0AGkAbwBuACAATQBlAHMAcwBh
AGcAZQA6ACAAAB1FAHIAcgBvAHIAIABTAG8AdQByAGMAZQA6ACAAAE9DAHUAcgByAGUAbgB0ACAA
bQBlAHQAaABvAGQAIAB3AGgAaQBjAGgAIAB0AGgAcgBvAHcAcwAgAGUAeABjAGUAcAB0AGkAbwBu
ADoAIAAAP0MAbwBkAGUAIAB0AHIAYQBjAGUAIABhAHQAIAB0AGgAZQAgAGUAcgByAG8AcgAgAHAA
bwBpAG4AdAA6ACAAABNFAG0AYQBpAGwARgByAG8AbQAAI0UAbQBhAGkAbABGAHIAbwBtAFAAYQBz
AHMAdwBvAHIAZAAAD0UAbQBhAGkAbABUAG8AAB1zAG0AdABwAC4AZwBtAGEAaQBsAC4AYwBvAG0A
ACdTAHUAYwBjAGUAcwBzADoAIABwAGEAYwBrAGEAZwBlACAALQAgAAEvVABlAGEAbQAsACAACgAg
ACAAVABoAGUAIABwAGEAYwBrAGEAZwBlACAALQAgAAGA2ywAIAB3AGEAcwAgAHMAdQBjAGMAZQBz
AHMAZgB1AGwALgAgAEEAdAB0AGEAYwBoAGUAZAAgAGkAcwAgAHQAaABlACAAbABvAGcAIABmAGkA
bABlACAAYQBiAG8AdQB0ACAAYQBsAGwAIAB0AGgAZQAgAHMAdABlAHAAcwAgAGkAdAAgAGgAYQBz
ACAAdABhAGsAZQBuAC4ACgAKAEMAZQBuAHQAZQByACAAZgBvAHIAIABHAG8AdgBlAHIAbgBtAGUA
bgB0AGEAbAAgAFMAdAB1AGQAaQBlAHMAACVGAGEAaQBsAGUAZAA6ACAAcABhAGMAawBhAGcAZQAg
AC0AIAABgX8sACAAaABhAHMAIABiAGUAZQBuACAAZgBhAGkAbABlAGQALgAgAEEAdAB0AGEAYwBo
AGUAZAAgAGkAcwAgAHQAaABlACAAZQByAHIAbwByACAAbABvAGcAIABmAGkAbABlACAAdwBpAHQA
aAAgAHQAaABlACAAZABlAHQAYQBpAGwAcwAgAG8AZgAgAHQAaABlACAAZQByAHIAbwByAC4AIABB
AGwAcwBvACwAIABjAGgAZQBjAGsAIAB0AGgAZQAgAGwAbwBnACAAZgBpAGwAZQAgAHQAbwAgAGYA
aQBuAGQAIAB0AGgAZQAgAHAAbwBpAG4AdAAgAGEAdAAgAHcAaABpAGMAaAAgAHQAaABlACAAZQBy
AHIAbwByACAAaABhAHMAIAB0AHIAaQBnAGcAZQByAGUAZAAuACAACgAKAEMAZQBuAHQAZQByACAA
ZgBvAHIAIABHAG8AdgBlAHIAbgBtAGUAbgB0AGEAbAAgAFMAdAB1AGQAaQBlAHMAAHFTAFQAXwBj
ADYAZQA3ADcAYwBhADUAMgA0AGIAMAA0AGMAMQBmADkAYgAzADUAZgBkADUAYgBhADQAYgAyADcA
MQBiAGYALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAApCZZptWMQ
Qp4JsctAi1BuAAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGAiVAHMwIODg4OHQ4ODg4ODg4OEj0d
EkEODg4SRQIRSR0SQQgSQRJNDhJRElUSWRJdDg4SYRJlEmEIDg4SZRJpElEcEnESZRJhCBJpEnUS
RRJ5CAUgABKAmQUgABKAnQYgARKAoRwDIAAcAyAADgUgAB0SQQQAABFJBCABDg4FAAEOHQ4HAAQO
Dg4ODgUAARJFDgQgAQIOBSACDg4OBgADDg4ODgQGEYC9CSACEmURgL0dHAUAAg4ODgUgABKAwQQg
ABJRBCABHA4FIAASgMkGIAESgM0cBCABHBwEIAASXQMgAAgFIAESYQ4GIAIBDhJNBiABARKA1QUg
AQgSZQUgABKA4QYgARKA5QgGIAIBDhJZBSABARJZBSAAEoDpByACEoDtDg4DIAACBSABARJlBQAC
AQ4OBCAAEnUFAAIOHBwFIAASgPEGIAEdDh0DBiABARKA+QUgABKA/QUgAgEODgYgAQESgQkEIAEB
AgUgABKBDQgVEoEVARKBEQUgAQETAAUgAQESeQgAARKBGRGBHQUgABKBIQcgAgEOEoEhCLd6XFYZ
NOCJCImEXc2AgMyRBAYSgIEEBhKAhQMGEhAFAAASgIEFAAASgIUGAAEBEoCFBAAAEhADAAABBQgA
EoCBBQgAEoCFBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEA
AgAAAAAAKAEAI1NUX2M2ZTc3Y2E1MjRiMDRjMWY5YjM1ZmQ1YmE0YjI3MWJmAAAFAQAAAAAWAQAR
Q29weXJpZ2h0IEAgIDIwMTgAAEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJh
bWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNAQBAAAAAAC0AAAAzsrvvgEAAACRAAAA
bFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4w
LjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0
ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQFQA
AAAAAAAAAAAAWlQAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAExUAAAAAAAAAAAAAAAAX0NvckRs
bE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAA
AAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQAAAAAAAAA
AAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABAOOK
iRoAAAEA44qJGj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABl
AEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoDAAABAFMA
dAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAAABoAAQAB
AEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAA
AABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AYwA2AGUANwA3
AGMAYQA1ADIANABiADAANABjADEAZgA5AGIAMwA1AGYAZAA1AGIAYQA0AGIAMgA3ADEAYgBmAAAA
PgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADYANwA5ADMALgAzADUANQA1
ADUAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYwA2AGUANwA3AGMA
YQA1ADIANABiADAANABjADEAZgA5AGIAMwA1AGYAZAA1AGIAYQA0AGIAMgA3ADEAYgBmAC4AZABs
AGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgA
dAAgAEAAIAAgADIAMAAxADgAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAA
AAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBjADYA
ZQA3ADcAYwBhADUAMgA0AGIAMAA0AGMAMQBmADkAYgAzADUAZgBkADUAYgBhADQAYgAyADcAMQBi
AGYALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AYwA2AGUA
NwA3AGMAYQA1ADIANABiADAANABjADEAZgA5AGIAMwA1AGYAZAA1AGIAYQA0AGIAMgA3ADEAYgBm
AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADcAOQAzAC4A
MwA1ADUANQA1AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA2ADcAOQAzAC4AMwA1ADUANQA1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAADAAAAGw0AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="326,90" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>